
MagTile2-Tile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab98  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800ad70  0800ad70  0000bd70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800adb0  0800adb0  0000c020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800adb0  0800adb0  0000bdb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800adb8  0800adb8  0000c020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800adb8  0800adb8  0000bdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800adbc  0800adbc  0000bdbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  0800adc0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  20000020  0800ade0  0000c020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000092c  0800ade0  0000c92c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e1f0  00000000  00000000  0000c050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ec  00000000  00000000  0002a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a50  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014a7  00000000  00000000  0002ee80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cab  00000000  00000000  00030327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d9ac  00000000  00000000  00059fd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ace9  00000000  00000000  0007797e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00192667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007578  00000000  00000000  001926ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00199c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ad58 	.word	0x0800ad58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	0800ad58 	.word	0x0800ad58

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009a8:	f000 b988 	b.w	8000cbc <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	468e      	mov	lr, r1
 80009cc:	4604      	mov	r4, r0
 80009ce:	4688      	mov	r8, r1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d14a      	bne.n	8000a6a <__udivmoddi4+0xa6>
 80009d4:	428a      	cmp	r2, r1
 80009d6:	4617      	mov	r7, r2
 80009d8:	d962      	bls.n	8000aa0 <__udivmoddi4+0xdc>
 80009da:	fab2 f682 	clz	r6, r2
 80009de:	b14e      	cbz	r6, 80009f4 <__udivmoddi4+0x30>
 80009e0:	f1c6 0320 	rsb	r3, r6, #32
 80009e4:	fa01 f806 	lsl.w	r8, r1, r6
 80009e8:	fa20 f303 	lsr.w	r3, r0, r3
 80009ec:	40b7      	lsls	r7, r6
 80009ee:	ea43 0808 	orr.w	r8, r3, r8
 80009f2:	40b4      	lsls	r4, r6
 80009f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f8:	fa1f fc87 	uxth.w	ip, r7
 80009fc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a00:	0c23      	lsrs	r3, r4, #16
 8000a02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d909      	bls.n	8000a26 <__udivmoddi4+0x62>
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000a18:	f080 80ea 	bcs.w	8000bf0 <__udivmoddi4+0x22c>
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f240 80e7 	bls.w	8000bf0 <__udivmoddi4+0x22c>
 8000a22:	3902      	subs	r1, #2
 8000a24:	443b      	add	r3, r7
 8000a26:	1a9a      	subs	r2, r3, r2
 8000a28:	b2a3      	uxth	r3, r4
 8000a2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3a:	459c      	cmp	ip, r3
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0x8e>
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000a44:	f080 80d6 	bcs.w	8000bf4 <__udivmoddi4+0x230>
 8000a48:	459c      	cmp	ip, r3
 8000a4a:	f240 80d3 	bls.w	8000bf4 <__udivmoddi4+0x230>
 8000a4e:	443b      	add	r3, r7
 8000a50:	3802      	subs	r0, #2
 8000a52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a56:	eba3 030c 	sub.w	r3, r3, ip
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	b11d      	cbz	r5, 8000a66 <__udivmoddi4+0xa2>
 8000a5e:	40f3      	lsrs	r3, r6
 8000a60:	2200      	movs	r2, #0
 8000a62:	e9c5 3200 	strd	r3, r2, [r5]
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	428b      	cmp	r3, r1
 8000a6c:	d905      	bls.n	8000a7a <__udivmoddi4+0xb6>
 8000a6e:	b10d      	cbz	r5, 8000a74 <__udivmoddi4+0xb0>
 8000a70:	e9c5 0100 	strd	r0, r1, [r5]
 8000a74:	2100      	movs	r1, #0
 8000a76:	4608      	mov	r0, r1
 8000a78:	e7f5      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000a7a:	fab3 f183 	clz	r1, r3
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	d146      	bne.n	8000b10 <__udivmoddi4+0x14c>
 8000a82:	4573      	cmp	r3, lr
 8000a84:	d302      	bcc.n	8000a8c <__udivmoddi4+0xc8>
 8000a86:	4282      	cmp	r2, r0
 8000a88:	f200 8105 	bhi.w	8000c96 <__udivmoddi4+0x2d2>
 8000a8c:	1a84      	subs	r4, r0, r2
 8000a8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a92:	2001      	movs	r0, #1
 8000a94:	4690      	mov	r8, r2
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d0e5      	beq.n	8000a66 <__udivmoddi4+0xa2>
 8000a9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a9e:	e7e2      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	f000 8090 	beq.w	8000bc6 <__udivmoddi4+0x202>
 8000aa6:	fab2 f682 	clz	r6, r2
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	f040 80a4 	bne.w	8000bf8 <__udivmoddi4+0x234>
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	0c03      	lsrs	r3, r0, #16
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	b280      	uxth	r0, r0
 8000aba:	b2bc      	uxth	r4, r7
 8000abc:	2101      	movs	r1, #1
 8000abe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aca:	fb04 f20c 	mul.w	r2, r4, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d907      	bls.n	8000ae2 <__udivmoddi4+0x11e>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ad8:	d202      	bcs.n	8000ae0 <__udivmoddi4+0x11c>
 8000ada:	429a      	cmp	r2, r3
 8000adc:	f200 80e0 	bhi.w	8000ca0 <__udivmoddi4+0x2dc>
 8000ae0:	46c4      	mov	ip, r8
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ae8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000aec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af0:	fb02 f404 	mul.w	r4, r2, r4
 8000af4:	429c      	cmp	r4, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x144>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x142>
 8000b00:	429c      	cmp	r4, r3
 8000b02:	f200 80ca 	bhi.w	8000c9a <__udivmoddi4+0x2d6>
 8000b06:	4602      	mov	r2, r0
 8000b08:	1b1b      	subs	r3, r3, r4
 8000b0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b0e:	e7a5      	b.n	8000a5c <__udivmoddi4+0x98>
 8000b10:	f1c1 0620 	rsb	r6, r1, #32
 8000b14:	408b      	lsls	r3, r1
 8000b16:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b20:	fa20 f306 	lsr.w	r3, r0, r6
 8000b24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b32:	fa1f fc87 	uxth.w	ip, r7
 8000b36:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3a:	0c1c      	lsrs	r4, r3, #16
 8000b3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b48:	45a6      	cmp	lr, r4
 8000b4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x1a0>
 8000b50:	193c      	adds	r4, r7, r4
 8000b52:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000b56:	f080 809c 	bcs.w	8000c92 <__udivmoddi4+0x2ce>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f240 8099 	bls.w	8000c92 <__udivmoddi4+0x2ce>
 8000b60:	3802      	subs	r0, #2
 8000b62:	443c      	add	r4, r7
 8000b64:	eba4 040e 	sub.w	r4, r4, lr
 8000b68:	fa1f fe83 	uxth.w	lr, r3
 8000b6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b70:	fb09 4413 	mls	r4, r9, r3, r4
 8000b74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b7c:	45a4      	cmp	ip, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x1ce>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000b86:	f080 8082 	bcs.w	8000c8e <__udivmoddi4+0x2ca>
 8000b8a:	45a4      	cmp	ip, r4
 8000b8c:	d97f      	bls.n	8000c8e <__udivmoddi4+0x2ca>
 8000b8e:	3b02      	subs	r3, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b96:	eba4 040c 	sub.w	r4, r4, ip
 8000b9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b9e:	4564      	cmp	r4, ip
 8000ba0:	4673      	mov	r3, lr
 8000ba2:	46e1      	mov	r9, ip
 8000ba4:	d362      	bcc.n	8000c6c <__udivmoddi4+0x2a8>
 8000ba6:	d05f      	beq.n	8000c68 <__udivmoddi4+0x2a4>
 8000ba8:	b15d      	cbz	r5, 8000bc2 <__udivmoddi4+0x1fe>
 8000baa:	ebb8 0203 	subs.w	r2, r8, r3
 8000bae:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bba:	431e      	orrs	r6, r3
 8000bbc:	40cc      	lsrs	r4, r1
 8000bbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e74f      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000bc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bca:	0c01      	lsrs	r1, r0, #16
 8000bcc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4638      	mov	r0, r7
 8000bda:	463c      	mov	r4, r7
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	46be      	mov	lr, r7
 8000be0:	2620      	movs	r6, #32
 8000be2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000be6:	eba2 0208 	sub.w	r2, r2, r8
 8000bea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bee:	e766      	b.n	8000abe <__udivmoddi4+0xfa>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	e718      	b.n	8000a26 <__udivmoddi4+0x62>
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	e72c      	b.n	8000a52 <__udivmoddi4+0x8e>
 8000bf8:	f1c6 0220 	rsb	r2, r6, #32
 8000bfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	40b1      	lsls	r1, r6
 8000c04:	fa20 f202 	lsr.w	r2, r0, r2
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c12:	b2bc      	uxth	r4, r7
 8000c14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb08 f904 	mul.w	r9, r8, r4
 8000c22:	40b0      	lsls	r0, r6
 8000c24:	4589      	cmp	r9, r1
 8000c26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2a:	b280      	uxth	r0, r0
 8000c2c:	d93e      	bls.n	8000cac <__udivmoddi4+0x2e8>
 8000c2e:	1879      	adds	r1, r7, r1
 8000c30:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000c34:	d201      	bcs.n	8000c3a <__udivmoddi4+0x276>
 8000c36:	4589      	cmp	r9, r1
 8000c38:	d81f      	bhi.n	8000c7a <__udivmoddi4+0x2b6>
 8000c3a:	eba1 0109 	sub.w	r1, r1, r9
 8000c3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c42:	fb09 f804 	mul.w	r8, r9, r4
 8000c46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4a:	b292      	uxth	r2, r2
 8000c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c50:	4542      	cmp	r2, r8
 8000c52:	d229      	bcs.n	8000ca8 <__udivmoddi4+0x2e4>
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000c5a:	d2c4      	bcs.n	8000be6 <__udivmoddi4+0x222>
 8000c5c:	4542      	cmp	r2, r8
 8000c5e:	d2c2      	bcs.n	8000be6 <__udivmoddi4+0x222>
 8000c60:	f1a9 0102 	sub.w	r1, r9, #2
 8000c64:	443a      	add	r2, r7
 8000c66:	e7be      	b.n	8000be6 <__udivmoddi4+0x222>
 8000c68:	45f0      	cmp	r8, lr
 8000c6a:	d29d      	bcs.n	8000ba8 <__udivmoddi4+0x1e4>
 8000c6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c74:	3801      	subs	r0, #1
 8000c76:	46e1      	mov	r9, ip
 8000c78:	e796      	b.n	8000ba8 <__udivmoddi4+0x1e4>
 8000c7a:	eba7 0909 	sub.w	r9, r7, r9
 8000c7e:	4449      	add	r1, r9
 8000c80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c88:	fb09 f804 	mul.w	r8, r9, r4
 8000c8c:	e7db      	b.n	8000c46 <__udivmoddi4+0x282>
 8000c8e:	4673      	mov	r3, lr
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1ce>
 8000c92:	4650      	mov	r0, sl
 8000c94:	e766      	b.n	8000b64 <__udivmoddi4+0x1a0>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e6fd      	b.n	8000a96 <__udivmoddi4+0xd2>
 8000c9a:	443b      	add	r3, r7
 8000c9c:	3a02      	subs	r2, #2
 8000c9e:	e733      	b.n	8000b08 <__udivmoddi4+0x144>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	443b      	add	r3, r7
 8000ca6:	e71c      	b.n	8000ae2 <__udivmoddi4+0x11e>
 8000ca8:	4649      	mov	r1, r9
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x222>
 8000cac:	eba1 0109 	sub.w	r1, r1, r9
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb6:	fb09 f804 	mul.w	r8, r9, r4
 8000cba:	e7c4      	b.n	8000c46 <__udivmoddi4+0x282>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <I2C_Slave_Init>:

static I2C_HandleTypeDef* i2c_handle;

extern can_blink;

void I2C_Slave_Init(I2C_HandleTypeDef* hi2c) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
    i2c_handle = hi2c;
 8000cc8:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <I2C_Slave_Init+0x1c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
    HAL_I2C_EnableListen_IT(hi2c);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f005 fc10 	bl	80064f4 <HAL_I2C_EnableListen_IT>
}
 8000cd4:	bf00      	nop
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000244 	.word	0x20000244

08000ce0 <I2C_Register_Init>:

void I2C_Register_Init(uint8_t reg_addr, uint8_t size, I2C_RW_Access access,
		void *mem_ptr) {
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	717b      	strb	r3, [r7, #5]
	if (reg_addr < MAX_REGISTERS) {
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000cf8:	d825      	bhi.n	8000d46 <I2C_Register_Init+0x66>
		i2c_register_map[reg_addr].size = size;
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	b2d8      	uxtb	r0, r3
 8000d04:	4913      	ldr	r1, [pc, #76]	@ (8000d54 <I2C_Register_Init+0x74>)
 8000d06:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8000d0a:	f360 0302 	bfi	r3, r0, #0, #3
 8000d0e:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
		i2c_register_map[reg_addr].access = access;
 8000d12:	79fa      	ldrb	r2, [r7, #7]
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	f003 0301 	and.w	r3, r3, #1
 8000d1a:	b2d8      	uxtb	r0, r3
 8000d1c:	490d      	ldr	r1, [pc, #52]	@ (8000d54 <I2C_Register_Init+0x74>)
 8000d1e:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8000d22:	f360 03c3 	bfi	r3, r0, #3, #1
 8000d26:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
		i2c_register_map[reg_addr].enabled = 1;
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <I2C_Register_Init+0x74>)
 8000d2e:	f811 3032 	ldrb.w	r3, [r1, r2, lsl #3]
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	f801 3032 	strb.w	r3, [r1, r2, lsl #3]
		i2c_register_map[reg_addr].mem_ptr = mem_ptr;
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <I2C_Register_Init+0x74>)
 8000d3e:	00db      	lsls	r3, r3, #3
 8000d40:	4413      	add	r3, r2
 8000d42:	683a      	ldr	r2, [r7, #0]
 8000d44:	605a      	str	r2, [r3, #4]
	}
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000003c 	.word	0x2000003c

08000d58 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	460b      	mov	r3, r1
 8000d62:	70fb      	strb	r3, [r7, #3]
 8000d64:	4613      	mov	r3, r2
 8000d66:	803b      	strh	r3, [r7, #0]
    can_blink = !can_blink;
 8000d68:	4b29      	ldr	r3, [pc, #164]	@ (8000e10 <HAL_I2C_AddrCallback+0xb8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bf0c      	ite	eq
 8000d70:	2301      	moveq	r3, #1
 8000d72:	2300      	movne	r3, #0
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	461a      	mov	r2, r3
 8000d78:	4b25      	ldr	r3, [pc, #148]	@ (8000e10 <HAL_I2C_AddrCallback+0xb8>)
 8000d7a:	601a      	str	r2, [r3, #0]
	if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8000d7c:	78fb      	ldrb	r3, [r7, #3]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d107      	bne.n	8000d92 <HAL_I2C_AddrCallback+0x3a>
        HAL_I2C_Slave_Seq_Receive_IT(hi2c, rx_buffer, 1, I2C_NEXT_FRAME);  // Expect register index
 8000d82:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000d86:	2201      	movs	r2, #1
 8000d88:	4922      	ldr	r1, [pc, #136]	@ (8000e14 <HAL_I2C_AddrCallback+0xbc>)
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f005 fb00 	bl	8006390 <HAL_I2C_Slave_Seq_Receive_IT>
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, tx_buffer, i2c_register_map[current_reg].size, I2C_LAST_FRAME);
    } else {
        static uint8_t dummy = 0xFF;
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &dummy, 1, I2C_LAST_FRAME);
    }
}
 8000d90:	e039      	b.n	8000e06 <HAL_I2C_AddrCallback+0xae>
    } else if (current_reg < MAX_REGISTERS && i2c_register_map[current_reg].enabled) {
 8000d92:	4b21      	ldr	r3, [pc, #132]	@ (8000e18 <HAL_I2C_AddrCallback+0xc0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b3f      	cmp	r3, #63	@ 0x3f
 8000d98:	d82e      	bhi.n	8000df8 <HAL_I2C_AddrCallback+0xa0>
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000e18 <HAL_I2C_AddrCallback+0xc0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4b1e      	ldr	r3, [pc, #120]	@ (8000e1c <HAL_I2C_AddrCallback+0xc4>)
 8000da2:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000da6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_I2C_AddrCallback+0xa0>
        memcpy(tx_buffer, i2c_register_map[current_reg].mem_ptr, i2c_register_map[current_reg].size);
 8000db0:	4b19      	ldr	r3, [pc, #100]	@ (8000e18 <HAL_I2C_AddrCallback+0xc0>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4a19      	ldr	r2, [pc, #100]	@ (8000e1c <HAL_I2C_AddrCallback+0xc4>)
 8000db6:	00db      	lsls	r3, r3, #3
 8000db8:	4413      	add	r3, r2
 8000dba:	6859      	ldr	r1, [r3, #4]
 8000dbc:	4b16      	ldr	r3, [pc, #88]	@ (8000e18 <HAL_I2C_AddrCallback+0xc0>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	461a      	mov	r2, r3
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <HAL_I2C_AddrCallback+0xc4>)
 8000dc4:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000dc8:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <HAL_I2C_AddrCallback+0xc8>)
 8000dd2:	f009 ffb3 	bl	800ad3c <memcpy>
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, tx_buffer, i2c_register_map[current_reg].size, I2C_LAST_FRAME);
 8000dd6:	4b10      	ldr	r3, [pc, #64]	@ (8000e18 <HAL_I2C_AddrCallback+0xc0>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e1c <HAL_I2C_AddrCallback+0xc4>)
 8000dde:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000de2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	461a      	mov	r2, r3
 8000dea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dee:	490c      	ldr	r1, [pc, #48]	@ (8000e20 <HAL_I2C_AddrCallback+0xc8>)
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f005 fa1b 	bl	800622c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000df6:	e006      	b.n	8000e06 <HAL_I2C_AddrCallback+0xae>
        HAL_I2C_Slave_Seq_Transmit_IT(hi2c, &dummy, 1, I2C_LAST_FRAME);
 8000df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	4909      	ldr	r1, [pc, #36]	@ (8000e24 <HAL_I2C_AddrCallback+0xcc>)
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f005 fa13 	bl	800622c <HAL_I2C_Slave_Seq_Transmit_IT>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20000010 	.word	0x20000010
 8000e14:	2000023c 	.word	0x2000023c
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	2000003c 	.word	0x2000003c
 8000e20:	20000240 	.word	0x20000240
 8000e24:	20000001 	.word	0x20000001

08000e28 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
    if (current_reg == 0xFF) {
 8000e30:	4b33      	ldr	r3, [pc, #204]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2bff      	cmp	r3, #255	@ 0xff
 8000e36:	d12e      	bne.n	8000e96 <HAL_I2C_SlaveRxCpltCallback+0x6e>
        current_reg = rx_buffer[0];
 8000e38:	4b32      	ldr	r3, [pc, #200]	@ (8000f04 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	4b30      	ldr	r3, [pc, #192]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e3e:	701a      	strb	r2, [r3, #0]

        // If the register is writable, expect its value next
        if (current_reg < MAX_REGISTERS &&
 8000e40:	4b2f      	ldr	r3, [pc, #188]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e46:	d856      	bhi.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
            i2c_register_map[current_reg].enabled &&
 8000e48:	4b2d      	ldr	r3, [pc, #180]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	461a      	mov	r2, r3
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000e50:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000e54:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000e58:	b2db      	uxtb	r3, r3
        if (current_reg < MAX_REGISTERS &&
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d04b      	beq.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
            i2c_register_map[current_reg].access) {
 8000e5e:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000e66:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000e6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000e6e:	b2db      	uxtb	r3, r3
            i2c_register_map[current_reg].enabled &&
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d040      	beq.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>

            HAL_I2C_Slave_Seq_Receive_IT(hi2c, rx_buffer,
                i2c_register_map[current_reg].size, I2C_LAST_FRAME);
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4b23      	ldr	r3, [pc, #140]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000e7c:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000e80:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000e84:	b2db      	uxtb	r3, r3
            HAL_I2C_Slave_Seq_Receive_IT(hi2c, rx_buffer,
 8000e86:	461a      	mov	r2, r3
 8000e88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e8c:	491d      	ldr	r1, [pc, #116]	@ (8000f04 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f005 fa7e 	bl	8006390 <HAL_I2C_Slave_Seq_Receive_IT>
               i2c_register_map[current_reg].access) {

        memcpy(i2c_register_map[current_reg].mem_ptr, rx_buffer, i2c_register_map[current_reg].size);
        current_reg = 0xFF;
    }
}
 8000e94:	e02f      	b.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
    } else if (current_reg < MAX_REGISTERS &&
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e9c:	d82b      	bhi.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
               i2c_register_map[current_reg].enabled &&
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000ea6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000eaa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000eae:	b2db      	uxtb	r3, r3
    } else if (current_reg < MAX_REGISTERS &&
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d020      	beq.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
               i2c_register_map[current_reg].access) {
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000ebc:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000ec0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000ec4:	b2db      	uxtb	r3, r3
               i2c_register_map[current_reg].enabled &&
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d015      	beq.n	8000ef6 <HAL_I2C_SlaveRxCpltCallback+0xce>
        memcpy(i2c_register_map[current_reg].mem_ptr, rx_buffer, i2c_register_map[current_reg].size);
 8000eca:	4b0d      	ldr	r3, [pc, #52]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4a0e      	ldr	r2, [pc, #56]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	6858      	ldr	r0, [r3, #4]
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	461a      	mov	r2, r3
 8000edc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_I2C_SlaveRxCpltCallback+0xe0>)
 8000ede:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
 8000ee2:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	461a      	mov	r2, r3
 8000eea:	4906      	ldr	r1, [pc, #24]	@ (8000f04 <HAL_I2C_SlaveRxCpltCallback+0xdc>)
 8000eec:	f009 ff26 	bl	800ad3c <memcpy>
        current_reg = 0xFF;
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <HAL_I2C_SlaveRxCpltCallback+0xd8>)
 8000ef2:	22ff      	movs	r2, #255	@ 0xff
 8000ef4:	701a      	strb	r2, [r3, #0]
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000000 	.word	0x20000000
 8000f04:	2000023c 	.word	0x2000023c
 8000f08:	2000003c 	.word	0x2000003c

08000f0c <HAL_I2C_SlaveTxCpltCallback>:


void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
    current_reg = 0xFF;
 8000f14:	4b04      	ldr	r3, [pc, #16]	@ (8000f28 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 8000f16:	22ff      	movs	r2, #255	@ 0xff
 8000f18:	701a      	strb	r2, [r3, #0]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	20000000 	.word	0x20000000

08000f2c <HAL_I2C_ListenCpltCallback>:

void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
    HAL_I2C_EnableListen_IT(hi2c);
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f005 fadd 	bl	80064f4 <HAL_I2C_EnableListen_IT>
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	0000      	movs	r0, r0
 8000f44:	0000      	movs	r0, r0
	...

08000f48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f4c:	f002 f8b5 	bl	80030ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f50:	f000 f928 	bl	80011a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f54:	f001 f896 	bl	8002084 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f58:	f000 f96e 	bl	8001238 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f5c:	f000 fa0e 	bl	800137c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000f60:	f000 fa70 	bl	8001444 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000f64:	f000 faf4 	bl	8001550 <MX_ADC4_Init>
  MX_ADC5_Init();
 8000f68:	f000 fb56 	bl	8001618 <MX_ADC5_Init>
  MX_TIM1_Init();
 8000f6c:	f000 fc3e 	bl	80017ec <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f70:	f000 fdc8 	bl	8001b04 <MX_TIM8_Init>
  MX_TIM20_Init();
 8000f74:	f000 fe8e 	bl	8001c94 <MX_TIM20_Init>
  MX_FDCAN1_Init();
 8000f78:	f000 fbb2 	bl	80016e0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000f7c:	f000 fbf6 	bl	800176c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000f80:	f000 fcfc 	bl	800197c <MX_TIM3_Init>
  MX_UART4_Init();
 8000f84:	f000 ff4e 	bl	8001e24 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000f88:	f000 ff98 	bl	8001ebc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f8c:	f000 ffe2 	bl	8001f54 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f90:	f001 f82c 	bl	8001fec <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000f94:	f000 fd80 	bl	8001a98 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// 1: green; 2: red; 3: blue
	// set LED to red
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000f98:	4b6f      	ldr	r3, [pc, #444]	@ (8001158 <main+0x210>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 8000fa0:	4b6d      	ldr	r3, [pc, #436]	@ (8001158 <main+0x210>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	2264      	movs	r2, #100	@ 0x64
 8000fa6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8001158 <main+0x210>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2200      	movs	r2, #0
 8000fae:	63da      	str	r2, [r3, #60]	@ 0x3c

	// turn on LED pwm
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4869      	ldr	r0, [pc, #420]	@ (8001158 <main+0x210>)
 8000fb4:	f007 ff22 	bl	8008dfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000fb8:	2104      	movs	r1, #4
 8000fba:	4867      	ldr	r0, [pc, #412]	@ (8001158 <main+0x210>)
 8000fbc:	f007 ff1e 	bl	8008dfc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fc0:	2108      	movs	r1, #8
 8000fc2:	4865      	ldr	r0, [pc, #404]	@ (8001158 <main+0x210>)
 8000fc4:	f007 ff1a 	bl	8008dfc <HAL_TIM_PWM_Start>

	HAL_Delay(1000);
 8000fc8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fcc:	f002 f8e6 	bl	800319c <HAL_Delay>

	// calibrate the ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000fd0:	217f      	movs	r1, #127	@ 0x7f
 8000fd2:	4862      	ldr	r0, [pc, #392]	@ (800115c <main+0x214>)
 8000fd4:	f004 f872 	bl	80050bc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000fd8:	217f      	movs	r1, #127	@ 0x7f
 8000fda:	4861      	ldr	r0, [pc, #388]	@ (8001160 <main+0x218>)
 8000fdc:	f004 f86e 	bl	80050bc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000fe0:	217f      	movs	r1, #127	@ 0x7f
 8000fe2:	4860      	ldr	r0, [pc, #384]	@ (8001164 <main+0x21c>)
 8000fe4:	f004 f86a 	bl	80050bc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8000fe8:	217f      	movs	r1, #127	@ 0x7f
 8000fea:	485f      	ldr	r0, [pc, #380]	@ (8001168 <main+0x220>)
 8000fec:	f004 f866 	bl	80050bc <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 8000ff0:	217f      	movs	r1, #127	@ 0x7f
 8000ff2:	485e      	ldr	r0, [pc, #376]	@ (800116c <main+0x224>)
 8000ff4:	f004 f862 	bl	80050bc <HAL_ADCEx_Calibration_Start>

	// start the ADCs
	HAL_ADC_Start_IT(&hadc3);
 8000ff8:	485a      	ldr	r0, [pc, #360]	@ (8001164 <main+0x21c>)
 8000ffa:	f002 fefd 	bl	8003df8 <HAL_ADC_Start_IT>

	// start the timer
	HAL_TIM_Base_Start(&htim6);
 8000ffe:	485c      	ldr	r0, [pc, #368]	@ (8001170 <main+0x228>)
 8001000:	f007 fe2a 	bl	8008c58 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	485b      	ldr	r0, [pc, #364]	@ (8001174 <main+0x22c>)
 8001008:	f007 fef8 	bl	8008dfc <HAL_TIM_PWM_Start>

//	 start I2C slave listen
//	HAL_I2C_EnableListen_IT(&hi2c1);
//	HAL_I2C_Slave_Receive_IT(&hi2c1, i2cRxBuffer, I2C_BUFFER_SIZE);
	// initialize I2C registers
	I2C_Register_Init(0x00, 4, READONLY, &voltage_in_5);
 800100c:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <main+0x230>)
 800100e:	2200      	movs	r2, #0
 8001010:	2104      	movs	r1, #4
 8001012:	2000      	movs	r0, #0
 8001014:	f7ff fe64 	bl	8000ce0 <I2C_Register_Init>
	I2C_Register_Init(0x01, 4, READONLY, &voltage_in_12);
 8001018:	4b58      	ldr	r3, [pc, #352]	@ (800117c <main+0x234>)
 800101a:	2200      	movs	r2, #0
 800101c:	2104      	movs	r1, #4
 800101e:	2001      	movs	r0, #1
 8001020:	f7ff fe5e 	bl	8000ce0 <I2C_Register_Init>
	I2C_Register_Init(0x02, 4, READONLY, &voltage_in_HV);
 8001024:	4b56      	ldr	r3, [pc, #344]	@ (8001180 <main+0x238>)
 8001026:	2200      	movs	r2, #0
 8001028:	2104      	movs	r1, #4
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff fe58 	bl	8000ce0 <I2C_Register_Init>
	I2C_Slave_Init(&hi2c1);
 8001030:	4854      	ldr	r0, [pc, #336]	@ (8001184 <main+0x23c>)
 8001032:	f7ff fe45 	bl	8000cc0 <I2C_Slave_Init>


	// set LED to yellow
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <main+0x210>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2264      	movs	r2, #100	@ 0x64
 800103c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 800103e:	4b46      	ldr	r3, [pc, #280]	@ (8001158 <main+0x210>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2264      	movs	r2, #100	@ 0x64
 8001044:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001046:	4b44      	ldr	r3, [pc, #272]	@ (8001158 <main+0x210>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	2200      	movs	r2, #0
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// read digital inputs
		BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 800104e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001052:	484d      	ldr	r0, [pc, #308]	@ (8001188 <main+0x240>)
 8001054:	f005 f836 	bl	80060c4 <HAL_GPIO_ReadPin>
 8001058:	4603      	mov	r3, r0
 800105a:	461a      	mov	r2, r3
 800105c:	4b4b      	ldr	r3, [pc, #300]	@ (800118c <main+0x244>)
 800105e:	701a      	strb	r2, [r3, #0]

		// read analog inputs
		HAL_ADC_Start(&hadc1);
 8001060:	483e      	ldr	r0, [pc, #248]	@ (800115c <main+0x214>)
 8001062:	f002 fcdf 	bl	8003a24 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8001066:	2164      	movs	r1, #100	@ 0x64
 8001068:	483c      	ldr	r0, [pc, #240]	@ (800115c <main+0x214>)
 800106a:	f002 fdbf 	bl	8003bec <HAL_ADC_PollForConversion>
		V_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 800106e:	483b      	ldr	r0, [pc, #236]	@ (800115c <main+0x214>)
 8001070:	f003 f81a 	bl	80040a8 <HAL_ADC_GetValue>
 8001074:	4603      	mov	r3, r0
 8001076:	4a46      	ldr	r2, [pc, #280]	@ (8001190 <main+0x248>)
 8001078:	6013      	str	r3, [r2, #0]
		HAL_ADC_PollForConversion(&hadc1, 100);
 800107a:	2164      	movs	r1, #100	@ 0x64
 800107c:	4837      	ldr	r0, [pc, #220]	@ (800115c <main+0x214>)
 800107e:	f002 fdb5 	bl	8003bec <HAL_ADC_PollForConversion>
		V_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8001082:	4836      	ldr	r0, [pc, #216]	@ (800115c <main+0x214>)
 8001084:	f003 f810 	bl	80040a8 <HAL_ADC_GetValue>
 8001088:	4603      	mov	r3, r0
 800108a:	4a42      	ldr	r2, [pc, #264]	@ (8001194 <main+0x24c>)
 800108c:	6013      	str	r3, [r2, #0]
		HAL_ADC_PollForConversion(&hadc1, 100);
 800108e:	2164      	movs	r1, #100	@ 0x64
 8001090:	4832      	ldr	r0, [pc, #200]	@ (800115c <main+0x214>)
 8001092:	f002 fdab 	bl	8003bec <HAL_ADC_PollForConversion>
		V_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8001096:	4831      	ldr	r0, [pc, #196]	@ (800115c <main+0x214>)
 8001098:	f003 f806 	bl	80040a8 <HAL_ADC_GetValue>
 800109c:	4603      	mov	r3, r0
 800109e:	4a3e      	ldr	r2, [pc, #248]	@ (8001198 <main+0x250>)
 80010a0:	6013      	str	r3, [r2, #0]

		// calculate analog values
		voltage_in_12 = V_SENSE_12 * 0.0080566406;
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <main+0x24c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fb22 	bl	80006f0 <__aeabi_ui2d>
 80010ac:	a324      	add	r3, pc, #144	@ (adr r3, 8001140 <main+0x1f8>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff f8b1 	bl	8000218 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fc19 	bl	80008f4 <__aeabi_d2f>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a2d      	ldr	r2, [pc, #180]	@ (800117c <main+0x234>)
 80010c6:	6013      	str	r3, [r2, #0]
		voltage_in_5 = V_SENSE_5 * 0.0014648438;
 80010c8:	4b33      	ldr	r3, [pc, #204]	@ (8001198 <main+0x250>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fb0f 	bl	80006f0 <__aeabi_ui2d>
 80010d2:	a31d      	add	r3, pc, #116	@ (adr r3, 8001148 <main+0x200>)
 80010d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d8:	f7ff f89e 	bl	8000218 <__aeabi_dmul>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4610      	mov	r0, r2
 80010e2:	4619      	mov	r1, r3
 80010e4:	f7ff fc06 	bl	80008f4 <__aeabi_d2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4a23      	ldr	r2, [pc, #140]	@ (8001178 <main+0x230>)
 80010ec:	6013      	str	r3, [r2, #0]
		voltage_in_HV = V_SENSE_HV * 0.0194091797;
 80010ee:	4b28      	ldr	r3, [pc, #160]	@ (8001190 <main+0x248>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fafc 	bl	80006f0 <__aeabi_ui2d>
 80010f8:	a315      	add	r3, pc, #84	@ (adr r3, 8001150 <main+0x208>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	f7ff f88b 	bl	8000218 <__aeabi_dmul>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fbf3 	bl	80008f4 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <main+0x238>)
 8001112:	6013      	str	r3, [r2, #0]

		// set timer output
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coil_pwm_ccr_1);
 8001114:	4b21      	ldr	r3, [pc, #132]	@ (800119c <main+0x254>)
 8001116:	881a      	ldrh	r2, [r3, #0]
 8001118:	4b16      	ldr	r3, [pc, #88]	@ (8001174 <main+0x22c>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	635a      	str	r2, [r3, #52]	@ 0x34

		// set blue LED to CAN blink
		if (can_blink) {
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <main+0x258>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d004      	beq.n	8001130 <main+0x1e8>
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 100);
 8001126:	4b0c      	ldr	r3, [pc, #48]	@ (8001158 <main+0x210>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2264      	movs	r2, #100	@ 0x64
 800112c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800112e:	e78e      	b.n	800104e <main+0x106>
		} else {
			__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001130:	4b09      	ldr	r3, [pc, #36]	@ (8001158 <main+0x210>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c
		BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 8001138:	e789      	b.n	800104e <main+0x106>
 800113a:	bf00      	nop
 800113c:	f3af 8000 	nop.w
 8001140:	ff241901 	.word	0xff241901
 8001144:	3f807fff 	.word	0x3f807fff
 8001148:	0dbe6fed 	.word	0x0dbe6fed
 800114c:	3f580000 	.word	0x3f580000
 8001150:	0036f9c0 	.word	0x0036f9c0
 8001154:	3f93e000 	.word	0x3f93e000
 8001158:	20000568 	.word	0x20000568
 800115c:	20000248 	.word	0x20000248
 8001160:	200002b4 	.word	0x200002b4
 8001164:	20000320 	.word	0x20000320
 8001168:	2000038c 	.word	0x2000038c
 800116c:	200003f8 	.word	0x200003f8
 8001170:	200005b4 	.word	0x200005b4
 8001174:	2000051c 	.word	0x2000051c
 8001178:	20000904 	.word	0x20000904
 800117c:	20000900 	.word	0x20000900
 8001180:	200008fc 	.word	0x200008fc
 8001184:	200004c8 	.word	0x200004c8
 8001188:	48000400 	.word	0x48000400
 800118c:	200008e8 	.word	0x200008e8
 8001190:	200008ec 	.word	0x200008ec
 8001194:	200008f0 	.word	0x200008f0
 8001198:	200008f4 	.word	0x200008f4
 800119c:	2000090c 	.word	0x2000090c
 80011a0:	20000010 	.word	0x20000010

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b094      	sub	sp, #80	@ 0x50
 80011a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011aa:	f107 0318 	add.w	r3, r7, #24
 80011ae:	2238      	movs	r2, #56	@ 0x38
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f009 fd96 	bl	800ace4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]
 80011c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80011c6:	2000      	movs	r0, #0
 80011c8:	f006 fcc2 	bl	8007b50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011cc:	2301      	movs	r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011d4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d6:	2302      	movs	r3, #2
 80011d8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011da:	2303      	movs	r3, #3
 80011dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80011de:	2304      	movs	r3, #4
 80011e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80011e2:	2355      	movs	r3, #85	@ 0x55
 80011e4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011ee:	2302      	movs	r3, #2
 80011f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f006 fd5e 	bl	8007cb8 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001202:	f001 f8b5 	bl	8002370 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2303      	movs	r3, #3
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2104      	movs	r1, #4
 800121e:	4618      	mov	r0, r3
 8001220:	f007 f85c 	bl	80082dc <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800122a:	f001 f8a1 	bl	8002370 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	@ 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08c      	sub	sp, #48	@ 0x30
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800123e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2220      	movs	r2, #32
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f009 fd47 	bl	800ace4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001256:	4b45      	ldr	r3, [pc, #276]	@ (800136c <MX_ADC1_Init+0x134>)
 8001258:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800125c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800125e:	4b43      	ldr	r3, [pc, #268]	@ (800136c <MX_ADC1_Init+0x134>)
 8001260:	2200      	movs	r2, #0
 8001262:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001264:	4b41      	ldr	r3, [pc, #260]	@ (800136c <MX_ADC1_Init+0x134>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800126a:	4b40      	ldr	r3, [pc, #256]	@ (800136c <MX_ADC1_Init+0x134>)
 800126c:	2200      	movs	r2, #0
 800126e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001270:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <MX_ADC1_Init+0x134>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001276:	4b3d      	ldr	r3, [pc, #244]	@ (800136c <MX_ADC1_Init+0x134>)
 8001278:	2201      	movs	r2, #1
 800127a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800127c:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <MX_ADC1_Init+0x134>)
 800127e:	2204      	movs	r2, #4
 8001280:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001282:	4b3a      	ldr	r3, [pc, #232]	@ (800136c <MX_ADC1_Init+0x134>)
 8001284:	2200      	movs	r2, #0
 8001286:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001288:	4b38      	ldr	r3, [pc, #224]	@ (800136c <MX_ADC1_Init+0x134>)
 800128a:	2200      	movs	r2, #0
 800128c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <MX_ADC1_Init+0x134>)
 8001290:	2203      	movs	r2, #3
 8001292:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001294:	4b35      	ldr	r3, [pc, #212]	@ (800136c <MX_ADC1_Init+0x134>)
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <MX_ADC1_Init+0x134>)
 800129e:	2200      	movs	r2, #0
 80012a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012a2:	4b32      	ldr	r3, [pc, #200]	@ (800136c <MX_ADC1_Init+0x134>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a8:	4b30      	ldr	r3, [pc, #192]	@ (800136c <MX_ADC1_Init+0x134>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <MX_ADC1_Init+0x134>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80012b6:	4b2d      	ldr	r3, [pc, #180]	@ (800136c <MX_ADC1_Init+0x134>)
 80012b8:	2201      	movs	r2, #1
 80012ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 80012be:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <MX_ADC1_Init+0x134>)
 80012c0:	2214      	movs	r2, #20
 80012c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 80012c4:	4b29      	ldr	r3, [pc, #164]	@ (800136c <MX_ADC1_Init+0x134>)
 80012c6:	22c0      	movs	r2, #192	@ 0xc0
 80012c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <MX_ADC1_Init+0x134>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80012d0:	4b26      	ldr	r3, [pc, #152]	@ (800136c <MX_ADC1_Init+0x134>)
 80012d2:	2201      	movs	r2, #1
 80012d4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012d6:	4825      	ldr	r0, [pc, #148]	@ (800136c <MX_ADC1_Init+0x134>)
 80012d8:	f002 f9e8 	bl	80036ac <HAL_ADC_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80012e2:	f001 f845 	bl	8002370 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80012ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ee:	4619      	mov	r1, r3
 80012f0:	481e      	ldr	r0, [pc, #120]	@ (800136c <MX_ADC1_Init+0x134>)
 80012f2:	f003 ff77 	bl	80051e4 <HAL_ADCEx_MultiModeConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80012fc:	f001 f838 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001300:	4b1b      	ldr	r3, [pc, #108]	@ (8001370 <MX_ADC1_Init+0x138>)
 8001302:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001304:	2306      	movs	r3, #6
 8001306:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001308:	2307      	movs	r3, #7
 800130a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800130c:	237f      	movs	r3, #127	@ 0x7f
 800130e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001310:	2304      	movs	r3, #4
 8001312:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	@ (800136c <MX_ADC1_Init+0x134>)
 800131e:	f003 f945 	bl	80045ac <HAL_ADC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001328:	f001 f822 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <MX_ADC1_Init+0x13c>)
 800132e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001330:	230c      	movs	r3, #12
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	480c      	ldr	r0, [pc, #48]	@ (800136c <MX_ADC1_Init+0x134>)
 800133a:	f003 f937 	bl	80045ac <HAL_ADC_ConfigChannel>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001344:	f001 f814 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <MX_ADC1_Init+0x140>)
 800134a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800134c:	2312      	movs	r3, #18
 800134e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	4619      	mov	r1, r3
 8001354:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_ADC1_Init+0x134>)
 8001356:	f003 f929 	bl	80045ac <HAL_ADC_ConfigChannel>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001360:	f001 f806 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	3730      	adds	r7, #48	@ 0x30
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	20000248 	.word	0x20000248
 8001370:	0c900008 	.word	0x0c900008
 8001374:	10c00010 	.word	0x10c00010
 8001378:	14f00020 	.word	0x14f00020

0800137c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b088      	sub	sp, #32
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001382:	463b      	mov	r3, r7
 8001384:	2220      	movs	r2, #32
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f009 fcab 	bl	800ace4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800138e:	4b2a      	ldr	r3, [pc, #168]	@ (8001438 <MX_ADC2_Init+0xbc>)
 8001390:	4a2a      	ldr	r2, [pc, #168]	@ (800143c <MX_ADC2_Init+0xc0>)
 8001392:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <MX_ADC2_Init+0xbc>)
 8001396:	2200      	movs	r2, #0
 8001398:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800139a:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <MX_ADC2_Init+0xbc>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80013a6:	4b24      	ldr	r3, [pc, #144]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013ac:	4b22      	ldr	r3, [pc, #136]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013b4:	2204      	movs	r2, #4
 80013b6:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80013be:	4b1e      	ldr	r3, [pc, #120]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d2:	4b19      	ldr	r3, [pc, #100]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013da:	2200      	movs	r2, #0
 80013dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013e6:	4b14      	ldr	r3, [pc, #80]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013ec:	4b12      	ldr	r3, [pc, #72]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013f4:	4810      	ldr	r0, [pc, #64]	@ (8001438 <MX_ADC2_Init+0xbc>)
 80013f6:	f002 f959 	bl	80036ac <HAL_ADC_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 8001400:	f000 ffb6 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001404:	4b0e      	ldr	r3, [pc, #56]	@ (8001440 <MX_ADC2_Init+0xc4>)
 8001406:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001408:	2306      	movs	r3, #6
 800140a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001410:	237f      	movs	r3, #127	@ 0x7f
 8001412:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001414:	2304      	movs	r3, #4
 8001416:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_ADC2_Init+0xbc>)
 8001422:	f003 f8c3 	bl	80045ac <HAL_ADC_ConfigChannel>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800142c:	f000 ffa0 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200002b4 	.word	0x200002b4
 800143c:	50000100 	.word	0x50000100
 8001440:	04300002 	.word	0x04300002

08001444 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	@ 0x30
 8001448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800144a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	2220      	movs	r2, #32
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f009 fc41 	bl	800ace4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001462:	4b38      	ldr	r3, [pc, #224]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001464:	4a38      	ldr	r2, [pc, #224]	@ (8001548 <MX_ADC3_Init+0x104>)
 8001466:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001468:	4b36      	ldr	r3, [pc, #216]	@ (8001544 <MX_ADC3_Init+0x100>)
 800146a:	2200      	movs	r2, #0
 800146c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800146e:	4b35      	ldr	r3, [pc, #212]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001474:	4b33      	ldr	r3, [pc, #204]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800147a:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <MX_ADC3_Init+0x100>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001480:	4b30      	ldr	r3, [pc, #192]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001486:	4b2f      	ldr	r3, [pc, #188]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001488:	2204      	movs	r2, #4
 800148a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800148c:	4b2d      	ldr	r3, [pc, #180]	@ (8001544 <MX_ADC3_Init+0x100>)
 800148e:	2200      	movs	r2, #0
 8001490:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001492:	4b2c      	ldr	r3, [pc, #176]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001494:	2200      	movs	r2, #0
 8001496:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <MX_ADC3_Init+0x100>)
 800149a:	2201      	movs	r2, #1
 800149c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800149e:	4b29      	ldr	r3, [pc, #164]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 80014a6:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014a8:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80014ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014ae:	4b25      	ldr	r3, [pc, #148]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80014b6:	4b23      	ldr	r3, [pc, #140]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80014be:	4b21      	ldr	r3, [pc, #132]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80014c6:	4b1f      	ldr	r3, [pc, #124]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80014ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014d0:	221c      	movs	r2, #28
 80014d2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80014d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014d6:	2280      	movs	r2, #128	@ 0x80
 80014d8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014dc:	2200      	movs	r2, #0
 80014de:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80014e0:	4b18      	ldr	r3, [pc, #96]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014e2:	2201      	movs	r2, #1
 80014e4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014e6:	4817      	ldr	r0, [pc, #92]	@ (8001544 <MX_ADC3_Init+0x100>)
 80014e8:	f002 f8e0 	bl	80036ac <HAL_ADC_Init>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80014f2:	f000 ff3d 	bl	8002370 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80014f6:	2300      	movs	r3, #0
 80014f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80014fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	4810      	ldr	r0, [pc, #64]	@ (8001544 <MX_ADC3_Init+0x100>)
 8001502:	f003 fe6f 	bl	80051e4 <HAL_ADCEx_MultiModeConfigChannel>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800150c:	f000 ff30 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <MX_ADC3_Init+0x108>)
 8001512:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001514:	2306      	movs	r3, #6
 8001516:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001518:	2304      	movs	r3, #4
 800151a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800151c:	237f      	movs	r3, #127	@ 0x7f
 800151e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001520:	2304      	movs	r3, #4
 8001522:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001528:	1d3b      	adds	r3, r7, #4
 800152a:	4619      	mov	r1, r3
 800152c:	4805      	ldr	r0, [pc, #20]	@ (8001544 <MX_ADC3_Init+0x100>)
 800152e:	f003 f83d 	bl	80045ac <HAL_ADC_ConfigChannel>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001538:	f000 ff1a 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800153c:	bf00      	nop
 800153e:	3730      	adds	r7, #48	@ 0x30
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000320 	.word	0x20000320
 8001548:	50000400 	.word	0x50000400
 800154c:	04300002 	.word	0x04300002

08001550 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001556:	463b      	mov	r3, r7
 8001558:	2220      	movs	r2, #32
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f009 fbc1 	bl	800ace4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001564:	4a2a      	ldr	r2, [pc, #168]	@ (8001610 <MX_ADC4_Init+0xc0>)
 8001566:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <MX_ADC4_Init+0xbc>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001574:	4b25      	ldr	r3, [pc, #148]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800157a:	4b24      	ldr	r3, [pc, #144]	@ (800160c <MX_ADC4_Init+0xbc>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001580:	4b22      	ldr	r3, [pc, #136]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001582:	2200      	movs	r2, #0
 8001584:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001588:	2204      	movs	r2, #4
 800158a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_ADC4_Init+0xbc>)
 800158e:	2200      	movs	r2, #0
 8001590:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001592:	4b1e      	ldr	r3, [pc, #120]	@ (800160c <MX_ADC4_Init+0xbc>)
 8001594:	2200      	movs	r2, #0
 8001596:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001598:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_ADC4_Init+0xbc>)
 800159a:	2201      	movs	r2, #1
 800159c:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ac:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80015b2:	4b16      	ldr	r3, [pc, #88]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015bc:	2200      	movs	r2, #0
 80015be:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80015c8:	4810      	ldr	r0, [pc, #64]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015ca:	f002 f86f 	bl	80036ac <HAL_ADC_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_ADC4_Init+0x88>
  {
    Error_Handler();
 80015d4:	f000 fecc 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001614 <MX_ADC4_Init+0xc4>)
 80015da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015dc:	2306      	movs	r3, #6
 80015de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80015e4:	237f      	movs	r3, #127	@ 0x7f
 80015e6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80015e8:	2304      	movs	r3, #4
 80015ea:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_ADC4_Init+0xbc>)
 80015f6:	f002 ffd9 	bl	80045ac <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC4_Init+0xb4>
  {
    Error_Handler();
 8001600:	f000 feb6 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3720      	adds	r7, #32
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000038c 	.word	0x2000038c
 8001610:	50000500 	.word	0x50000500
 8001614:	04300002 	.word	0x04300002

08001618 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b088      	sub	sp, #32
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2220      	movs	r2, #32
 8001622:	2100      	movs	r1, #0
 8001624:	4618      	mov	r0, r3
 8001626:	f009 fb5d 	bl	800ace4 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800162a:	4b2a      	ldr	r3, [pc, #168]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800162c:	4a2a      	ldr	r2, [pc, #168]	@ (80016d8 <MX_ADC5_Init+0xc0>)
 800162e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001630:	4b28      	ldr	r3, [pc, #160]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001632:	2200      	movs	r2, #0
 8001634:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001638:	2200      	movs	r2, #0
 800163a:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800163e:	2200      	movs	r2, #0
 8001640:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001650:	2204      	movs	r2, #4
 8001652:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001654:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001656:	2200      	movs	r2, #0
 8001658:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800165a:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800165c:	2200      	movs	r2, #0
 800165e:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001660:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001662:	2201      	movs	r2, #1
 8001664:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001666:	4b1b      	ldr	r3, [pc, #108]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001670:	2200      	movs	r2, #0
 8001672:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001676:	2200      	movs	r2, #0
 8001678:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001682:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001684:	2200      	movs	r2, #0
 8001686:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 800168a:	2200      	movs	r2, #0
 800168c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001690:	4810      	ldr	r0, [pc, #64]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 8001692:	f002 f80b 	bl	80036ac <HAL_ADC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC5_Init+0x88>
  {
    Error_Handler();
 800169c:	f000 fe68 	bl	8002370 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80016a0:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_ADC5_Init+0xc4>)
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a4:	2306      	movs	r3, #6
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80016ac:	237f      	movs	r3, #127	@ 0x7f
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80016b0:	2304      	movs	r3, #4
 80016b2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80016b8:	463b      	mov	r3, r7
 80016ba:	4619      	mov	r1, r3
 80016bc:	4805      	ldr	r0, [pc, #20]	@ (80016d4 <MX_ADC5_Init+0xbc>)
 80016be:	f002 ff75 	bl	80045ac <HAL_ADC_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_ADC5_Init+0xb4>
  {
    Error_Handler();
 80016c8:	f000 fe52 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003f8 	.word	0x200003f8
 80016d8:	50000600 	.word	0x50000600
 80016dc:	19200040 	.word	0x19200040

080016e0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80016e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 80016e6:	4a20      	ldr	r2, [pc, #128]	@ (8001768 <MX_FDCAN1_Init+0x88>)
 80016e8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80016ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80016f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80016f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 80016fe:	2200      	movs	r2, #0
 8001700:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001702:	4b18      	ldr	r3, [pc, #96]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001704:	2200      	movs	r2, #0
 8001706:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001708:	4b16      	ldr	r3, [pc, #88]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 800170a:	2200      	movs	r2, #0
 800170c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 17;
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001710:	2211      	movs	r2, #17
 8001712:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 4;
 8001714:	4b13      	ldr	r3, [pc, #76]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001716:	2204      	movs	r2, #4
 8001718:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 13;
 800171a:	4b12      	ldr	r3, [pc, #72]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 800171c:	220d      	movs	r2, #13
 800171e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 6;
 8001720:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001722:	2206      	movs	r2, #6
 8001724:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001728:	2201      	movs	r2, #1
 800172a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800172c:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 800172e:	2201      	movs	r2, #1
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001734:	2201      	movs	r2, #1
 8001736:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 800173a:	2201      	movs	r2, #1
 800173c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001740:	2200      	movs	r2, #0
 8001742:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001744:	4b07      	ldr	r3, [pc, #28]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001746:	2200      	movs	r2, #0
 8001748:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 800174c:	2200      	movs	r2, #0
 800174e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001750:	4804      	ldr	r0, [pc, #16]	@ (8001764 <MX_FDCAN1_Init+0x84>)
 8001752:	f003 ffd3 	bl	80056fc <HAL_FDCAN_Init>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800175c:	f000 fe08 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001760:	bf00      	nop
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000464 	.word	0x20000464
 8001768:	40006400 	.word	0x40006400

0800176c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001770:	4b1b      	ldr	r3, [pc, #108]	@ (80017e0 <MX_I2C1_Init+0x74>)
 8001772:	4a1c      	ldr	r2, [pc, #112]	@ (80017e4 <MX_I2C1_Init+0x78>)
 8001774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001776:	4b1a      	ldr	r3, [pc, #104]	@ (80017e0 <MX_I2C1_Init+0x74>)
 8001778:	4a1b      	ldr	r2, [pc, #108]	@ (80017e8 <MX_I2C1_Init+0x7c>)
 800177a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 80;
 800177c:	4b18      	ldr	r3, [pc, #96]	@ (80017e0 <MX_I2C1_Init+0x74>)
 800177e:	2250      	movs	r2, #80	@ 0x50
 8001780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <MX_I2C1_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001788:	4b15      	ldr	r3, [pc, #84]	@ (80017e0 <MX_I2C1_Init+0x74>)
 800178a:	2200      	movs	r2, #0
 800178c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <MX_I2C1_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001794:	4b12      	ldr	r3, [pc, #72]	@ (80017e0 <MX_I2C1_Init+0x74>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <MX_I2C1_Init+0x74>)
 800179c:	2200      	movs	r2, #0
 800179e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	@ (80017e0 <MX_I2C1_Init+0x74>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017a6:	480e      	ldr	r0, [pc, #56]	@ (80017e0 <MX_I2C1_Init+0x74>)
 80017a8:	f004 fca4 	bl	80060f4 <HAL_I2C_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80017b2:	f000 fddd 	bl	8002370 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4809      	ldr	r0, [pc, #36]	@ (80017e0 <MX_I2C1_Init+0x74>)
 80017ba:	f006 f931 	bl	8007a20 <HAL_I2CEx_ConfigAnalogFilter>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80017c4:	f000 fdd4 	bl	8002370 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80017c8:	2100      	movs	r1, #0
 80017ca:	4805      	ldr	r0, [pc, #20]	@ (80017e0 <MX_I2C1_Init+0x74>)
 80017cc:	f006 f973 	bl	8007ab6 <HAL_I2CEx_ConfigDigitalFilter>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80017d6:	f000 fdcb 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	200004c8 	.word	0x200004c8
 80017e4:	40005400 	.word	0x40005400
 80017e8:	30a0a7fb 	.word	0x30a0a7fb

080017ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b09c      	sub	sp, #112	@ 0x70
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001800:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	2234      	movs	r2, #52	@ 0x34
 8001824:	2100      	movs	r1, #0
 8001826:	4618      	mov	r0, r3
 8001828:	f009 fa5c 	bl	800ace4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800182c:	4b51      	ldr	r3, [pc, #324]	@ (8001974 <MX_TIM1_Init+0x188>)
 800182e:	4a52      	ldr	r2, [pc, #328]	@ (8001978 <MX_TIM1_Init+0x18c>)
 8001830:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001832:	4b50      	ldr	r3, [pc, #320]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001834:	2200      	movs	r2, #0
 8001836:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001838:	4b4e      	ldr	r3, [pc, #312]	@ (8001974 <MX_TIM1_Init+0x188>)
 800183a:	2200      	movs	r2, #0
 800183c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 800183e:	4b4d      	ldr	r3, [pc, #308]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001840:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001844:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001846:	4b4b      	ldr	r3, [pc, #300]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800184c:	4b49      	ldr	r3, [pc, #292]	@ (8001974 <MX_TIM1_Init+0x188>)
 800184e:	2200      	movs	r2, #0
 8001850:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b48      	ldr	r3, [pc, #288]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001858:	4846      	ldr	r0, [pc, #280]	@ (8001974 <MX_TIM1_Init+0x188>)
 800185a:	f007 f9a5 	bl	8008ba8 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001864:	f000 fd84 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800186e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001872:	4619      	mov	r1, r3
 8001874:	483f      	ldr	r0, [pc, #252]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001876:	f007 fce7 	bl	8009248 <HAL_TIM_ConfigClockSource>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001880:	f000 fd76 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001884:	483b      	ldr	r0, [pc, #236]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001886:	f007 fa57 	bl	8008d38 <HAL_TIM_PWM_Init>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001890:	f000 fd6e 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001894:	2300      	movs	r3, #0
 8001896:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018a4:	4619      	mov	r1, r3
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <MX_TIM1_Init+0x188>)
 80018a8:	f008 fa84 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018b2:	f000 fd5d 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b6:	2360      	movs	r3, #96	@ 0x60
 80018b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018c2:	2300      	movs	r3, #0
 80018c4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80018c6:	2304      	movs	r3, #4
 80018c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ca:	2300      	movs	r3, #0
 80018cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018ce:	2300      	movs	r3, #0
 80018d0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4826      	ldr	r0, [pc, #152]	@ (8001974 <MX_TIM1_Init+0x188>)
 80018dc:	f007 fba0 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018e6:	f000 fd43 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018ee:	2204      	movs	r2, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4820      	ldr	r0, [pc, #128]	@ (8001974 <MX_TIM1_Init+0x188>)
 80018f4:	f007 fb94 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80018fe:	f000 fd37 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001902:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001906:	2208      	movs	r2, #8
 8001908:	4619      	mov	r1, r3
 800190a:	481a      	ldr	r0, [pc, #104]	@ (8001974 <MX_TIM1_Init+0x188>)
 800190c:	f007 fb88 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001916:	f000 fd2b 	bl	8002370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800192e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001938:	2300      	movs	r3, #0
 800193a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800194e:	2300      	movs	r3, #0
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001952:	1d3b      	adds	r3, r7, #4
 8001954:	4619      	mov	r1, r3
 8001956:	4807      	ldr	r0, [pc, #28]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001958:	f008 fac2 	bl	8009ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001962:	f000 fd05 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001966:	4803      	ldr	r0, [pc, #12]	@ (8001974 <MX_TIM1_Init+0x188>)
 8001968:	f001 f8b4 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 800196c:	bf00      	nop
 800196e:	3770      	adds	r7, #112	@ 0x70
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000051c 	.word	0x2000051c
 8001978:	40012c00 	.word	0x40012c00

0800197c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b08e      	sub	sp, #56	@ 0x38
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001982:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
 800198a:	605a      	str	r2, [r3, #4]
 800198c:	609a      	str	r2, [r3, #8]
 800198e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001990:	f107 031c 	add.w	r3, r7, #28
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800199c:	463b      	mov	r3, r7
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019ae:	4b38      	ldr	r3, [pc, #224]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019b0:	4a38      	ldr	r2, [pc, #224]	@ (8001a94 <MX_TIM3_Init+0x118>)
 80019b2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019b4:	4b36      	ldr	r3, [pc, #216]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ba:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80019c0:	4b33      	ldr	r3, [pc, #204]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019c2:	2264      	movs	r2, #100	@ 0x64
 80019c4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c6:	4b32      	ldr	r3, [pc, #200]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019cc:	4b30      	ldr	r3, [pc, #192]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019d2:	482f      	ldr	r0, [pc, #188]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019d4:	f007 f8e8 	bl	8008ba8 <HAL_TIM_Base_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80019de:	f000 fcc7 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ec:	4619      	mov	r1, r3
 80019ee:	4828      	ldr	r0, [pc, #160]	@ (8001a90 <MX_TIM3_Init+0x114>)
 80019f0:	f007 fc2a 	bl	8009248 <HAL_TIM_ConfigClockSource>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019fa:	f000 fcb9 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019fe:	4824      	ldr	r0, [pc, #144]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a00:	f007 f99a 	bl	8008d38 <HAL_TIM_PWM_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001a0a:	f000 fcb1 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a16:	f107 031c 	add.w	r3, r7, #28
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481c      	ldr	r0, [pc, #112]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a1e:	f008 f9c9 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001a28:	f000 fca2 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2c:	2360      	movs	r3, #96	@ 0x60
 8001a2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001a30:	2332      	movs	r3, #50	@ 0x32
 8001a32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a34:	2300      	movs	r3, #0
 8001a36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4619      	mov	r1, r3
 8001a42:	4813      	ldr	r0, [pc, #76]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a44:	f007 faec 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001a4e:	f000 fc8f 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a52:	463b      	mov	r3, r7
 8001a54:	2204      	movs	r2, #4
 8001a56:	4619      	mov	r1, r3
 8001a58:	480d      	ldr	r0, [pc, #52]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a5a:	f007 fae1 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a64:	f000 fc84 	bl	8002370 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a6c:	463b      	mov	r3, r7
 8001a6e:	2208      	movs	r2, #8
 8001a70:	4619      	mov	r1, r3
 8001a72:	4807      	ldr	r0, [pc, #28]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a74:	f007 fad4 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8001a7e:	f000 fc77 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a82:	4803      	ldr	r0, [pc, #12]	@ (8001a90 <MX_TIM3_Init+0x114>)
 8001a84:	f001 f826 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001a88:	bf00      	nop
 8001a8a:	3738      	adds	r7, #56	@ 0x38
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000568 	.word	0x20000568
 8001a94:	40000400 	.word	0x40000400

08001a98 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a9e:	1d3b      	adds	r3, r7, #4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001aa8:	4b14      	ldr	r3, [pc, #80]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001aaa:	4a15      	ldr	r2, [pc, #84]	@ (8001b00 <MX_TIM6_Init+0x68>)
 8001aac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168;
 8001aae:	4b13      	ldr	r3, [pc, #76]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001ab0:	22a8      	movs	r2, #168	@ 0xa8
 8001ab2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 8001aba:	4b10      	ldr	r3, [pc, #64]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001abc:	2264      	movs	r2, #100	@ 0x64
 8001abe:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ac6:	480d      	ldr	r0, [pc, #52]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001ac8:	f007 f86e 	bl	8008ba8 <HAL_TIM_Base_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001ad2:	f000 fc4d 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad6:	2320      	movs	r3, #32
 8001ad8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ade:	1d3b      	adds	r3, r7, #4
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4806      	ldr	r0, [pc, #24]	@ (8001afc <MX_TIM6_Init+0x64>)
 8001ae4:	f008 f966 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001aee:	f000 fc3f 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	200005b4 	.word	0x200005b4
 8001b00:	40001000 	.word	0x40001000

08001b04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b09c      	sub	sp, #112	@ 0x70
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
 8001b34:	615a      	str	r2, [r3, #20]
 8001b36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2234      	movs	r2, #52	@ 0x34
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f009 f8d0 	bl	800ace4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b44:	4b51      	ldr	r3, [pc, #324]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b46:	4a52      	ldr	r2, [pc, #328]	@ (8001c90 <MX_TIM8_Init+0x18c>)
 8001b48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b4a:	4b50      	ldr	r3, [pc, #320]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b50:	4b4e      	ldr	r3, [pc, #312]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001b56:	4b4d      	ldr	r3, [pc, #308]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b58:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b5c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b64:	4b49      	ldr	r3, [pc, #292]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6a:	4b48      	ldr	r3, [pc, #288]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b70:	4846      	ldr	r0, [pc, #280]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b72:	f007 f819 	bl	8008ba8 <HAL_TIM_Base_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001b7c:	f000 fbf8 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b84:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001b86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	483f      	ldr	r0, [pc, #252]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b8e:	f007 fb5b 	bl	8009248 <HAL_TIM_ConfigClockSource>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001b98:	f000 fbea 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001b9c:	483b      	ldr	r0, [pc, #236]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001b9e:	f007 f8cb 	bl	8008d38 <HAL_TIM_PWM_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001ba8:	f000 fbe2 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4833      	ldr	r0, [pc, #204]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001bc0:	f008 f8f8 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8001bca:	f000 fbd1 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	@ 0x60
 8001bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be6:	2300      	movs	r3, #0
 8001be8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bea:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bee:	2200      	movs	r2, #0
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4826      	ldr	r0, [pc, #152]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001bf4:	f007 fa14 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8001bfe:	f000 fbb7 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c06:	2204      	movs	r2, #4
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4820      	ldr	r0, [pc, #128]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001c0c:	f007 fa08 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001c16:	f000 fbab 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c1a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c1e:	2208      	movs	r2, #8
 8001c20:	4619      	mov	r1, r3
 8001c22:	481a      	ldr	r0, [pc, #104]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001c24:	f007 f9fc 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 8001c2e:	f000 fb9f 	bl	8002370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c4a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c62:	2300      	movs	r3, #0
 8001c64:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4807      	ldr	r0, [pc, #28]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001c70:	f008 f936 	bl	8009ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 8001c7a:	f000 fb79 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001c7e:	4803      	ldr	r0, [pc, #12]	@ (8001c8c <MX_TIM8_Init+0x188>)
 8001c80:	f000 ff28 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001c84:	bf00      	nop
 8001c86:	3770      	adds	r7, #112	@ 0x70
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	20000600 	.word	0x20000600
 8001c90:	40013400 	.word	0x40013400

08001c94 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b09c      	sub	sp, #112	@ 0x70
 8001c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c9a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ca8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cb4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
 8001cc4:	615a      	str	r2, [r3, #20]
 8001cc6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cc8:	1d3b      	adds	r3, r7, #4
 8001cca:	2234      	movs	r2, #52	@ 0x34
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f009 f808 	bl	800ace4 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 8001cd4:	4b51      	ldr	r3, [pc, #324]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001cd6:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <MX_TIM20_Init+0x18c>)
 8001cd8:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 8001cda:	4b50      	ldr	r3, [pc, #320]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ce0:	4b4e      	ldr	r3, [pc, #312]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 8001ce6:	4b4d      	ldr	r3, [pc, #308]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001ce8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cec:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cee:	4b4b      	ldr	r3, [pc, #300]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 8001cf4:	4b49      	ldr	r3, [pc, #292]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfa:	4b48      	ldr	r3, [pc, #288]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 8001d00:	4846      	ldr	r0, [pc, #280]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d02:	f006 ff51 	bl	8008ba8 <HAL_TIM_Base_Init>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 8001d0c:	f000 fb30 	bl	8002370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d14:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001d16:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	483f      	ldr	r0, [pc, #252]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d1e:	f007 fa93 	bl	8009248 <HAL_TIM_ConfigClockSource>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001d28:	f000 fb22 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001d2c:	483b      	ldr	r0, [pc, #236]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d2e:	f007 f803 	bl	8008d38 <HAL_TIM_PWM_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001d38:	f000 fb1a 	bl	8002370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d40:	2300      	movs	r3, #0
 8001d42:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001d48:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	4833      	ldr	r0, [pc, #204]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d50:	f008 f830 	bl	8009db4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001d5a:	f000 fb09 	bl	8002370 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d5e:	2360      	movs	r3, #96	@ 0x60
 8001d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d66:	2300      	movs	r3, #0
 8001d68:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d7e:	2200      	movs	r2, #0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4826      	ldr	r0, [pc, #152]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d84:	f007 f94c 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001d8e:	f000 faef 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d92:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d96:	2204      	movs	r2, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4820      	ldr	r0, [pc, #128]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001d9c:	f007 f940 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001da6:	f000 fae3 	bl	8002370 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001daa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dae:	2208      	movs	r2, #8
 8001db0:	4619      	mov	r1, r3
 8001db2:	481a      	ldr	r0, [pc, #104]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001db4:	f007 f934 	bl	8009020 <HAL_TIM_PWM_ConfigChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM20_Init+0x12e>
  {
    Error_Handler();
 8001dbe:	f000 fad7 	bl	8002370 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001dd6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001dda:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001de0:	2300      	movs	r3, #0
 8001de2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001de8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001dec:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001df2:	2300      	movs	r3, #0
 8001df4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4807      	ldr	r0, [pc, #28]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001e00:	f008 f86e 	bl	8009ee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM20_Init+0x17a>
  {
    Error_Handler();
 8001e0a:	f000 fab1 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001e0e:	4803      	ldr	r0, [pc, #12]	@ (8001e1c <MX_TIM20_Init+0x188>)
 8001e10:	f000 fe60 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001e14:	bf00      	nop
 8001e16:	3770      	adds	r7, #112	@ 0x70
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	2000064c 	.word	0x2000064c
 8001e20:	40015000 	.word	0x40015000

08001e24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <MX_UART4_Init+0x94>)
 8001e2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e36:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e4a:	220c      	movs	r2, #12
 8001e4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e54:	4b17      	ldr	r3, [pc, #92]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e5a:	4b16      	ldr	r3, [pc, #88]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e66:	4b13      	ldr	r3, [pc, #76]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e6c:	4811      	ldr	r0, [pc, #68]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e6e:	f008 f8cb 	bl	800a008 <HAL_UART_Init>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001e78:	f000 fa7a 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e80:	f008 fe66 	bl	800ab50 <HAL_UARTEx_SetTxFifoThreshold>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001e8a:	f000 fa71 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e8e:	2100      	movs	r1, #0
 8001e90:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001e92:	f008 fe9b 	bl	800abcc <HAL_UARTEx_SetRxFifoThreshold>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001e9c:	f000 fa68 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <MX_UART4_Init+0x90>)
 8001ea2:	f008 fe1c 	bl	800aade <HAL_UARTEx_DisableFifoMode>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001eac:	f000 fa60 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	20000698 	.word	0x20000698
 8001eb8:	40004c00 	.word	0x40004c00

08001ebc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ec0:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ec2:	4a23      	ldr	r2, [pc, #140]	@ (8001f50 <MX_USART1_UART_Init+0x94>)
 8001ec4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ec8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ecc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ece:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001eda:	4b1c      	ldr	r3, [pc, #112]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ee2:	220c      	movs	r2, #12
 8001ee4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee6:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eec:	4b17      	ldr	r3, [pc, #92]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ef8:	4b14      	ldr	r3, [pc, #80]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001efe:	4b13      	ldr	r3, [pc, #76]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f04:	4811      	ldr	r0, [pc, #68]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001f06:	f008 f87f 	bl	800a008 <HAL_UART_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f10:	f000 fa2e 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f14:	2100      	movs	r1, #0
 8001f16:	480d      	ldr	r0, [pc, #52]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001f18:	f008 fe1a 	bl	800ab50 <HAL_UARTEx_SetTxFifoThreshold>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f22:	f000 fa25 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f26:	2100      	movs	r1, #0
 8001f28:	4808      	ldr	r0, [pc, #32]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001f2a:	f008 fe4f 	bl	800abcc <HAL_UARTEx_SetRxFifoThreshold>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d001      	beq.n	8001f38 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f34:	f000 fa1c 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_USART1_UART_Init+0x90>)
 8001f3a:	f008 fdd0 	bl	800aade <HAL_UARTEx_DisableFifoMode>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f44:	f000 fa14 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	2000072c 	.word	0x2000072c
 8001f50:	40013800 	.word	0x40013800

08001f54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f58:	4b22      	ldr	r3, [pc, #136]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f5a:	4a23      	ldr	r2, [pc, #140]	@ (8001fe8 <MX_USART2_UART_Init+0x94>)
 8001f5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f5e:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f72:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f78:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f7a:	220c      	movs	r2, #12
 8001f7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f8a:	4b16      	ldr	r3, [pc, #88]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f96:	4b13      	ldr	r3, [pc, #76]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f9c:	4811      	ldr	r0, [pc, #68]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001f9e:	f008 f833 	bl	800a008 <HAL_UART_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001fa8:	f000 f9e2 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fac:	2100      	movs	r1, #0
 8001fae:	480d      	ldr	r0, [pc, #52]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001fb0:	f008 fdce 	bl	800ab50 <HAL_UARTEx_SetTxFifoThreshold>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001fba:	f000 f9d9 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fbe:	2100      	movs	r1, #0
 8001fc0:	4808      	ldr	r0, [pc, #32]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001fc2:	f008 fe03 	bl	800abcc <HAL_UARTEx_SetRxFifoThreshold>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001fcc:	f000 f9d0 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fd0:	4804      	ldr	r0, [pc, #16]	@ (8001fe4 <MX_USART2_UART_Init+0x90>)
 8001fd2:	f008 fd84 	bl	800aade <HAL_UARTEx_DisableFifoMode>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001fdc:	f000 f9c8 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fe0:	bf00      	nop
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	200007c0 	.word	0x200007c0
 8001fe8:	40004400 	.word	0x40004400

08001fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ff0:	4b22      	ldr	r3, [pc, #136]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8001ff2:	4a23      	ldr	r2, [pc, #140]	@ (8002080 <MX_USART3_UART_Init+0x94>)
 8001ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ff6:	4b21      	ldr	r3, [pc, #132]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8001ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ffc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002004:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002006:	2200      	movs	r2, #0
 8002008:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800200a:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <MX_USART3_UART_Init+0x90>)
 800200c:	2200      	movs	r2, #0
 800200e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002010:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002012:	220c      	movs	r2, #12
 8002014:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002016:	4b19      	ldr	r3, [pc, #100]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800201c:	4b17      	ldr	r3, [pc, #92]	@ (800207c <MX_USART3_UART_Init+0x90>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002028:	4b14      	ldr	r3, [pc, #80]	@ (800207c <MX_USART3_UART_Init+0x90>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800202e:	4b13      	ldr	r3, [pc, #76]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002030:	2200      	movs	r2, #0
 8002032:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002034:	4811      	ldr	r0, [pc, #68]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002036:	f007 ffe7 	bl	800a008 <HAL_UART_Init>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002040:	f000 f996 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	480d      	ldr	r0, [pc, #52]	@ (800207c <MX_USART3_UART_Init+0x90>)
 8002048:	f008 fd82 	bl	800ab50 <HAL_UARTEx_SetTxFifoThreshold>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002052:	f000 f98d 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002056:	2100      	movs	r1, #0
 8002058:	4808      	ldr	r0, [pc, #32]	@ (800207c <MX_USART3_UART_Init+0x90>)
 800205a:	f008 fdb7 	bl	800abcc <HAL_UARTEx_SetRxFifoThreshold>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002064:	f000 f984 	bl	8002370 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002068:	4804      	ldr	r0, [pc, #16]	@ (800207c <MX_USART3_UART_Init+0x90>)
 800206a:	f008 fd38 	bl	800aade <HAL_UARTEx_DisableFifoMode>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002074:	f000 f97c 	bl	8002370 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000854 	.word	0x20000854
 8002080:	40004800 	.word	0x40004800

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	4b2c      	ldr	r3, [pc, #176]	@ (800214c <MX_GPIO_Init+0xc8>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	4a2b      	ldr	r2, [pc, #172]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020a0:	f043 0310 	orr.w	r3, r3, #16
 80020a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020a6:	4b29      	ldr	r3, [pc, #164]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b2:	4b26      	ldr	r3, [pc, #152]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	4a25      	ldr	r2, [pc, #148]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020be:	4b23      	ldr	r3, [pc, #140]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ca:	4b20      	ldr	r3, [pc, #128]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ce:	4a1f      	ldr	r2, [pc, #124]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020d6:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b1a      	ldr	r3, [pc, #104]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e6:	4a19      	ldr	r2, [pc, #100]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ee:	4b17      	ldr	r3, [pc, #92]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
 80020f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fa:	4b14      	ldr	r3, [pc, #80]	@ (800214c <MX_GPIO_Init+0xc8>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fe:	4a13      	ldr	r2, [pc, #76]	@ (800214c <MX_GPIO_Init+0xc8>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002106:	4b11      	ldr	r3, [pc, #68]	@ (800214c <MX_GPIO_Init+0xc8>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002112:	4b0e      	ldr	r3, [pc, #56]	@ (800214c <MX_GPIO_Init+0xc8>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a0d      	ldr	r2, [pc, #52]	@ (800214c <MX_GPIO_Init+0xc8>)
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b0b      	ldr	r3, [pc, #44]	@ (800214c <MX_GPIO_Init+0xc8>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	607b      	str	r3, [r7, #4]
 8002128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOOT0_SENSE_Pin */
  GPIO_InitStruct.Pin = BOOT0_SENSE_Pin;
 800212a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800212e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002130:	2300      	movs	r3, #0
 8002132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT0_SENSE_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4619      	mov	r1, r3
 800213e:	4804      	ldr	r0, [pc, #16]	@ (8002150 <MX_GPIO_Init+0xcc>)
 8002140:	f003 fe3e 	bl	8005dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002144:	bf00      	nop
 8002146:	3730      	adds	r7, #48	@ 0x30
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	48000400 	.word	0x48000400
 8002154:	00000000 	.word	0x00000000

08002158 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a61      	ldr	r2, [pc, #388]	@ (80022e8 <HAL_ADC_ConvCpltCallback+0x190>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 80b8 	bne.w	80022da <HAL_ADC_ConvCpltCallback+0x182>
		EA_SENSE_1 = HAL_ADC_GetValue(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f001 ff9c 	bl	80040a8 <HAL_ADC_GetValue>
 8002170:	4603      	mov	r3, r0
 8002172:	4a5e      	ldr	r2, [pc, #376]	@ (80022ec <HAL_ADC_ConvCpltCallback+0x194>)
 8002174:	6013      	str	r3, [r2, #0]
		coil_current_1 = (float) EA_SENSE_1 / 65535.0f * 3.0f / 0.12f;
 8002176:	4b5d      	ldr	r3, [pc, #372]	@ (80022ec <HAL_ADC_ConvCpltCallback+0x194>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	ee07 3a90 	vmov	s15, r3
 800217e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002182:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80022f0 <HAL_ADC_ConvCpltCallback+0x198>
 8002186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800218a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800218e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002192:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80022f4 <HAL_ADC_ConvCpltCallback+0x19c>
 8002196:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800219a:	4b57      	ldr	r3, [pc, #348]	@ (80022f8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 800219c:	edc3 7a00 	vstr	s15, [r3]
		if (current_setpoint > 3 || coil_current_1 > 3.2) {
 80021a0:	4b56      	ldr	r3, [pc, #344]	@ (80022fc <HAL_ADC_ConvCpltCallback+0x1a4>)
 80021a2:	edd3 7a00 	vldr	s15, [r3]
 80021a6:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80021aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b2:	dc0c      	bgt.n	80021ce <HAL_ADC_ConvCpltCallback+0x76>
 80021b4:	4b50      	ldr	r3, [pc, #320]	@ (80022f8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7fe fabb 	bl	8000734 <__aeabi_f2d>
 80021be:	a348      	add	r3, pc, #288	@ (adr r3, 80022e0 <HAL_ADC_ConvCpltCallback+0x188>)
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	f7fe fb8c 	bl	80008e0 <__aeabi_dcmpgt>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d007      	beq.n	80021de <HAL_ADC_ConvCpltCallback+0x86>
			TIM1->CCR1 = 0;
 80021ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002300 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	635a      	str	r2, [r3, #52]	@ 0x34
			current_setpoint = 0;
 80021d4:	4b49      	ldr	r3, [pc, #292]	@ (80022fc <HAL_ADC_ConvCpltCallback+0x1a4>)
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
			return;
 80021dc:	e07d      	b.n	80022da <HAL_ADC_ConvCpltCallback+0x182>
		}
		pid_error = current_setpoint - coil_current_1;
 80021de:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_ADC_ConvCpltCallback+0x1a4>)
 80021e0:	ed93 7a00 	vldr	s14, [r3]
 80021e4:	4b44      	ldr	r3, [pc, #272]	@ (80022f8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80021e6:	edd3 7a00 	vldr	s15, [r3]
 80021ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021ee:	4b45      	ldr	r3, [pc, #276]	@ (8002304 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80021f0:	edc3 7a00 	vstr	s15, [r3]
		pid_error_integral += pid_error;
 80021f4:	4b44      	ldr	r3, [pc, #272]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80021f6:	ed93 7a00 	vldr	s14, [r3]
 80021fa:	4b42      	ldr	r3, [pc, #264]	@ (8002304 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80021fc:	edd3 7a00 	vldr	s15, [r3]
 8002200:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002204:	4b40      	ldr	r3, [pc, #256]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002206:	edc3 7a00 	vstr	s15, [r3]
		// clamp integral to +- 10
		if (pid_error_integral > PID_I_CLAMP) {
 800220a:	4b3f      	ldr	r3, [pc, #252]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800220c:	edd3 7a00 	vldr	s15, [r3]
 8002210:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 800230c <HAL_ADC_ConvCpltCallback+0x1b4>
 8002214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221c:	dd03      	ble.n	8002226 <HAL_ADC_ConvCpltCallback+0xce>
			pid_error_integral = PID_I_CLAMP;
 800221e:	4b3a      	ldr	r3, [pc, #232]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002220:	4a3b      	ldr	r2, [pc, #236]	@ (8002310 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	e00c      	b.n	8002240 <HAL_ADC_ConvCpltCallback+0xe8>
		} else if (pid_error_integral < -PID_I_CLAMP) {
 8002226:	4b38      	ldr	r3, [pc, #224]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002228:	edd3 7a00 	vldr	s15, [r3]
 800222c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002314 <HAL_ADC_ConvCpltCallback+0x1bc>
 8002230:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	d502      	bpl.n	8002240 <HAL_ADC_ConvCpltCallback+0xe8>
			pid_error_integral = -PID_I_CLAMP;
 800223a:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 800223c:	4a36      	ldr	r2, [pc, #216]	@ (8002318 <HAL_ADC_ConvCpltCallback+0x1c0>)
 800223e:	601a      	str	r2, [r3, #0]
		}
		pid_pwm_change = Kp * pid_error + Ki * pid_error_integral;
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8002242:	ed93 7a00 	vldr	s14, [r3]
 8002246:	4b2f      	ldr	r3, [pc, #188]	@ (8002304 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8002248:	edd3 7a00 	vldr	s15, [r3]
 800224c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002250:	4b33      	ldr	r3, [pc, #204]	@ (8002320 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8002252:	edd3 6a00 	vldr	s13, [r3]
 8002256:	4b2c      	ldr	r3, [pc, #176]	@ (8002308 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002264:	4b2f      	ldr	r3, [pc, #188]	@ (8002324 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8002266:	edc3 7a00 	vstr	s15, [r3]
		pid_pwm_output += pid_pwm_change;
 800226a:	4b2f      	ldr	r3, [pc, #188]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800226c:	ed93 7a00 	vldr	s14, [r3]
 8002270:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800227c:	edc3 7a00 	vstr	s15, [r3]
		if (pid_pwm_output >= 0.98f) {
 8002280:	4b29      	ldr	r3, [pc, #164]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800232c <HAL_ADC_ConvCpltCallback+0x1d4>
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	db03      	blt.n	800229c <HAL_ADC_ConvCpltCallback+0x144>
			pid_pwm_output = 0.98f;
 8002294:	4b24      	ldr	r3, [pc, #144]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8002296:	4a26      	ldr	r2, [pc, #152]	@ (8002330 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	e00b      	b.n	80022b4 <HAL_ADC_ConvCpltCallback+0x15c>
		} else if (pid_pwm_output < 0.0f) {
 800229c:	4b22      	ldr	r3, [pc, #136]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022aa:	d503      	bpl.n	80022b4 <HAL_ADC_ConvCpltCallback+0x15c>
			pid_pwm_output = 0.0f;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
		}
		coil_pwm_ccr_1 = pid_pwm_output * 1600.0f;
 80022b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002328 <HAL_ADC_ConvCpltCallback+0x1d0>)
 80022b6:	edd3 7a00 	vldr	s15, [r3]
 80022ba:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002334 <HAL_ADC_ConvCpltCallback+0x1dc>
 80022be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022c6:	ee17 3a90 	vmov	r3, s15
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002338 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80022ce:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coil_pwm_ccr_1);
 80022d0:	4b19      	ldr	r3, [pc, #100]	@ (8002338 <HAL_ADC_ConvCpltCallback+0x1e0>)
 80022d2:	881a      	ldrh	r2, [r3, #0]
 80022d4:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_ADC_ConvCpltCallback+0x1e4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	9999999a 	.word	0x9999999a
 80022e4:	40099999 	.word	0x40099999
 80022e8:	20000320 	.word	0x20000320
 80022ec:	200008f8 	.word	0x200008f8
 80022f0:	477fff00 	.word	0x477fff00
 80022f4:	3df5c28f 	.word	0x3df5c28f
 80022f8:	20000908 	.word	0x20000908
 80022fc:	20000004 	.word	0x20000004
 8002300:	40012c00 	.word	0x40012c00
 8002304:	20000910 	.word	0x20000910
 8002308:	20000914 	.word	0x20000914
 800230c:	3dcccccd 	.word	0x3dcccccd
 8002310:	3dcccccd 	.word	0x3dcccccd
 8002314:	bdcccccd 	.word	0xbdcccccd
 8002318:	bdcccccd 	.word	0xbdcccccd
 800231c:	20000008 	.word	0x20000008
 8002320:	2000000c 	.word	0x2000000c
 8002324:	20000918 	.word	0x20000918
 8002328:	2000091c 	.word	0x2000091c
 800232c:	3f7ae148 	.word	0x3f7ae148
 8002330:	3f7ae148 	.word	0x3f7ae148
 8002334:	44c80000 	.word	0x44c80000
 8002338:	2000090c 	.word	0x2000090c
 800233c:	2000051c 	.word	0x2000051c

08002340 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
//		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rx_header, rx_data)
//				!= HAL_OK) {
//			Error_Handler();
//		}
		// toggle can blink
		can_blink = !can_blink;
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <HAL_FDCAN_RxFifo0Callback+0x2c>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2b00      	cmp	r3, #0
 8002350:	bf0c      	ite	eq
 8002352:	2301      	moveq	r3, #1
 8002354:	2300      	movne	r3, #0
 8002356:	b2db      	uxtb	r3, r3
 8002358:	461a      	mov	r2, r3
 800235a:	4b04      	ldr	r3, [pc, #16]	@ (800236c <HAL_FDCAN_RxFifo0Callback+0x2c>)
 800235c:	701a      	strb	r2, [r3, #0]
//	}
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	20000010 	.word	0x20000010

08002370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002374:	b672      	cpsid	i
}
 8002376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <Error_Handler+0x8>

0800237c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b082      	sub	sp, #8
 8002380:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002382:	4b0f      	ldr	r3, [pc, #60]	@ (80023c0 <HAL_MspInit+0x44>)
 8002384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002386:	4a0e      	ldr	r2, [pc, #56]	@ (80023c0 <HAL_MspInit+0x44>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6613      	str	r3, [r2, #96]	@ 0x60
 800238e:	4b0c      	ldr	r3, [pc, #48]	@ (80023c0 <HAL_MspInit+0x44>)
 8002390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800239a:	4b09      	ldr	r3, [pc, #36]	@ (80023c0 <HAL_MspInit+0x44>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a08      	ldr	r2, [pc, #32]	@ (80023c0 <HAL_MspInit+0x44>)
 80023a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a6:	4b06      	ldr	r3, [pc, #24]	@ (80023c0 <HAL_MspInit+0x44>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80023b2:	f005 fc71 	bl	8007c98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40021000 	.word	0x40021000

080023c4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b0ac      	sub	sp, #176	@ 0xb0
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023cc:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]
 80023da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023e0:	2254      	movs	r2, #84	@ 0x54
 80023e2:	2100      	movs	r1, #0
 80023e4:	4618      	mov	r0, r3
 80023e6:	f008 fc7d 	bl	800ace4 <memset>
  if(hadc->Instance==ADC1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023f2:	d15e      	bne.n	80024b2 <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80023f4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023f8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80023fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80023fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002402:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002406:	4618      	mov	r0, r3
 8002408:	f006 f980 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8002412:	f7ff ffad 	bl	8002370 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002416:	4b8e      	ldr	r3, [pc, #568]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	3301      	adds	r3, #1
 800241c:	4a8c      	ldr	r2, [pc, #560]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 800241e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002420:	4b8b      	ldr	r3, [pc, #556]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d10b      	bne.n	8002440 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002428:	4b8a      	ldr	r3, [pc, #552]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800242a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800242c:	4a89      	ldr	r2, [pc, #548]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800242e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002432:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002434:	4b87      	ldr	r3, [pc, #540]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002438:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800243c:	647b      	str	r3, [r7, #68]	@ 0x44
 800243e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	4b84      	ldr	r3, [pc, #528]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002444:	4a83      	ldr	r2, [pc, #524]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800244c:	4b81      	ldr	r3, [pc, #516]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800244e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002450:	f003 0301 	and.w	r3, r3, #1
 8002454:	643b      	str	r3, [r7, #64]	@ 0x40
 8002456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b7e      	ldr	r3, [pc, #504]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245c:	4a7d      	ldr	r2, [pc, #500]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002464:	4b7b      	ldr	r3, [pc, #492]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800246e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = VS_HV_Pin|VS_12_Pin;
 8002470:	230c      	movs	r3, #12
 8002472:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002476:	2303      	movs	r3, #3
 8002478:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002482:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800248c:	f003 fc98 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_5_Pin;
 8002490:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002494:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002498:	2303      	movs	r3, #3
 800249a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(VS_5_GPIO_Port, &GPIO_InitStruct);
 80024a4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024a8:	4619      	mov	r1, r3
 80024aa:	486b      	ldr	r0, [pc, #428]	@ (8002658 <HAL_ADC_MspInit+0x294>)
 80024ac:	f003 fc88 	bl	8005dc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC5_MspInit 1 */

    /* USER CODE END ADC5_MspInit 1 */
  }

}
 80024b0:	e1a5      	b.n	80027fe <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a69      	ldr	r2, [pc, #420]	@ (800265c <HAL_ADC_MspInit+0x298>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d15d      	bne.n	8002578 <HAL_ADC_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80024bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c0:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80024c2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80024c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ca:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80024ce:	4618      	mov	r0, r3
 80024d0:	f006 f91c 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 80024da:	f7ff ff49 	bl	8002370 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024de:	4b5c      	ldr	r3, [pc, #368]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	3301      	adds	r3, #1
 80024e4:	4a5a      	ldr	r2, [pc, #360]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 80024e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80024e8:	4b59      	ldr	r3, [pc, #356]	@ (8002650 <HAL_ADC_MspInit+0x28c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d10b      	bne.n	8002508 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80024f0:	4b58      	ldr	r3, [pc, #352]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f4:	4a57      	ldr	r2, [pc, #348]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80024f6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80024fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024fc:	4b55      	ldr	r3, [pc, #340]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002500:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002504:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002508:	4b52      	ldr	r3, [pc, #328]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800250a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800250c:	4a51      	ldr	r2, [pc, #324]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002514:	4b4f      	ldr	r3, [pc, #316]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002516:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	637b      	str	r3, [r7, #52]	@ 0x34
 800251e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002520:	4b4c      	ldr	r3, [pc, #304]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002522:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002524:	4a4b      	ldr	r2, [pc, #300]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800252c:	4b49      	ldr	r3, [pc, #292]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 800252e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	633b      	str	r3, [r7, #48]	@ 0x30
 8002536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = TEMP8_Pin|TEMP6_Pin|TEMP7_Pin|TEMP9_Pin
 8002538:	231f      	movs	r3, #31
 800253a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800253e:	2303      	movs	r3, #3
 8002540:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800254a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800254e:	4619      	mov	r1, r3
 8002550:	4843      	ldr	r0, [pc, #268]	@ (8002660 <HAL_ADC_MspInit+0x29c>)
 8002552:	f003 fc35 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP2_Pin|TEMP1_Pin|TEMP3_Pin|TEMP4_Pin;
 8002556:	23c3      	movs	r3, #195	@ 0xc3
 8002558:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800255c:	2303      	movs	r3, #3
 800255e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002568:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002572:	f003 fc25 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002576:	e142      	b.n	80027fe <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC3)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a39      	ldr	r2, [pc, #228]	@ (8002664 <HAL_ADC_MspInit+0x2a0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d176      	bne.n	8002670 <HAL_ADC_MspInit+0x2ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002586:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002588:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800258c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002590:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002594:	4618      	mov	r0, r3
 8002596:	f006 f8b9 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d001      	beq.n	80025a4 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 80025a0:	f7ff fee6 	bl	8002370 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80025a4:	4b30      	ldr	r3, [pc, #192]	@ (8002668 <HAL_ADC_MspInit+0x2a4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a2f      	ldr	r2, [pc, #188]	@ (8002668 <HAL_ADC_MspInit+0x2a4>)
 80025ac:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80025ae:	4b2e      	ldr	r3, [pc, #184]	@ (8002668 <HAL_ADC_MspInit+0x2a4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d10b      	bne.n	80025ce <HAL_ADC_MspInit+0x20a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80025b6:	4b27      	ldr	r3, [pc, #156]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ba:	4a26      	ldr	r2, [pc, #152]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c2:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025ce:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025d2:	4a20      	ldr	r2, [pc, #128]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025d4:	f043 0310 	orr.w	r3, r3, #16
 80025d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025da:	4b1e      	ldr	r3, [pc, #120]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025de:	f003 0310 	and.w	r3, r3, #16
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80025e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025ec:	f043 0302 	orr.w	r3, r3, #2
 80025f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f2:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <HAL_ADC_MspInit+0x290>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = EA2_Pin|EA3_Pin;
 80025fe:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 8002602:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002606:	2303      	movs	r3, #3
 8002608:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002612:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002616:	4619      	mov	r1, r3
 8002618:	4814      	ldr	r0, [pc, #80]	@ (800266c <HAL_ADC_MspInit+0x2a8>)
 800261a:	f003 fbd1 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA1_Pin;
 800261e:	2302      	movs	r3, #2
 8002620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA1_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002634:	4619      	mov	r1, r3
 8002636:	4808      	ldr	r0, [pc, #32]	@ (8002658 <HAL_ADC_MspInit+0x294>)
 8002638:	f003 fbc2 	bl	8005dc0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800263c:	2200      	movs	r2, #0
 800263e:	2100      	movs	r1, #0
 8002640:	202f      	movs	r0, #47	@ 0x2f
 8002642:	f002 ffb2 	bl	80055aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002646:	202f      	movs	r0, #47	@ 0x2f
 8002648:	f002 ffc9 	bl	80055de <HAL_NVIC_EnableIRQ>
}
 800264c:	e0d7      	b.n	80027fe <HAL_ADC_MspInit+0x43a>
 800264e:	bf00      	nop
 8002650:	20000920 	.word	0x20000920
 8002654:	40021000 	.word	0x40021000
 8002658:	48000400 	.word	0x48000400
 800265c:	50000100 	.word	0x50000100
 8002660:	48000800 	.word	0x48000800
 8002664:	50000400 	.word	0x50000400
 8002668:	20000924 	.word	0x20000924
 800266c:	48001000 	.word	0x48001000
  else if(hadc->Instance==ADC4)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a64      	ldr	r2, [pc, #400]	@ (8002808 <HAL_ADC_MspInit+0x444>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d15e      	bne.n	8002738 <HAL_ADC_MspInit+0x374>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800267a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800267e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002680:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002684:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002688:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800268c:	4618      	mov	r0, r3
 800268e:	f006 f83d 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <HAL_ADC_MspInit+0x2d8>
      Error_Handler();
 8002698:	f7ff fe6a 	bl	8002370 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800269c:	4b5b      	ldr	r3, [pc, #364]	@ (800280c <HAL_ADC_MspInit+0x448>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	4a5a      	ldr	r2, [pc, #360]	@ (800280c <HAL_ADC_MspInit+0x448>)
 80026a4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80026a6:	4b59      	ldr	r3, [pc, #356]	@ (800280c <HAL_ADC_MspInit+0x448>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10b      	bne.n	80026c6 <HAL_ADC_MspInit+0x302>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80026ae:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026b2:	4a57      	ldr	r2, [pc, #348]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ba:	4b55      	ldr	r3, [pc, #340]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026c2:	623b      	str	r3, [r7, #32]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c6:	4b52      	ldr	r3, [pc, #328]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ca:	4a51      	ldr	r2, [pc, #324]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026cc:	f043 0310 	orr.w	r3, r3, #16
 80026d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026d2:	4b4f      	ldr	r3, [pc, #316]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026de:	4b4c      	ldr	r3, [pc, #304]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026e4:	f043 0302 	orr.w	r3, r3, #2
 80026e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026ea:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80026ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = EA5_Pin|EA4_Pin;
 80026f6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80026fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80026fe:	2303      	movs	r3, #3
 8002700:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002704:	2300      	movs	r3, #0
 8002706:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800270a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800270e:	4619      	mov	r1, r3
 8002710:	4840      	ldr	r0, [pc, #256]	@ (8002814 <HAL_ADC_MspInit+0x450>)
 8002712:	f003 fb55 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA6_Pin;
 8002716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800271e:	2303      	movs	r3, #3
 8002720:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002724:	2300      	movs	r3, #0
 8002726:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA6_GPIO_Port, &GPIO_InitStruct);
 800272a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800272e:	4619      	mov	r1, r3
 8002730:	4839      	ldr	r0, [pc, #228]	@ (8002818 <HAL_ADC_MspInit+0x454>)
 8002732:	f003 fb45 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002736:	e062      	b.n	80027fe <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC5)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a37      	ldr	r2, [pc, #220]	@ (800281c <HAL_ADC_MspInit+0x458>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d15d      	bne.n	80027fe <HAL_ADC_MspInit+0x43a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002742:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002748:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800274c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002750:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002754:	4618      	mov	r0, r3
 8002756:	f005 ffd9 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_ADC_MspInit+0x3a0>
      Error_Handler();
 8002760:	f7ff fe06 	bl	8002370 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002764:	4b29      	ldr	r3, [pc, #164]	@ (800280c <HAL_ADC_MspInit+0x448>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3301      	adds	r3, #1
 800276a:	4a28      	ldr	r2, [pc, #160]	@ (800280c <HAL_ADC_MspInit+0x448>)
 800276c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800276e:	4b27      	ldr	r3, [pc, #156]	@ (800280c <HAL_ADC_MspInit+0x448>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10b      	bne.n	800278e <HAL_ADC_MspInit+0x3ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002776:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 8002778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800277a:	4a25      	ldr	r2, [pc, #148]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002780:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002782:	4b23      	ldr	r3, [pc, #140]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 8002784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800278e:	4b20      	ldr	r3, [pc, #128]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 8002790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002792:	4a1f      	ldr	r2, [pc, #124]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800279a:	4b1d      	ldr	r3, [pc, #116]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279e:	f003 0308 	and.w	r3, r3, #8
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027aa:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80027ac:	f043 0310 	orr.w	r3, r3, #16
 80027b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027b2:	4b17      	ldr	r3, [pc, #92]	@ (8002810 <HAL_ADC_MspInit+0x44c>)
 80027b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b6:	f003 0310 	and.w	r3, r3, #16
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EA8_Pin|EA9_Pin;
 80027be:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80027c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027c6:	2303      	movs	r3, #3
 80027c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027d6:	4619      	mov	r1, r3
 80027d8:	4811      	ldr	r0, [pc, #68]	@ (8002820 <HAL_ADC_MspInit+0x45c>)
 80027da:	f003 faf1 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA7_Pin;
 80027de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e6:	2303      	movs	r3, #3
 80027e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA7_GPIO_Port, &GPIO_InitStruct);
 80027f2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027f6:	4619      	mov	r1, r3
 80027f8:	4806      	ldr	r0, [pc, #24]	@ (8002814 <HAL_ADC_MspInit+0x450>)
 80027fa:	f003 fae1 	bl	8005dc0 <HAL_GPIO_Init>
}
 80027fe:	bf00      	nop
 8002800:	37b0      	adds	r7, #176	@ 0xb0
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	50000500 	.word	0x50000500
 800280c:	20000924 	.word	0x20000924
 8002810:	40021000 	.word	0x40021000
 8002814:	48001000 	.word	0x48001000
 8002818:	48000400 	.word	0x48000400
 800281c:	50000600 	.word	0x50000600
 8002820:	48000c00 	.word	0x48000c00

08002824 <HAL_FDCAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hfdcan: FDCAN handle pointer
  * @retval None
  */
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b09e      	sub	sp, #120	@ 0x78
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
 800283a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800283c:	f107 0310 	add.w	r3, r7, #16
 8002840:	2254      	movs	r2, #84	@ 0x54
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f008 fa4d 	bl	800ace4 <memset>
  if(hfdcan->Instance==FDCAN1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a27      	ldr	r2, [pc, #156]	@ (80028ec <HAL_FDCAN_MspInit+0xc8>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d147      	bne.n	80028e4 <HAL_FDCAN_MspInit+0xc0>

    /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002858:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800285a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800285e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002860:	f107 0310 	add.w	r3, r7, #16
 8002864:	4618      	mov	r0, r3
 8002866:	f005 ff51 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002870:	f7ff fd7e 	bl	8002370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002874:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 8002876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 800287a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800287e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 8002882:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800288c:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 800288e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002890:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002898:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_FDCAN_MspInit+0xcc>)
 800289a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD1     ------> FDCAN1_TX
    PD0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = CAN_TX_Pin|CAN_RX_Pin;
 80028a4:	2303      	movs	r3, #3
 80028a6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a8:	2302      	movs	r3, #2
 80028aa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b0:	2300      	movs	r3, #0
 80028b2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028b4:	2309      	movs	r3, #9
 80028b6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80028bc:	4619      	mov	r1, r3
 80028be:	480d      	ldr	r0, [pc, #52]	@ (80028f4 <HAL_FDCAN_MspInit+0xd0>)
 80028c0:	f003 fa7e 	bl	8005dc0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2100      	movs	r1, #0
 80028c8:	2015      	movs	r0, #21
 80028ca:	f002 fe6e 	bl	80055aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80028ce:	2015      	movs	r0, #21
 80028d0:	f002 fe85 	bl	80055de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	2016      	movs	r0, #22
 80028da:	f002 fe66 	bl	80055aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80028de:	2016      	movs	r0, #22
 80028e0:	f002 fe7d 	bl	80055de <HAL_NVIC_EnableIRQ>

    /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 80028e4:	bf00      	nop
 80028e6:	3778      	adds	r7, #120	@ 0x78
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40006400 	.word	0x40006400
 80028f0:	40021000 	.word	0x40021000
 80028f4:	48000c00 	.word	0x48000c00

080028f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b0a0      	sub	sp, #128	@ 0x80
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002900:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	605a      	str	r2, [r3, #4]
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	60da      	str	r2, [r3, #12]
 800290e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002910:	f107 0318 	add.w	r3, r7, #24
 8002914:	2254      	movs	r2, #84	@ 0x54
 8002916:	2100      	movs	r1, #0
 8002918:	4618      	mov	r0, r3
 800291a:	f008 f9e3 	bl	800ace4 <memset>
  if(hi2c->Instance==I2C1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a31      	ldr	r2, [pc, #196]	@ (80029e8 <HAL_I2C_MspInit+0xf0>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d15b      	bne.n	80029e0 <HAL_I2C_MspInit+0xe8>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002928:	2340      	movs	r3, #64	@ 0x40
 800292a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800292c:	2300      	movs	r3, #0
 800292e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4618      	mov	r0, r3
 8002936:	f005 fee9 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002940:	f7ff fd16 	bl	8002370 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002944:	4b29      	ldr	r3, [pc, #164]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 8002946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002948:	4a28      	ldr	r2, [pc, #160]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 800294a:	f043 0302 	orr.w	r3, r3, #2
 800294e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002950:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 8002952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	617b      	str	r3, [r7, #20]
 800295a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 800295e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002960:	4a22      	ldr	r2, [pc, #136]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002968:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 800296a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	613b      	str	r3, [r7, #16]
 8002972:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin;
 8002974:	2380      	movs	r3, #128	@ 0x80
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002978:	2312      	movs	r3, #18
 800297a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297c:	2300      	movs	r3, #0
 800297e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002980:	2302      	movs	r3, #2
 8002982:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002984:	2304      	movs	r3, #4
 8002986:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8002988:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800298c:	4619      	mov	r1, r3
 800298e:	4818      	ldr	r0, [pc, #96]	@ (80029f0 <HAL_I2C_MspInit+0xf8>)
 8002990:	f003 fa16 	bl	8005dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002994:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002998:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800299a:	2312      	movs	r3, #18
 800299c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029a2:	2302      	movs	r3, #2
 80029a4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a6:	2304      	movs	r3, #4
 80029a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029aa:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80029ae:	4619      	mov	r1, r3
 80029b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029b4:	f003 fa04 	bl	8005dc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b8:	4b0c      	ldr	r3, [pc, #48]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029bc:	4a0b      	ldr	r2, [pc, #44]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 80029be:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80029c4:	4b09      	ldr	r3, [pc, #36]	@ (80029ec <HAL_I2C_MspInit+0xf4>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80029d0:	2200      	movs	r2, #0
 80029d2:	2100      	movs	r1, #0
 80029d4:	201f      	movs	r0, #31
 80029d6:	f002 fde8 	bl	80055aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80029da:	201f      	movs	r0, #31
 80029dc:	f002 fdff 	bl	80055de <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80029e0:	bf00      	nop
 80029e2:	3780      	adds	r7, #128	@ 0x80
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40005400 	.word	0x40005400
 80029ec:	40021000 	.word	0x40021000
 80029f0:	48000400 	.word	0x48000400

080029f4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a2e      	ldr	r2, [pc, #184]	@ (8002abc <HAL_TIM_Base_MspInit+0xc8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d10c      	bne.n	8002a20 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a06:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a0c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a10:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a12:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a1a:	61fb      	str	r3, [r7, #28]
 8002a1c:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM20_MspInit 1 */

    /* USER CODE END TIM20_MspInit 1 */
  }

}
 8002a1e:	e046      	b.n	8002aae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a27      	ldr	r2, [pc, #156]	@ (8002ac4 <HAL_TIM_Base_MspInit+0xd0>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10c      	bne.n	8002a44 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a2a:	4b25      	ldr	r3, [pc, #148]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a36:	4b22      	ldr	r3, [pc, #136]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
 8002a40:	69bb      	ldr	r3, [r7, #24]
}
 8002a42:	e034      	b.n	8002aae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM6)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	@ (8002ac8 <HAL_TIM_Base_MspInit+0xd4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10c      	bne.n	8002a68 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a54:	f043 0310 	orr.w	r3, r3, #16
 8002a58:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a5e:	f003 0310 	and.w	r3, r3, #16
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]
}
 8002a66:	e022      	b.n	8002aae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a17      	ldr	r2, [pc, #92]	@ (8002acc <HAL_TIM_Base_MspInit+0xd8>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10c      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a72:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a76:	4a12      	ldr	r2, [pc, #72]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a78:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	693b      	ldr	r3, [r7, #16]
}
 8002a8a:	e010      	b.n	8002aae <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM20)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	@ (8002ad0 <HAL_TIM_Base_MspInit+0xdc>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d10b      	bne.n	8002aae <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002a96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002a9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aa0:	6613      	str	r3, [r2, #96]	@ 0x60
 8002aa2:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <HAL_TIM_Base_MspInit+0xcc>)
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	@ 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40012c00 	.word	0x40012c00
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40001000 	.word	0x40001000
 8002acc:	40013400 	.word	0x40013400
 8002ad0:	40015000 	.word	0x40015000

08002ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08e      	sub	sp, #56	@ 0x38
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a78      	ldr	r2, [pc, #480]	@ (8002cd4 <HAL_TIM_MspPostInit+0x200>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11e      	bne.n	8002b34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002af6:	4b78      	ldr	r3, [pc, #480]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afa:	4a77      	ldr	r2, [pc, #476]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b02:	4b75      	ldr	r3, [pc, #468]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GD3_Pin|GD2_Pin|GD1_Pin;
 8002b0e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b14:	2302      	movs	r3, #2
 8002b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002b20:	2306      	movs	r3, #6
 8002b22:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b28:	4619      	mov	r1, r3
 8002b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b2e:	f003 f947 	bl	8005dc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM20_MspPostInit 1 */

    /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 8002b32:	e0ca      	b.n	8002cca <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM3)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a68      	ldr	r2, [pc, #416]	@ (8002cdc <HAL_TIM_MspPostInit+0x208>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d138      	bne.n	8002bb0 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b3e:	4b66      	ldr	r3, [pc, #408]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b42:	4a65      	ldr	r2, [pc, #404]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b4a:	4b63      	ldr	r3, [pc, #396]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	61fb      	str	r3, [r7, #28]
 8002b54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b56:	4b60      	ldr	r3, [pc, #384]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b5a:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b5c:	f043 0302 	orr.w	r3, r3, #2
 8002b60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b62:	4b5d      	ldr	r3, [pc, #372]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002b64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IND_B_Pin;
 8002b6e:	2310      	movs	r3, #16
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b76:	2300      	movs	r3, #0
 8002b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(IND_B_GPIO_Port, &GPIO_InitStruct);
 8002b82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b86:	4619      	mov	r1, r3
 8002b88:	4855      	ldr	r0, [pc, #340]	@ (8002ce0 <HAL_TIM_MspPostInit+0x20c>)
 8002b8a:	f003 f919 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IND_G_Pin|IND_R_Pin;
 8002b8e:	2330      	movs	r3, #48	@ 0x30
 8002b90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	484e      	ldr	r0, [pc, #312]	@ (8002ce4 <HAL_TIM_MspPostInit+0x210>)
 8002baa:	f003 f909 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002bae:	e08c      	b.n	8002cca <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM8)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ce8 <HAL_TIM_MspPostInit+0x214>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d149      	bne.n	8002c4e <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	4b47      	ldr	r3, [pc, #284]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002bbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bbe:	4a46      	ldr	r2, [pc, #280]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002bc0:	f043 0302 	orr.w	r3, r3, #2
 8002bc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bc6:	4b44      	ldr	r3, [pc, #272]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bca:	f003 0302 	and.w	r3, r3, #2
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd2:	4b41      	ldr	r3, [pc, #260]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd6:	4a40      	ldr	r2, [pc, #256]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bde:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	613b      	str	r3, [r7, #16]
 8002be8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GD6_Pin;
 8002bea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8002bfc:	230a      	movs	r3, #10
 8002bfe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD6_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c04:	4619      	mov	r1, r3
 8002c06:	4837      	ldr	r0, [pc, #220]	@ (8002ce4 <HAL_TIM_MspPostInit+0x210>)
 8002c08:	f003 f8da 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD4_Pin;
 8002c0c:	2340      	movs	r3, #64	@ 0x40
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8002c1c:	2305      	movs	r3, #5
 8002c1e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD4_GPIO_Port, &GPIO_InitStruct);
 8002c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c24:	4619      	mov	r1, r3
 8002c26:	482f      	ldr	r0, [pc, #188]	@ (8002ce4 <HAL_TIM_MspPostInit+0x210>)
 8002c28:	f003 f8ca 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD5_Pin;
 8002c2c:	2380      	movs	r3, #128	@ 0x80
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c30:	2302      	movs	r3, #2
 8002c32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002c3c:	2304      	movs	r3, #4
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD5_GPIO_Port, &GPIO_InitStruct);
 8002c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c44:	4619      	mov	r1, r3
 8002c46:	4829      	ldr	r0, [pc, #164]	@ (8002cec <HAL_TIM_MspPostInit+0x218>)
 8002c48:	f003 f8ba 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002c4c:	e03d      	b.n	8002cca <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM20)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a27      	ldr	r2, [pc, #156]	@ (8002cf0 <HAL_TIM_MspPostInit+0x21c>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d138      	bne.n	8002cca <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c58:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c5c:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c64:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	f003 0310 	and.w	r3, r3, #16
 8002c6c:	60fb      	str	r3, [r7, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	4a18      	ldr	r2, [pc, #96]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c76:	f043 0304 	orr.w	r3, r3, #4
 8002c7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c7c:	4b16      	ldr	r3, [pc, #88]	@ (8002cd8 <HAL_TIM_MspPostInit+0x204>)
 8002c7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD8_Pin|GD7_Pin;
 8002c88:	230c      	movs	r3, #12
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c94:	2300      	movs	r3, #0
 8002c96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002c98:	2306      	movs	r3, #6
 8002c9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	480f      	ldr	r0, [pc, #60]	@ (8002ce0 <HAL_TIM_MspPostInit+0x20c>)
 8002ca4:	f003 f88c 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD9_Pin;
 8002ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002cba:	2306      	movs	r3, #6
 8002cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD9_GPIO_Port, &GPIO_InitStruct);
 8002cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4809      	ldr	r0, [pc, #36]	@ (8002cec <HAL_TIM_MspPostInit+0x218>)
 8002cc6:	f003 f87b 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002cca:	bf00      	nop
 8002ccc:	3738      	adds	r7, #56	@ 0x38
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40021000 	.word	0x40021000
 8002cdc:	40000400 	.word	0x40000400
 8002ce0:	48001000 	.word	0x48001000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	40013400 	.word	0x40013400
 8002cec:	48000800 	.word	0x48000800
 8002cf0:	40015000 	.word	0x40015000

08002cf4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b0a6      	sub	sp, #152	@ 0x98
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cfc:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d00:	2200      	movs	r2, #0
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	605a      	str	r2, [r3, #4]
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	60da      	str	r2, [r3, #12]
 8002d0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002d0c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d10:	2254      	movs	r2, #84	@ 0x54
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f007 ffe5 	bl	800ace4 <memset>
  if(huart->Instance==UART4)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a94      	ldr	r2, [pc, #592]	@ (8002f70 <HAL_UART_MspInit+0x27c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d13c      	bne.n	8002d9e <HAL_UART_MspInit+0xaa>

    /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002d24:	2308      	movs	r3, #8
 8002d26:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002d30:	4618      	mov	r0, r3
 8002d32:	f005 fceb 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002d3c:	f7ff fb18 	bl	8002370 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002d40:	4b8c      	ldr	r3, [pc, #560]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d44:	4a8b      	ldr	r2, [pc, #556]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002d4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d4c:	4b89      	ldr	r3, [pc, #548]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d58:	4b86      	ldr	r3, [pc, #536]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d5c:	4a85      	ldr	r2, [pc, #532]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d5e:	f043 0304 	orr.w	r3, r3, #4
 8002d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d64:	4b83      	ldr	r3, [pc, #524]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = RX_E_Pin|TX_E_Pin;
 8002d70:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002d74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002d8a:	2305      	movs	r3, #5
 8002d8c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d90:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002d94:	4619      	mov	r1, r3
 8002d96:	4878      	ldr	r0, [pc, #480]	@ (8002f78 <HAL_UART_MspInit+0x284>)
 8002d98:	f003 f812 	bl	8005dc0 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d9c:	e0e4      	b.n	8002f68 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a76      	ldr	r2, [pc, #472]	@ (8002f7c <HAL_UART_MspInit+0x288>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d13b      	bne.n	8002e20 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002da8:	2301      	movs	r3, #1
 8002daa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002dac:	2300      	movs	r3, #0
 8002dae:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002db0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002db4:	4618      	mov	r0, r3
 8002db6:	f005 fca9 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002dc0:	f7ff fad6 	bl	8002370 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002dc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002dca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dce:	6613      	str	r3, [r2, #96]	@ 0x60
 8002dd0:	4b68      	ldr	r3, [pc, #416]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002dd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002dd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ddc:	4b65      	ldr	r3, [pc, #404]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de0:	4a64      	ldr	r2, [pc, #400]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002de2:	f043 0310 	orr.w	r3, r3, #16
 8002de6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002de8:	4b62      	ldr	r3, [pc, #392]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002dea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dec:	f003 0310 	and.w	r3, r3, #16
 8002df0:	623b      	str	r3, [r7, #32]
 8002df2:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RX_W_Pin|TX_W_Pin;
 8002df4:	2303      	movs	r3, #3
 8002df6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfa:	2302      	movs	r3, #2
 8002dfc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e00:	2300      	movs	r3, #0
 8002e02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e0c:	2307      	movs	r3, #7
 8002e0e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e12:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002e16:	4619      	mov	r1, r3
 8002e18:	4859      	ldr	r0, [pc, #356]	@ (8002f80 <HAL_UART_MspInit+0x28c>)
 8002e1a:	f002 ffd1 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002e1e:	e0a3      	b.n	8002f68 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a57      	ldr	r2, [pc, #348]	@ (8002f84 <HAL_UART_MspInit+0x290>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d13b      	bne.n	8002ea2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002e32:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002e36:	4618      	mov	r0, r3
 8002e38:	f005 fc68 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002e42:	f7ff fa95 	bl	8002370 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e46:	4b4b      	ldr	r3, [pc, #300]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4a:	4a4a      	ldr	r2, [pc, #296]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e52:	4b48      	ldr	r3, [pc, #288]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5a:	61fb      	str	r3, [r7, #28]
 8002e5c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	4b45      	ldr	r3, [pc, #276]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e62:	4a44      	ldr	r2, [pc, #272]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e6a:	4b42      	ldr	r3, [pc, #264]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002e6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX_N_Pin|TX_N_Pin;
 8002e76:	2360      	movs	r3, #96	@ 0x60
 8002e78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e8e:	2307      	movs	r3, #7
 8002e90:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e94:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002e98:	4619      	mov	r1, r3
 8002e9a:	483b      	ldr	r0, [pc, #236]	@ (8002f88 <HAL_UART_MspInit+0x294>)
 8002e9c:	f002 ff90 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002ea0:	e062      	b.n	8002f68 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a39      	ldr	r2, [pc, #228]	@ (8002f8c <HAL_UART_MspInit+0x298>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d15d      	bne.n	8002f68 <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002eac:	2304      	movs	r3, #4
 8002eae:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eb4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f005 fc27 	bl	800870c <HAL_RCCEx_PeriphCLKConfig>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d001      	beq.n	8002ec8 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002ec4:	f7ff fa54 	bl	8002370 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ecc:	4a29      	ldr	r2, [pc, #164]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002ece:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ed2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed4:	4b27      	ldr	r3, [pc, #156]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002edc:	617b      	str	r3, [r7, #20]
 8002ede:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ee0:	4b24      	ldr	r3, [pc, #144]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002ee2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee4:	4a23      	ldr	r2, [pc, #140]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002ee6:	f043 0308 	orr.w	r3, r3, #8
 8002eea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eec:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002eee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ef0:	f003 0308 	and.w	r3, r3, #8
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002efa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002efc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f04:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_UART_MspInit+0x280>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX_S_Pin;
 8002f10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f2a:	2307      	movs	r3, #7
 8002f2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(RX_S_GPIO_Port, &GPIO_InitStruct);
 8002f30:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f34:	4619      	mov	r1, r3
 8002f36:	4814      	ldr	r0, [pc, #80]	@ (8002f88 <HAL_UART_MspInit+0x294>)
 8002f38:	f002 ff42 	bl	8005dc0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX_S_Pin;
 8002f3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f56:	2307      	movs	r3, #7
 8002f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(TX_S_GPIO_Port, &GPIO_InitStruct);
 8002f5c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002f60:	4619      	mov	r1, r3
 8002f62:	480b      	ldr	r0, [pc, #44]	@ (8002f90 <HAL_UART_MspInit+0x29c>)
 8002f64:	f002 ff2c 	bl	8005dc0 <HAL_GPIO_Init>
}
 8002f68:	bf00      	nop
 8002f6a:	3798      	adds	r7, #152	@ 0x98
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40004c00 	.word	0x40004c00
 8002f74:	40021000 	.word	0x40021000
 8002f78:	48000800 	.word	0x48000800
 8002f7c:	40013800 	.word	0x40013800
 8002f80:	48001000 	.word	0x48001000
 8002f84:	40004400 	.word	0x40004400
 8002f88:	48000c00 	.word	0x48000c00
 8002f8c:	40004800 	.word	0x40004800
 8002f90:	48000400 	.word	0x48000400

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <NMI_Handler+0x4>

08002f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fa0:	bf00      	nop
 8002fa2:	e7fd      	b.n	8002fa0 <HardFault_Handler+0x4>

08002fa4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <MemManage_Handler+0x4>

08002fac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fb0:	bf00      	nop
 8002fb2:	e7fd      	b.n	8002fb0 <BusFault_Handler+0x4>

08002fb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb8:	bf00      	nop
 8002fba:	e7fd      	b.n	8002fb8 <UsageFault_Handler+0x4>

08002fbc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fea:	f000 f8b9 	bl	8003160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	bd80      	pop	{r7, pc}
	...

08002ff4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <FDCAN1_IT0_IRQHandler+0x10>)
 8002ffa:	f002 fcd9 	bl	80059b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000464 	.word	0x20000464

08003008 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <FDCAN1_IT1_IRQHandler+0x10>)
 800300e:	f002 fccf 	bl	80059b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000464 	.word	0x20000464

0800301c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003020:	4802      	ldr	r0, [pc, #8]	@ (800302c <I2C1_EV_IRQHandler+0x10>)
 8003022:	f003 fa87 	bl	8006534 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	200004c8 	.word	0x200004c8

08003030 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003034:	4802      	ldr	r0, [pc, #8]	@ (8003040 <ADC3_IRQHandler+0x10>)
 8003036:	f001 f845 	bl	80040c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	20000320 	.word	0x20000320

08003044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003044:	b480      	push	{r7}
 8003046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003048:	4b06      	ldr	r3, [pc, #24]	@ (8003064 <SystemInit+0x20>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304e:	4a05      	ldr	r2, [pc, #20]	@ (8003064 <SystemInit+0x20>)
 8003050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000ed00 	.word	0xe000ed00

08003068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003068:	480d      	ldr	r0, [pc, #52]	@ (80030a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800306a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800306c:	f7ff ffea 	bl	8003044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003070:	480c      	ldr	r0, [pc, #48]	@ (80030a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003072:	490d      	ldr	r1, [pc, #52]	@ (80030a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003074:	4a0d      	ldr	r2, [pc, #52]	@ (80030ac <LoopForever+0xe>)
  movs r3, #0
 8003076:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003078:	e002      	b.n	8003080 <LoopCopyDataInit>

0800307a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800307a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800307c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307e:	3304      	adds	r3, #4

08003080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003084:	d3f9      	bcc.n	800307a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003086:	4a0a      	ldr	r2, [pc, #40]	@ (80030b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003088:	4c0a      	ldr	r4, [pc, #40]	@ (80030b4 <LoopForever+0x16>)
  movs r3, #0
 800308a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800308c:	e001      	b.n	8003092 <LoopFillZerobss>

0800308e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003090:	3204      	adds	r2, #4

08003092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003094:	d3fb      	bcc.n	800308e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003096:	f007 fe2d 	bl	800acf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800309a:	f7fd ff55 	bl	8000f48 <main>

0800309e <LoopForever>:

LoopForever:
    b LoopForever
 800309e:	e7fe      	b.n	800309e <LoopForever>
  ldr   r0, =_estack
 80030a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a8:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 80030ac:	0800adc0 	.word	0x0800adc0
  ldr r2, =_sbss
 80030b0:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 80030b4:	2000092c 	.word	0x2000092c

080030b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80030b8:	e7fe      	b.n	80030b8 <ADC1_2_IRQHandler>

080030ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030c4:	2003      	movs	r0, #3
 80030c6:	f002 fa65 	bl	8005594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030ca:	200f      	movs	r0, #15
 80030cc:	f000 f80e 	bl	80030ec <HAL_InitTick>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	71fb      	strb	r3, [r7, #7]
 80030da:	e001      	b.n	80030e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80030dc:	f7ff f94e 	bl	800237c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80030e0:	79fb      	ldrb	r3, [r7, #7]

}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80030f8:	4b16      	ldr	r3, [pc, #88]	@ (8003154 <HAL_InitTick+0x68>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d022      	beq.n	8003146 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003100:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_InitTick+0x6c>)
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <HAL_InitTick+0x68>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800310c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f002 fa70 	bl	80055fa <HAL_SYSTICK_Config>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10f      	bne.n	8003140 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b0f      	cmp	r3, #15
 8003124:	d809      	bhi.n	800313a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003126:	2200      	movs	r2, #0
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800312e:	f002 fa3c 	bl	80055aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003132:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <HAL_InitTick+0x70>)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	e007      	b.n	800314a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	73fb      	strb	r3, [r7, #15]
 800313e:	e004      	b.n	800314a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	73fb      	strb	r3, [r7, #15]
 8003144:	e001      	b.n	800314a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800314a:	7bfb      	ldrb	r3, [r7, #15]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	2000001c 	.word	0x2000001c
 8003158:	20000014 	.word	0x20000014
 800315c:	20000018 	.word	0x20000018

08003160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003160:	b480      	push	{r7}
 8003162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003164:	4b05      	ldr	r3, [pc, #20]	@ (800317c <HAL_IncTick+0x1c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_IncTick+0x20>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4413      	add	r3, r2
 800316e:	4a03      	ldr	r2, [pc, #12]	@ (800317c <HAL_IncTick+0x1c>)
 8003170:	6013      	str	r3, [r2, #0]
}
 8003172:	bf00      	nop
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	20000928 	.word	0x20000928
 8003180:	2000001c 	.word	0x2000001c

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	20000928 	.word	0x20000928

0800319c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff ffee 	bl	8003184 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80031b4:	d004      	beq.n	80031c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b6:	4b09      	ldr	r3, [pc, #36]	@ (80031dc <HAL_Delay+0x40>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031c0:	bf00      	nop
 80031c2:	f7ff ffdf 	bl	8003184 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d8f7      	bhi.n	80031c2 <HAL_Delay+0x26>
  {
  }
}
 80031d2:	bf00      	nop
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	2000001c 	.word	0x2000001c

080031e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	431a      	orrs	r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]
}
 80031fa:	bf00      	nop
 80031fc:	370c      	adds	r7, #12
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr

08003206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003206:	b480      	push	{r7}
 8003208:	b083      	sub	sp, #12
 800320a:	af00      	add	r7, sp, #0
 800320c:	6078      	str	r0, [r7, #4]
 800320e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3360      	adds	r3, #96	@ 0x60
 800325a:	461a      	mov	r2, r3
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	4413      	add	r3, r2
 8003262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	4b08      	ldr	r3, [pc, #32]	@ (800328c <LL_ADC_SetOffset+0x44>)
 800326a:	4013      	ands	r3, r2
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	4313      	orrs	r3, r2
 8003278:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003280:	bf00      	nop
 8003282:	371c      	adds	r7, #28
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	03fff000 	.word	0x03fff000

08003290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	3360      	adds	r3, #96	@ 0x60
 800329e:	461a      	mov	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3360      	adds	r3, #96	@ 0x60
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	431a      	orrs	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80032e6:	bf00      	nop
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b087      	sub	sp, #28
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	60f8      	str	r0, [r7, #12]
 80032fa:	60b9      	str	r1, [r7, #8]
 80032fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	3360      	adds	r3, #96	@ 0x60
 8003302:	461a      	mov	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	431a      	orrs	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3360      	adds	r3, #96	@ 0x60
 8003338:	461a      	mov	r2, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	431a      	orrs	r2, r3
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003352:	bf00      	nop
 8003354:	371c      	adds	r7, #28
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr

0800335e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800335e:	b480      	push	{r7}
 8003360:	b083      	sub	sp, #12
 8003362:	af00      	add	r7, sp, #0
 8003364:	6078      	str	r0, [r7, #4]
 8003366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	615a      	str	r2, [r3, #20]
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80033aa:	b480      	push	{r7}
 80033ac:	b087      	sub	sp, #28
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	60f8      	str	r0, [r7, #12]
 80033b2:	60b9      	str	r1, [r7, #8]
 80033b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	3330      	adds	r3, #48	@ 0x30
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	f003 030c 	and.w	r3, r3, #12
 80033c6:	4413      	add	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f003 031f 	and.w	r3, r3, #31
 80033d4:	211f      	movs	r1, #31
 80033d6:	fa01 f303 	lsl.w	r3, r1, r3
 80033da:	43db      	mvns	r3, r3
 80033dc:	401a      	ands	r2, r3
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	f003 011f 	and.w	r1, r3, #31
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa01 f303 	lsl.w	r3, r1, r3
 80033f0:	431a      	orrs	r2, r3
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033f6:	bf00      	nop
 80033f8:	371c      	adds	r7, #28
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3314      	adds	r3, #20
 8003438:	461a      	mov	r2, r3
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	0e5b      	lsrs	r3, r3, #25
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	4413      	add	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	0d1b      	lsrs	r3, r3, #20
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	2107      	movs	r1, #7
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	43db      	mvns	r3, r3
 800345c:	401a      	ands	r2, r3
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	0d1b      	lsrs	r3, r3, #20
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	fa01 f303 	lsl.w	r3, r1, r3
 800346c:	431a      	orrs	r2, r3
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003472:	bf00      	nop
 8003474:	371c      	adds	r7, #28
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003498:	43db      	mvns	r3, r3
 800349a:	401a      	ands	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0318 	and.w	r3, r3, #24
 80034a2:	4908      	ldr	r1, [pc, #32]	@ (80034c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80034a4:	40d9      	lsrs	r1, r3
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	400b      	ands	r3, r1
 80034aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ae:	431a      	orrs	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	0007ffff 	.word	0x0007ffff

080034c8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f003 031f 	and.w	r3, r3, #31
}
 80034d8:	4618      	mov	r0, r3
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003510:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	6093      	str	r3, [r2, #8]
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003538:	d101      	bne.n	800353e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800355c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003560:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003584:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003588:	d101      	bne.n	800358e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800358a:	2301      	movs	r3, #1
 800358c:	e000      	b.n	8003590 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035b0:	f043 0201 	orr.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80035d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035d8:	f043 0202 	orr.w	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <LL_ADC_IsEnabled+0x18>
 8003600:	2301      	movs	r3, #1
 8003602:	e000      	b.n	8003606 <LL_ADC_IsEnabled+0x1a>
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr

08003612 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003612:	b480      	push	{r7}
 8003614:	b083      	sub	sp, #12
 8003616:	af00      	add	r7, sp, #0
 8003618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d101      	bne.n	800362a <LL_ADC_IsDisableOngoing+0x18>
 8003626:	2301      	movs	r3, #1
 8003628:	e000      	b.n	800362c <LL_ADC_IsDisableOngoing+0x1a>
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003648:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800364c:	f043 0204 	orr.w	r2, r3, #4
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0304 	and.w	r3, r3, #4
 8003670:	2b04      	cmp	r3, #4
 8003672:	d101      	bne.n	8003678 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003674:	2301      	movs	r3, #1
 8003676:	e000      	b.n	800367a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b08      	cmp	r3, #8
 8003698:	d101      	bne.n	800369e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800369a:	2301      	movs	r3, #1
 800369c:	e000      	b.n	80036a0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036ac:	b590      	push	{r4, r7, lr}
 80036ae:	b089      	sub	sp, #36	@ 0x24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b4:	2300      	movs	r3, #0
 80036b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e1a9      	b.n	8003a1a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d109      	bne.n	80036e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f7fe fe75 	bl	80023c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff19 	bl	8003524 <LL_ADC_IsDeepPowerDownEnabled>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d004      	beq.n	8003702 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff feff 	bl	8003500 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7ff ff34 	bl	8003574 <LL_ADC_IsInternalRegulatorEnabled>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d115      	bne.n	800373e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff ff18 	bl	800354c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800371c:	4b9c      	ldr	r3, [pc, #624]	@ (8003990 <HAL_ADC_Init+0x2e4>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	099b      	lsrs	r3, r3, #6
 8003722:	4a9c      	ldr	r2, [pc, #624]	@ (8003994 <HAL_ADC_Init+0x2e8>)
 8003724:	fba2 2303 	umull	r2, r3, r2, r3
 8003728:	099b      	lsrs	r3, r3, #6
 800372a:	3301      	adds	r3, #1
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003730:	e002      	b.n	8003738 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	3b01      	subs	r3, #1
 8003736:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1f9      	bne.n	8003732 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff ff16 	bl	8003574 <LL_ADC_IsInternalRegulatorEnabled>
 8003748:	4603      	mov	r3, r0
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10d      	bne.n	800376a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f043 0210 	orr.w	r2, r3, #16
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	f043 0201 	orr.w	r2, r3, #1
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4618      	mov	r0, r3
 8003770:	f7ff ff76 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 8003774:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f003 0310 	and.w	r3, r3, #16
 800377e:	2b00      	cmp	r3, #0
 8003780:	f040 8142 	bne.w	8003a08 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	f040 813e 	bne.w	8003a08 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003794:	f043 0202 	orr.w	r2, r3, #2
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ff23 	bl	80035ec <LL_ADC_IsEnabled>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d141      	bne.n	8003830 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037b4:	d004      	beq.n	80037c0 <HAL_ADC_Init+0x114>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a77      	ldr	r2, [pc, #476]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10f      	bne.n	80037e0 <HAL_ADC_Init+0x134>
 80037c0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80037c4:	f7ff ff12 	bl	80035ec <LL_ADC_IsEnabled>
 80037c8:	4604      	mov	r4, r0
 80037ca:	4873      	ldr	r0, [pc, #460]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 80037cc:	f7ff ff0e 	bl	80035ec <LL_ADC_IsEnabled>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4323      	orrs	r3, r4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	bf0c      	ite	eq
 80037d8:	2301      	moveq	r3, #1
 80037da:	2300      	movne	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e012      	b.n	8003806 <HAL_ADC_Init+0x15a>
 80037e0:	486e      	ldr	r0, [pc, #440]	@ (800399c <HAL_ADC_Init+0x2f0>)
 80037e2:	f7ff ff03 	bl	80035ec <LL_ADC_IsEnabled>
 80037e6:	4604      	mov	r4, r0
 80037e8:	486d      	ldr	r0, [pc, #436]	@ (80039a0 <HAL_ADC_Init+0x2f4>)
 80037ea:	f7ff feff 	bl	80035ec <LL_ADC_IsEnabled>
 80037ee:	4603      	mov	r3, r0
 80037f0:	431c      	orrs	r4, r3
 80037f2:	486c      	ldr	r0, [pc, #432]	@ (80039a4 <HAL_ADC_Init+0x2f8>)
 80037f4:	f7ff fefa 	bl	80035ec <LL_ADC_IsEnabled>
 80037f8:	4603      	mov	r3, r0
 80037fa:	4323      	orrs	r3, r4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	bf0c      	ite	eq
 8003800:	2301      	moveq	r3, #1
 8003802:	2300      	movne	r3, #0
 8003804:	b2db      	uxtb	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d004      	beq.n	800381e <HAL_ADC_Init+0x172>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5f      	ldr	r2, [pc, #380]	@ (8003998 <HAL_ADC_Init+0x2ec>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_ADC_Init+0x176>
 800381e:	4a62      	ldr	r2, [pc, #392]	@ (80039a8 <HAL_ADC_Init+0x2fc>)
 8003820:	e000      	b.n	8003824 <HAL_ADC_Init+0x178>
 8003822:	4a62      	ldr	r2, [pc, #392]	@ (80039ac <HAL_ADC_Init+0x300>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	4619      	mov	r1, r3
 800382a:	4610      	mov	r0, r2
 800382c:	f7ff fcd8 	bl	80031e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	7f5b      	ldrb	r3, [r3, #29]
 8003834:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800383a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003840:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003846:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800384e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003850:	4313      	orrs	r3, r2
 8003852:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800385a:	2b01      	cmp	r3, #1
 800385c:	d106      	bne.n	800386c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	045b      	lsls	r3, r3, #17
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4313      	orrs	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d009      	beq.n	8003888 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003878:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003880:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	4313      	orrs	r3, r2
 8003886:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	68da      	ldr	r2, [r3, #12]
 800388e:	4b48      	ldr	r3, [pc, #288]	@ (80039b0 <HAL_ADC_Init+0x304>)
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6812      	ldr	r2, [r2, #0]
 8003896:	69b9      	ldr	r1, [r7, #24]
 8003898:	430b      	orrs	r3, r1
 800389a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7ff fee5 	bl	8003686 <LL_ADC_INJ_IsConversionOngoing>
 80038bc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d17f      	bne.n	80039c4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d17c      	bne.n	80039c4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038ce:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80038d6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e6:	f023 0302 	bic.w	r3, r3, #2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6812      	ldr	r2, [r2, #0]
 80038ee:	69b9      	ldr	r1, [r7, #24]
 80038f0:	430b      	orrs	r3, r1
 80038f2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d017      	beq.n	800392c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	691a      	ldr	r2, [r3, #16]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800390a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003914:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003918:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6911      	ldr	r1, [r2, #16]
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	430b      	orrs	r3, r1
 8003926:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800392a:	e013      	b.n	8003954 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800393a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800394c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003950:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800395a:	2b01      	cmp	r3, #1
 800395c:	d12a      	bne.n	80039b4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003968:	f023 0304 	bic.w	r3, r3, #4
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800397a:	4311      	orrs	r1, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003980:	430a      	orrs	r2, r1
 8003982:	431a      	orrs	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f042 0201 	orr.w	r2, r2, #1
 800398c:	611a      	str	r2, [r3, #16]
 800398e:	e019      	b.n	80039c4 <HAL_ADC_Init+0x318>
 8003990:	20000014 	.word	0x20000014
 8003994:	053e2d63 	.word	0x053e2d63
 8003998:	50000100 	.word	0x50000100
 800399c:	50000400 	.word	0x50000400
 80039a0:	50000500 	.word	0x50000500
 80039a4:	50000600 	.word	0x50000600
 80039a8:	50000300 	.word	0x50000300
 80039ac:	50000700 	.word	0x50000700
 80039b0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 0201 	bic.w	r2, r2, #1
 80039c2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	695b      	ldr	r3, [r3, #20]
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d10c      	bne.n	80039e6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039d2:	f023 010f 	bic.w	r1, r3, #15
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a1b      	ldr	r3, [r3, #32]
 80039da:	1e5a      	subs	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80039e4:	e007      	b.n	80039f6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 020f 	bic.w	r2, r2, #15
 80039f4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	f023 0303 	bic.w	r3, r3, #3
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a06:	e007      	b.n	8003a18 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a0c:	f043 0210 	orr.w	r2, r3, #16
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3724      	adds	r7, #36	@ 0x24
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd90      	pop	{r4, r7, pc}
 8003a22:	bf00      	nop

08003a24 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b086      	sub	sp, #24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a34:	d004      	beq.n	8003a40 <HAL_ADC_Start+0x1c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a67      	ldr	r2, [pc, #412]	@ (8003bd8 <HAL_ADC_Start+0x1b4>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d101      	bne.n	8003a44 <HAL_ADC_Start+0x20>
 8003a40:	4b66      	ldr	r3, [pc, #408]	@ (8003bdc <HAL_ADC_Start+0x1b8>)
 8003a42:	e000      	b.n	8003a46 <HAL_ADC_Start+0x22>
 8003a44:	4b66      	ldr	r3, [pc, #408]	@ (8003be0 <HAL_ADC_Start+0x1bc>)
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7ff fd3e 	bl	80034c8 <LL_ADC_GetMultimode>
 8003a4c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f7ff fe04 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f040 80b4 	bne.w	8003bc8 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d101      	bne.n	8003a6e <HAL_ADC_Start+0x4a>
 8003a6a:	2302      	movs	r3, #2
 8003a6c:	e0af      	b.n	8003bce <HAL_ADC_Start+0x1aa>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f001 f9d8 	bl	8004e2c <ADC_Enable>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 809b 	bne.w	8003bbe <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd8 <HAL_ADC_Start+0x1b4>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_ADC_Start+0x96>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a4e      	ldr	r2, [pc, #312]	@ (8003be4 <HAL_ADC_Start+0x1c0>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d002      	beq.n	8003ab6 <HAL_ADC_Start+0x92>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	e003      	b.n	8003abe <HAL_ADC_Start+0x9a>
 8003ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8003be8 <HAL_ADC_Start+0x1c4>)
 8003ab8:	e001      	b.n	8003abe <HAL_ADC_Start+0x9a>
 8003aba:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d002      	beq.n	8003acc <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003adc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ae0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ae4:	d106      	bne.n	8003af4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003aea:	f023 0206 	bic.w	r2, r3, #6
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	661a      	str	r2, [r3, #96]	@ 0x60
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	221c      	movs	r2, #28
 8003b00:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a32      	ldr	r2, [pc, #200]	@ (8003bd8 <HAL_ADC_Start+0x1b4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d009      	beq.n	8003b28 <HAL_ADC_Start+0x104>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a32      	ldr	r2, [pc, #200]	@ (8003be4 <HAL_ADC_Start+0x1c0>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d002      	beq.n	8003b24 <HAL_ADC_Start+0x100>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	e003      	b.n	8003b2c <HAL_ADC_Start+0x108>
 8003b24:	4b30      	ldr	r3, [pc, #192]	@ (8003be8 <HAL_ADC_Start+0x1c4>)
 8003b26:	e001      	b.n	8003b2c <HAL_ADC_Start+0x108>
 8003b28:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d008      	beq.n	8003b46 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	2b05      	cmp	r3, #5
 8003b3e:	d002      	beq.n	8003b46 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	d114      	bne.n	8003b70 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fd65 	bl	8003638 <LL_ADC_REG_StartConversion>
 8003b6e:	e02d      	b.n	8003bcc <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b74:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <HAL_ADC_Start+0x1b4>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d009      	beq.n	8003b9a <HAL_ADC_Start+0x176>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a16      	ldr	r2, [pc, #88]	@ (8003be4 <HAL_ADC_Start+0x1c0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d002      	beq.n	8003b96 <HAL_ADC_Start+0x172>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	e003      	b.n	8003b9e <HAL_ADC_Start+0x17a>
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <HAL_ADC_Start+0x1c4>)
 8003b98:	e001      	b.n	8003b9e <HAL_ADC_Start+0x17a>
 8003b9a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b9e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00f      	beq.n	8003bcc <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bb4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bbc:	e006      	b.n	8003bcc <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003bc6:	e001      	b.n	8003bcc <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	50000100 	.word	0x50000100
 8003bdc:	50000300 	.word	0x50000300
 8003be0:	50000700 	.word	0x50000700
 8003be4:	50000500 	.word	0x50000500
 8003be8:	50000400 	.word	0x50000400

08003bec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b088      	sub	sp, #32
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003bfe:	d004      	beq.n	8003c0a <HAL_ADC_PollForConversion+0x1e>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a77      	ldr	r2, [pc, #476]	@ (8003de4 <HAL_ADC_PollForConversion+0x1f8>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d101      	bne.n	8003c0e <HAL_ADC_PollForConversion+0x22>
 8003c0a:	4b77      	ldr	r3, [pc, #476]	@ (8003de8 <HAL_ADC_PollForConversion+0x1fc>)
 8003c0c:	e000      	b.n	8003c10 <HAL_ADC_PollForConversion+0x24>
 8003c0e:	4b77      	ldr	r3, [pc, #476]	@ (8003dec <HAL_ADC_PollForConversion+0x200>)
 8003c10:	4618      	mov	r0, r3
 8003c12:	f7ff fc59 	bl	80034c8 <LL_ADC_GetMultimode>
 8003c16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d102      	bne.n	8003c26 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003c20:	2308      	movs	r3, #8
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	e037      	b.n	8003c96 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b05      	cmp	r3, #5
 8003c30:	d002      	beq.n	8003c38 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d111      	bne.n	8003c5c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c4a:	f043 0220 	orr.w	r2, r3, #32
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e0c1      	b.n	8003dda <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c56:	2304      	movs	r3, #4
 8003c58:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003c5a:	e01c      	b.n	8003c96 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c64:	d004      	beq.n	8003c70 <HAL_ADC_PollForConversion+0x84>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003de4 <HAL_ADC_PollForConversion+0x1f8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_PollForConversion+0x88>
 8003c70:	4b5d      	ldr	r3, [pc, #372]	@ (8003de8 <HAL_ADC_PollForConversion+0x1fc>)
 8003c72:	e000      	b.n	8003c76 <HAL_ADC_PollForConversion+0x8a>
 8003c74:	4b5d      	ldr	r3, [pc, #372]	@ (8003dec <HAL_ADC_PollForConversion+0x200>)
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff fc34 	bl	80034e4 <LL_ADC_GetMultiDMATransfer>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d007      	beq.n	8003c92 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e0a3      	b.n	8003dda <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003c92:	2304      	movs	r3, #4
 8003c94:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003c96:	f7ff fa75 	bl	8003184 <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003c9c:	e021      	b.n	8003ce2 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ca4:	d01d      	beq.n	8003ce2 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003ca6:	f7ff fa6d 	bl	8003184 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <HAL_ADC_PollForConversion+0xd0>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d112      	bne.n	8003ce2 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10b      	bne.n	8003ce2 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cce:	f043 0204 	orr.w	r2, r3, #4
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e07b      	b.n	8003dda <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	4013      	ands	r3, r2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0d6      	beq.n	8003c9e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f7ff fb3f 	bl	8003384 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01c      	beq.n	8003d46 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	7f5b      	ldrb	r3, [r3, #29]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d118      	bne.n	8003d46 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d111      	bne.n	8003d46 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d105      	bne.n	8003d46 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d3e:	f043 0201 	orr.w	r2, r3, #1
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a26      	ldr	r2, [pc, #152]	@ (8003de4 <HAL_ADC_PollForConversion+0x1f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d009      	beq.n	8003d64 <HAL_ADC_PollForConversion+0x178>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a26      	ldr	r2, [pc, #152]	@ (8003df0 <HAL_ADC_PollForConversion+0x204>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d002      	beq.n	8003d60 <HAL_ADC_PollForConversion+0x174>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	e003      	b.n	8003d68 <HAL_ADC_PollForConversion+0x17c>
 8003d60:	4b24      	ldr	r3, [pc, #144]	@ (8003df4 <HAL_ADC_PollForConversion+0x208>)
 8003d62:	e001      	b.n	8003d68 <HAL_ADC_PollForConversion+0x17c>
 8003d64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d008      	beq.n	8003d82 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	2b05      	cmp	r3, #5
 8003d7a:	d002      	beq.n	8003d82 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b09      	cmp	r3, #9
 8003d80:	d104      	bne.n	8003d8c <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	e014      	b.n	8003db6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <HAL_ADC_PollForConversion+0x1f8>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d009      	beq.n	8003daa <HAL_ADC_PollForConversion+0x1be>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a15      	ldr	r2, [pc, #84]	@ (8003df0 <HAL_ADC_PollForConversion+0x204>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d002      	beq.n	8003da6 <HAL_ADC_PollForConversion+0x1ba>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	e003      	b.n	8003dae <HAL_ADC_PollForConversion+0x1c2>
 8003da6:	4b13      	ldr	r3, [pc, #76]	@ (8003df4 <HAL_ADC_PollForConversion+0x208>)
 8003da8:	e001      	b.n	8003dae <HAL_ADC_PollForConversion+0x1c2>
 8003daa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003dae:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	2b08      	cmp	r3, #8
 8003dba:	d104      	bne.n	8003dc6 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2208      	movs	r2, #8
 8003dc2:	601a      	str	r2, [r3, #0]
 8003dc4:	e008      	b.n	8003dd8 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d103      	bne.n	8003dd8 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	220c      	movs	r2, #12
 8003dd6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3720      	adds	r7, #32
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	50000100 	.word	0x50000100
 8003de8:	50000300 	.word	0x50000300
 8003dec:	50000700 	.word	0x50000700
 8003df0:	50000500 	.word	0x50000500
 8003df4:	50000400 	.word	0x50000400

08003df8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e08:	d004      	beq.n	8003e14 <HAL_ADC_Start_IT+0x1c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a92      	ldr	r2, [pc, #584]	@ (8004058 <HAL_ADC_Start_IT+0x260>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d101      	bne.n	8003e18 <HAL_ADC_Start_IT+0x20>
 8003e14:	4b91      	ldr	r3, [pc, #580]	@ (800405c <HAL_ADC_Start_IT+0x264>)
 8003e16:	e000      	b.n	8003e1a <HAL_ADC_Start_IT+0x22>
 8003e18:	4b91      	ldr	r3, [pc, #580]	@ (8004060 <HAL_ADC_Start_IT+0x268>)
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fb54 	bl	80034c8 <LL_ADC_GetMultimode>
 8003e20:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff fc1a 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f040 8132 	bne.w	8004098 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_ADC_Start_IT+0x4a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e12d      	b.n	800409e <HAL_ADC_Start_IT+0x2a6>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 ffee 	bl	8004e2c <ADC_Enable>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 8119 	bne.w	800408e <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e60:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a78      	ldr	r2, [pc, #480]	@ (8004058 <HAL_ADC_Start_IT+0x260>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d009      	beq.n	8003e8e <HAL_ADC_Start_IT+0x96>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a79      	ldr	r2, [pc, #484]	@ (8004064 <HAL_ADC_Start_IT+0x26c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d002      	beq.n	8003e8a <HAL_ADC_Start_IT+0x92>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	e003      	b.n	8003e92 <HAL_ADC_Start_IT+0x9a>
 8003e8a:	4b77      	ldr	r3, [pc, #476]	@ (8004068 <HAL_ADC_Start_IT+0x270>)
 8003e8c:	e001      	b.n	8003e92 <HAL_ADC_Start_IT+0x9a>
 8003e8e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d002      	beq.n	8003ea0 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d105      	bne.n	8003eac <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d006      	beq.n	8003ec6 <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ebc:	f023 0206 	bic.w	r2, r3, #6
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	661a      	str	r2, [r3, #96]	@ 0x60
 8003ec4:	e002      	b.n	8003ecc <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	221c      	movs	r2, #28
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 021c 	bic.w	r2, r2, #28
 8003eea:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d108      	bne.n	8003f06 <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685a      	ldr	r2, [r3, #4]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0208 	orr.w	r2, r2, #8
 8003f02:	605a      	str	r2, [r3, #4]
          break;
 8003f04:	e008      	b.n	8003f18 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0204 	orr.w	r2, r2, #4
 8003f14:	605a      	str	r2, [r3, #4]
          break;
 8003f16:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	685a      	ldr	r2, [r3, #4]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0210 	orr.w	r2, r2, #16
 8003f2e:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a48      	ldr	r2, [pc, #288]	@ (8004058 <HAL_ADC_Start_IT+0x260>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_ADC_Start_IT+0x156>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a49      	ldr	r2, [pc, #292]	@ (8004064 <HAL_ADC_Start_IT+0x26c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d002      	beq.n	8003f4a <HAL_ADC_Start_IT+0x152>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	e003      	b.n	8003f52 <HAL_ADC_Start_IT+0x15a>
 8003f4a:	4b47      	ldr	r3, [pc, #284]	@ (8004068 <HAL_ADC_Start_IT+0x270>)
 8003f4c:	e001      	b.n	8003f52 <HAL_ADC_Start_IT+0x15a>
 8003f4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6812      	ldr	r2, [r2, #0]
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d008      	beq.n	8003f6c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d005      	beq.n	8003f6c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b05      	cmp	r3, #5
 8003f64:	d002      	beq.n	8003f6c <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	2b09      	cmp	r3, #9
 8003f6a:	d13a      	bne.n	8003fe2 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d02d      	beq.n	8003fd6 <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003f82:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	699b      	ldr	r3, [r3, #24]
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d110      	bne.n	8003fb4 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0220 	bic.w	r2, r2, #32
 8003fa0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003fb0:	605a      	str	r2, [r3, #4]
              break;
 8003fb2:	e010      	b.n	8003fd6 <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685a      	ldr	r2, [r3, #4]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685a      	ldr	r2, [r3, #4]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0220 	orr.w	r2, r2, #32
 8003fd2:	605a      	str	r2, [r3, #4]
              break;
 8003fd4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fb2c 	bl	8003638 <LL_ADC_REG_StartConversion>
 8003fe0:	e05c      	b.n	800409c <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	@ (8004058 <HAL_ADC_Start_IT+0x260>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_ADC_Start_IT+0x214>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <HAL_ADC_Start_IT+0x26c>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d002      	beq.n	8004008 <HAL_ADC_Start_IT+0x210>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	e003      	b.n	8004010 <HAL_ADC_Start_IT+0x218>
 8004008:	4b17      	ldr	r3, [pc, #92]	@ (8004068 <HAL_ADC_Start_IT+0x270>)
 800400a:	e001      	b.n	8004010 <HAL_ADC_Start_IT+0x218>
 800400c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004010:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d03e      	beq.n	800409c <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004026:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	2b08      	cmp	r3, #8
 8004034:	d11a      	bne.n	800406c <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f022 0220 	bic.w	r2, r2, #32
 8004044:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004054:	605a      	str	r2, [r3, #4]
              break;
 8004056:	e021      	b.n	800409c <HAL_ADC_Start_IT+0x2a4>
 8004058:	50000100 	.word	0x50000100
 800405c:	50000300 	.word	0x50000300
 8004060:	50000700 	.word	0x50000700
 8004064:	50000500 	.word	0x50000500
 8004068:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800407a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f042 0220 	orr.w	r2, r2, #32
 800408a:	605a      	str	r2, [r3, #4]
              break;
 800408c:	e006      	b.n	800409c <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004096:	e001      	b.n	800409c <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004098:	2302      	movs	r3, #2
 800409a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
}
 800409e:	4618      	mov	r0, r3
 80040a0:	3718      	adds	r7, #24
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop

080040a8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	370c      	adds	r7, #12
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
	...

080040c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08a      	sub	sp, #40	@ 0x28
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80040cc:	2300      	movs	r3, #0
 80040ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040e8:	d004      	beq.n	80040f4 <HAL_ADC_IRQHandler+0x30>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a8e      	ldr	r2, [pc, #568]	@ (8004328 <HAL_ADC_IRQHandler+0x264>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d101      	bne.n	80040f8 <HAL_ADC_IRQHandler+0x34>
 80040f4:	4b8d      	ldr	r3, [pc, #564]	@ (800432c <HAL_ADC_IRQHandler+0x268>)
 80040f6:	e000      	b.n	80040fa <HAL_ADC_IRQHandler+0x36>
 80040f8:	4b8d      	ldr	r3, [pc, #564]	@ (8004330 <HAL_ADC_IRQHandler+0x26c>)
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff f9e4 	bl	80034c8 <LL_ADC_GetMultimode>
 8004100:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d017      	beq.n	800413c <HAL_ADC_IRQHandler+0x78>
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d012      	beq.n	800413c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	d105      	bne.n	800412e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004126:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f001 f84e 	bl	80051d0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2202      	movs	r2, #2
 800413a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b00      	cmp	r3, #0
 8004144:	d004      	beq.n	8004150 <HAL_ADC_IRQHandler+0x8c>
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 8094 	beq.w	8004284 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b00      	cmp	r3, #0
 8004164:	f000 808e 	beq.w	8004284 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d105      	bne.n	8004180 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004178:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff f8fd 	bl	8003384 <LL_ADC_REG_IsTriggerSourceSWStart>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d072      	beq.n	8004276 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a64      	ldr	r2, [pc, #400]	@ (8004328 <HAL_ADC_IRQHandler+0x264>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d009      	beq.n	80041ae <HAL_ADC_IRQHandler+0xea>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_ADC_IRQHandler+0x270>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d002      	beq.n	80041aa <HAL_ADC_IRQHandler+0xe6>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	e003      	b.n	80041b2 <HAL_ADC_IRQHandler+0xee>
 80041aa:	4b63      	ldr	r3, [pc, #396]	@ (8004338 <HAL_ADC_IRQHandler+0x274>)
 80041ac:	e001      	b.n	80041b2 <HAL_ADC_IRQHandler+0xee>
 80041ae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d008      	beq.n	80041cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	2b05      	cmp	r3, #5
 80041c4:	d002      	beq.n	80041cc <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b09      	cmp	r3, #9
 80041ca:	d104      	bne.n	80041d6 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	e014      	b.n	8004200 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a53      	ldr	r2, [pc, #332]	@ (8004328 <HAL_ADC_IRQHandler+0x264>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d009      	beq.n	80041f4 <HAL_ADC_IRQHandler+0x130>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a53      	ldr	r2, [pc, #332]	@ (8004334 <HAL_ADC_IRQHandler+0x270>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d002      	beq.n	80041f0 <HAL_ADC_IRQHandler+0x12c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	e003      	b.n	80041f8 <HAL_ADC_IRQHandler+0x134>
 80041f0:	4b51      	ldr	r3, [pc, #324]	@ (8004338 <HAL_ADC_IRQHandler+0x274>)
 80041f2:	e001      	b.n	80041f8 <HAL_ADC_IRQHandler+0x134>
 80041f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80041f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d135      	bne.n	8004276 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0308 	and.w	r3, r3, #8
 8004214:	2b08      	cmp	r3, #8
 8004216:	d12e      	bne.n	8004276 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fa1f 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11a      	bne.n	800425e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685a      	ldr	r2, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 020c 	bic.w	r2, r2, #12
 8004236:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004248:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d112      	bne.n	8004276 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	f043 0201 	orr.w	r2, r3, #1
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800425c:	e00b      	b.n	8004276 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004262:	f043 0210 	orr.w	r2, r3, #16
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426e:	f043 0201 	orr.w	r2, r3, #1
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd ff6e 	bl	8002158 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	220c      	movs	r2, #12
 8004282:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d004      	beq.n	8004298 <HAL_ADC_IRQHandler+0x1d4>
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800429e:	2b00      	cmp	r3, #0
 80042a0:	f000 80b3 	beq.w	800440a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80ad 	beq.w	800440a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b4:	f003 0310 	and.w	r3, r3, #16
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff f898 	bl	8003402 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80042d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7ff f853 	bl	8003384 <LL_ADC_REG_IsTriggerSourceSWStart>
 80042de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a10      	ldr	r2, [pc, #64]	@ (8004328 <HAL_ADC_IRQHandler+0x264>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_ADC_IRQHandler+0x23a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a11      	ldr	r2, [pc, #68]	@ (8004334 <HAL_ADC_IRQHandler+0x270>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d002      	beq.n	80042fa <HAL_ADC_IRQHandler+0x236>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	e003      	b.n	8004302 <HAL_ADC_IRQHandler+0x23e>
 80042fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004338 <HAL_ADC_IRQHandler+0x274>)
 80042fc:	e001      	b.n	8004302 <HAL_ADC_IRQHandler+0x23e>
 80042fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	6812      	ldr	r2, [r2, #0]
 8004306:	4293      	cmp	r3, r2
 8004308:	d008      	beq.n	800431c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	2b06      	cmp	r3, #6
 8004314:	d002      	beq.n	800431c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	2b07      	cmp	r3, #7
 800431a:	d10f      	bne.n	800433c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	e01f      	b.n	8004366 <HAL_ADC_IRQHandler+0x2a2>
 8004326:	bf00      	nop
 8004328:	50000100 	.word	0x50000100
 800432c:	50000300 	.word	0x50000300
 8004330:	50000700 	.word	0x50000700
 8004334:	50000500 	.word	0x50000500
 8004338:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a8b      	ldr	r2, [pc, #556]	@ (8004570 <HAL_ADC_IRQHandler+0x4ac>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d009      	beq.n	800435a <HAL_ADC_IRQHandler+0x296>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a8a      	ldr	r2, [pc, #552]	@ (8004574 <HAL_ADC_IRQHandler+0x4b0>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d002      	beq.n	8004356 <HAL_ADC_IRQHandler+0x292>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	e003      	b.n	800435e <HAL_ADC_IRQHandler+0x29a>
 8004356:	4b88      	ldr	r3, [pc, #544]	@ (8004578 <HAL_ADC_IRQHandler+0x4b4>)
 8004358:	e001      	b.n	800435e <HAL_ADC_IRQHandler+0x29a>
 800435a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800435e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d047      	beq.n	80043fc <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_ADC_IRQHandler+0x2c2>
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d03f      	beq.n	80043fc <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004382:	2b00      	cmp	r3, #0
 8004384:	d13a      	bne.n	80043fc <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d133      	bne.n	80043fc <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d12e      	bne.n	80043fc <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff f96f 	bl	8003686 <LL_ADC_INJ_IsConversionOngoing>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11a      	bne.n	80043e4 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043bc:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d112      	bne.n	80043fc <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80043e2:	e00b      	b.n	80043fc <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043e8:	f043 0210 	orr.w	r2, r3, #16
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043f4:	f043 0201 	orr.w	r2, r3, #1
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 febf 	bl	8005180 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2260      	movs	r2, #96	@ 0x60
 8004408:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d011      	beq.n	8004438 <HAL_ADC_IRQHandler+0x374>
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004422:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f8aa 	bl	8004584 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	2280      	movs	r2, #128	@ 0x80
 8004436:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d012      	beq.n	8004468 <HAL_ADC_IRQHandler+0x3a4>
 8004442:	69bb      	ldr	r3, [r7, #24]
 8004444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004448:	2b00      	cmp	r3, #0
 800444a:	d00d      	beq.n	8004468 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004450:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fea5 	bl	80051a8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004466:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800446e:	2b00      	cmp	r3, #0
 8004470:	d012      	beq.n	8004498 <HAL_ADC_IRQHandler+0x3d4>
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004480:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8004488:	6878      	ldr	r0, [r7, #4]
 800448a:	f000 fe97 	bl	80051bc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004496:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0310 	and.w	r3, r3, #16
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d043      	beq.n	800452a <HAL_ADC_IRQHandler+0x466>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d03e      	beq.n	800452a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d102      	bne.n	80044ba <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 80044b4:	2301      	movs	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80044b8:	e021      	b.n	80044fe <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d015      	beq.n	80044ec <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044c8:	d004      	beq.n	80044d4 <HAL_ADC_IRQHandler+0x410>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a28      	ldr	r2, [pc, #160]	@ (8004570 <HAL_ADC_IRQHandler+0x4ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d101      	bne.n	80044d8 <HAL_ADC_IRQHandler+0x414>
 80044d4:	4b29      	ldr	r3, [pc, #164]	@ (800457c <HAL_ADC_IRQHandler+0x4b8>)
 80044d6:	e000      	b.n	80044da <HAL_ADC_IRQHandler+0x416>
 80044d8:	4b29      	ldr	r3, [pc, #164]	@ (8004580 <HAL_ADC_IRQHandler+0x4bc>)
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff f802 	bl	80034e4 <LL_ADC_GetMultiDMATransfer>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00b      	beq.n	80044fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80044e6:	2301      	movs	r3, #1
 80044e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ea:	e008      	b.n	80044fe <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 80044fa:	2301      	movs	r3, #1
 80044fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80044fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004500:	2b01      	cmp	r3, #1
 8004502:	d10e      	bne.n	8004522 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004508:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004514:	f043 0202 	orr.w	r2, r3, #2
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 f83b 	bl	8004598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2210      	movs	r2, #16
 8004528:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004530:	2b00      	cmp	r3, #0
 8004532:	d018      	beq.n	8004566 <HAL_ADC_IRQHandler+0x4a2>
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800453a:	2b00      	cmp	r3, #0
 800453c:	d013      	beq.n	8004566 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004542:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454e:	f043 0208 	orr.w	r2, r3, #8
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800455e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 fe17 	bl	8005194 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004566:	bf00      	nop
 8004568:	3728      	adds	r7, #40	@ 0x28
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	50000100 	.word	0x50000100
 8004574:	50000500 	.word	0x50000500
 8004578:	50000400 	.word	0x50000400
 800457c:	50000300 	.word	0x50000300
 8004580:	50000700 	.word	0x50000700

08004584 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004598:	b480      	push	{r7}
 800459a:	b083      	sub	sp, #12
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80045a0:	bf00      	nop
 80045a2:	370c      	adds	r7, #12
 80045a4:	46bd      	mov	sp, r7
 80045a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045aa:	4770      	bx	lr

080045ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b0b6      	sub	sp, #216	@ 0xd8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d102      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x24>
 80045ca:	2302      	movs	r3, #2
 80045cc:	f000 bc13 	b.w	8004df6 <HAL_ADC_ConfigChannel+0x84a>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2201      	movs	r2, #1
 80045d4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f7ff f83f 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f040 83f3 	bne.w	8004dd0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6818      	ldr	r0, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fe fed7 	bl	80033aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7ff f82d 	bl	8003660 <LL_ADC_REG_IsConversionOngoing>
 8004606:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff f839 	bl	8003686 <LL_ADC_INJ_IsConversionOngoing>
 8004614:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004618:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 81d9 	bne.w	80049d4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004622:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004626:	2b00      	cmp	r3, #0
 8004628:	f040 81d4 	bne.w	80049d4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004634:	d10f      	bne.n	8004656 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6818      	ldr	r0, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	4619      	mov	r1, r3
 8004642:	f7fe fef1 	bl	8003428 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800464e:	4618      	mov	r0, r3
 8004650:	f7fe fe85 	bl	800335e <LL_ADC_SetSamplingTimeCommonConfig>
 8004654:	e00e      	b.n	8004674 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6818      	ldr	r0, [r3, #0]
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	6819      	ldr	r1, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	689b      	ldr	r3, [r3, #8]
 8004662:	461a      	mov	r2, r3
 8004664:	f7fe fee0 	bl	8003428 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f7fe fe75 	bl	800335e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	08db      	lsrs	r3, r3, #3
 8004680:	f003 0303 	and.w	r3, r3, #3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b04      	cmp	r3, #4
 8004694:	d022      	beq.n	80046dc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6818      	ldr	r0, [r3, #0]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	6919      	ldr	r1, [r3, #16]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80046a6:	f7fe fdcf 	bl	8003248 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6919      	ldr	r1, [r3, #16]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f7fe fe1b 	bl	80032f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6818      	ldr	r0, [r3, #0]
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d102      	bne.n	80046d2 <HAL_ADC_ConfigChannel+0x126>
 80046cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046d0:	e000      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x128>
 80046d2:	2300      	movs	r3, #0
 80046d4:	461a      	mov	r2, r3
 80046d6:	f7fe fe27 	bl	8003328 <LL_ADC_SetOffsetSaturation>
 80046da:	e17b      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fe fdd4 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x15c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2100      	movs	r1, #0
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fdc9 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	0e9b      	lsrs	r3, r3, #26
 8004702:	f003 021f 	and.w	r2, r3, #31
 8004706:	e01e      	b.n	8004746 <HAL_ADC_ConfigChannel+0x19a>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe fdbe 	bl	8003290 <LL_ADC_GetOffsetChannel>
 8004714:	4603      	mov	r3, r0
 8004716:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800471a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800471e:	fa93 f3a3 	rbit	r3, r3
 8004722:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004726:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800472a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800472e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8004736:	2320      	movs	r3, #32
 8004738:	e004      	b.n	8004744 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800473a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800474e:	2b00      	cmp	r3, #0
 8004750:	d105      	bne.n	800475e <HAL_ADC_ConfigChannel+0x1b2>
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	0e9b      	lsrs	r3, r3, #26
 8004758:	f003 031f 	and.w	r3, r3, #31
 800475c:	e018      	b.n	8004790 <HAL_ADC_ConfigChannel+0x1e4>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004772:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004776:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800477a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004782:	2320      	movs	r3, #32
 8004784:	e004      	b.n	8004790 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8004786:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004790:	429a      	cmp	r2, r3
 8004792:	d106      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2200      	movs	r2, #0
 800479a:	2100      	movs	r1, #0
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fd8d 	bl	80032bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2101      	movs	r1, #1
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe fd71 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10a      	bne.n	80047ce <HAL_ADC_ConfigChannel+0x222>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2101      	movs	r1, #1
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fe fd66 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80047c4:	4603      	mov	r3, r0
 80047c6:	0e9b      	lsrs	r3, r3, #26
 80047c8:	f003 021f 	and.w	r2, r3, #31
 80047cc:	e01e      	b.n	800480c <HAL_ADC_ConfigChannel+0x260>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2101      	movs	r1, #1
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fd5b 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80047ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047f0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80047f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80047fc:	2320      	movs	r3, #32
 80047fe:	e004      	b.n	800480a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004800:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004804:	fab3 f383 	clz	r3, r3
 8004808:	b2db      	uxtb	r3, r3
 800480a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x278>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	0e9b      	lsrs	r3, r3, #26
 800481e:	f003 031f 	and.w	r3, r3, #31
 8004822:	e018      	b.n	8004856 <HAL_ADC_ConfigChannel+0x2aa>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8004838:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800483c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8004848:	2320      	movs	r3, #32
 800484a:	e004      	b.n	8004856 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800484c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004856:	429a      	cmp	r2, r3
 8004858:	d106      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2200      	movs	r2, #0
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fd2a 	bl	80032bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2102      	movs	r1, #2
 800486e:	4618      	mov	r0, r3
 8004870:	f7fe fd0e 	bl	8003290 <LL_ADC_GetOffsetChannel>
 8004874:	4603      	mov	r3, r0
 8004876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10a      	bne.n	8004894 <HAL_ADC_ConfigChannel+0x2e8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fd03 	bl	8003290 <LL_ADC_GetOffsetChannel>
 800488a:	4603      	mov	r3, r0
 800488c:	0e9b      	lsrs	r3, r3, #26
 800488e:	f003 021f 	and.w	r2, r3, #31
 8004892:	e01e      	b.n	80048d2 <HAL_ADC_ConfigChannel+0x326>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2102      	movs	r1, #2
 800489a:	4618      	mov	r0, r3
 800489c:	f7fe fcf8 	bl	8003290 <LL_ADC_GetOffsetChannel>
 80048a0:	4603      	mov	r3, r0
 80048a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80048b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80048ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80048c2:	2320      	movs	r3, #32
 80048c4:	e004      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80048c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d105      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x33e>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	0e9b      	lsrs	r3, r3, #26
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	e016      	b.n	8004918 <HAL_ADC_ConfigChannel+0x36c>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80048fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80048fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800490a:	2320      	movs	r3, #32
 800490c:	e004      	b.n	8004918 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800490e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004918:	429a      	cmp	r2, r3
 800491a:	d106      	bne.n	800492a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	2102      	movs	r1, #2
 8004924:	4618      	mov	r0, r3
 8004926:	f7fe fcc9 	bl	80032bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2103      	movs	r1, #3
 8004930:	4618      	mov	r0, r3
 8004932:	f7fe fcad 	bl	8003290 <LL_ADC_GetOffsetChannel>
 8004936:	4603      	mov	r3, r0
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	2b00      	cmp	r3, #0
 800493e:	d10a      	bne.n	8004956 <HAL_ADC_ConfigChannel+0x3aa>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2103      	movs	r1, #3
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fca2 	bl	8003290 <LL_ADC_GetOffsetChannel>
 800494c:	4603      	mov	r3, r0
 800494e:	0e9b      	lsrs	r3, r3, #26
 8004950:	f003 021f 	and.w	r2, r3, #31
 8004954:	e017      	b.n	8004986 <HAL_ADC_ConfigChannel+0x3da>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2103      	movs	r1, #3
 800495c:	4618      	mov	r0, r3
 800495e:	f7fe fc97 	bl	8003290 <LL_ADC_GetOffsetChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004968:	fa93 f3a3 	rbit	r3, r3
 800496c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800496e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004970:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004972:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004978:	2320      	movs	r3, #32
 800497a:	e003      	b.n	8004984 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800497c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800498e:	2b00      	cmp	r3, #0
 8004990:	d105      	bne.n	800499e <HAL_ADC_ConfigChannel+0x3f2>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	0e9b      	lsrs	r3, r3, #26
 8004998:	f003 031f 	and.w	r3, r3, #31
 800499c:	e011      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x416>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049a6:	fa93 f3a3 	rbit	r3, r3
 80049aa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80049ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80049b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80049b6:	2320      	movs	r3, #32
 80049b8:	e003      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80049ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d106      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	2103      	movs	r1, #3
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fc74 	bl	80032bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4618      	mov	r0, r3
 80049da:	f7fe fe07 	bl	80035ec <LL_ADC_IsEnabled>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f040 813d 	bne.w	8004c60 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6818      	ldr	r0, [r3, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	6819      	ldr	r1, [r3, #0]
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	461a      	mov	r2, r3
 80049f4:	f7fe fd44 	bl	8003480 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4aa2      	ldr	r2, [pc, #648]	@ (8004c88 <HAL_ADC_ConfigChannel+0x6dc>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	f040 812e 	bne.w	8004c60 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10b      	bne.n	8004a2c <HAL_ADC_ConfigChannel+0x480>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	0e9b      	lsrs	r3, r3, #26
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	f003 031f 	and.w	r3, r3, #31
 8004a20:	2b09      	cmp	r3, #9
 8004a22:	bf94      	ite	ls
 8004a24:	2301      	movls	r3, #1
 8004a26:	2300      	movhi	r3, #0
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	e019      	b.n	8004a60 <HAL_ADC_ConfigChannel+0x4b4>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004a34:	fa93 f3a3 	rbit	r3, r3
 8004a38:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004a3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a3c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004a44:	2320      	movs	r3, #32
 8004a46:	e003      	b.n	8004a50 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a4a:	fab3 f383 	clz	r3, r3
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2b09      	cmp	r3, #9
 8004a58:	bf94      	ite	ls
 8004a5a:	2301      	movls	r3, #1
 8004a5c:	2300      	movhi	r3, #0
 8004a5e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d079      	beq.n	8004b58 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d107      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x4d4>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	0e9b      	lsrs	r3, r3, #26
 8004a76:	3301      	adds	r3, #1
 8004a78:	069b      	lsls	r3, r3, #26
 8004a7a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004a7e:	e015      	b.n	8004aac <HAL_ADC_ConfigChannel+0x500>
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a88:	fa93 f3a3 	rbit	r3, r3
 8004a8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a90:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004a92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004a98:	2320      	movs	r3, #32
 8004a9a:	e003      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004a9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a9e:	fab3 f383 	clz	r3, r3
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	069b      	lsls	r3, r3, #26
 8004aa8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d109      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x520>
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	0e9b      	lsrs	r3, r3, #26
 8004abe:	3301      	adds	r3, #1
 8004ac0:	f003 031f 	and.w	r3, r3, #31
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	e017      	b.n	8004afc <HAL_ADC_ConfigChannel+0x550>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004ade:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	e003      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004ae8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	f003 031f 	and.w	r3, r3, #31
 8004af6:	2101      	movs	r1, #1
 8004af8:	fa01 f303 	lsl.w	r3, r1, r3
 8004afc:	ea42 0103 	orr.w	r1, r2, r3
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10a      	bne.n	8004b22 <HAL_ADC_ConfigChannel+0x576>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	0e9b      	lsrs	r3, r3, #26
 8004b12:	3301      	adds	r3, #1
 8004b14:	f003 021f 	and.w	r2, r3, #31
 8004b18:	4613      	mov	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	051b      	lsls	r3, r3, #20
 8004b20:	e018      	b.n	8004b54 <HAL_ADC_ConfigChannel+0x5a8>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	fa93 f3a3 	rbit	r3, r3
 8004b2e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004b34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004b3a:	2320      	movs	r3, #32
 8004b3c:	e003      	b.n	8004b46 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b40:	fab3 f383 	clz	r3, r3
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	3301      	adds	r3, #1
 8004b48:	f003 021f 	and.w	r2, r3, #31
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	005b      	lsls	r3, r3, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b54:	430b      	orrs	r3, r1
 8004b56:	e07e      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d107      	bne.n	8004b74 <HAL_ADC_ConfigChannel+0x5c8>
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	0e9b      	lsrs	r3, r3, #26
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	069b      	lsls	r3, r3, #26
 8004b6e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b72:	e015      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x5f4>
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b7c:	fa93 f3a3 	rbit	r3, r3
 8004b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004b86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	e003      	b.n	8004b98 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b92:	fab3 f383 	clz	r3, r3
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	3301      	adds	r3, #1
 8004b9a:	069b      	lsls	r3, r3, #26
 8004b9c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d109      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x614>
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	0e9b      	lsrs	r3, r3, #26
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	f003 031f 	and.w	r3, r3, #31
 8004bb8:	2101      	movs	r1, #1
 8004bba:	fa01 f303 	lsl.w	r3, r1, r3
 8004bbe:	e017      	b.n	8004bf0 <HAL_ADC_ConfigChannel+0x644>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	61fb      	str	r3, [r7, #28]
  return result;
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	e003      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f003 031f 	and.w	r3, r3, #31
 8004bea:	2101      	movs	r1, #1
 8004bec:	fa01 f303 	lsl.w	r3, r1, r3
 8004bf0:	ea42 0103 	orr.w	r1, r2, r3
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d10d      	bne.n	8004c1c <HAL_ADC_ConfigChannel+0x670>
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	0e9b      	lsrs	r3, r3, #26
 8004c06:	3301      	adds	r3, #1
 8004c08:	f003 021f 	and.w	r2, r3, #31
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	005b      	lsls	r3, r3, #1
 8004c10:	4413      	add	r3, r2
 8004c12:	3b1e      	subs	r3, #30
 8004c14:	051b      	lsls	r3, r3, #20
 8004c16:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	e01b      	b.n	8004c54 <HAL_ADC_ConfigChannel+0x6a8>
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	fa93 f3a3 	rbit	r3, r3
 8004c28:	613b      	str	r3, [r7, #16]
  return result;
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004c34:	2320      	movs	r3, #32
 8004c36:	e003      	b.n	8004c40 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	fab3 f383 	clz	r3, r3
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	3301      	adds	r3, #1
 8004c42:	f003 021f 	and.w	r2, r3, #31
 8004c46:	4613      	mov	r3, r2
 8004c48:	005b      	lsls	r3, r3, #1
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3b1e      	subs	r3, #30
 8004c4e:	051b      	lsls	r3, r3, #20
 8004c50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c54:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	f7fe fbe4 	bl	8003428 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4b09      	ldr	r3, [pc, #36]	@ (8004c8c <HAL_ADC_ConfigChannel+0x6e0>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 80be 	beq.w	8004dea <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c76:	d004      	beq.n	8004c82 <HAL_ADC_ConfigChannel+0x6d6>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a04      	ldr	r2, [pc, #16]	@ (8004c90 <HAL_ADC_ConfigChannel+0x6e4>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10a      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x6ec>
 8004c82:	4b04      	ldr	r3, [pc, #16]	@ (8004c94 <HAL_ADC_ConfigChannel+0x6e8>)
 8004c84:	e009      	b.n	8004c9a <HAL_ADC_ConfigChannel+0x6ee>
 8004c86:	bf00      	nop
 8004c88:	407f0000 	.word	0x407f0000
 8004c8c:	80080000 	.word	0x80080000
 8004c90:	50000100 	.word	0x50000100
 8004c94:	50000300 	.word	0x50000300
 8004c98:	4b59      	ldr	r3, [pc, #356]	@ (8004e00 <HAL_ADC_ConfigChannel+0x854>)
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fac6 	bl	800322c <LL_ADC_GetCommonPathInternalCh>
 8004ca0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a56      	ldr	r2, [pc, #344]	@ (8004e04 <HAL_ADC_ConfigChannel+0x858>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d004      	beq.n	8004cb8 <HAL_ADC_ConfigChannel+0x70c>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a55      	ldr	r2, [pc, #340]	@ (8004e08 <HAL_ADC_ConfigChannel+0x85c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d13a      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cbc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d134      	bne.n	8004d2e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ccc:	d005      	beq.n	8004cda <HAL_ADC_ConfigChannel+0x72e>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a4e      	ldr	r2, [pc, #312]	@ (8004e0c <HAL_ADC_ConfigChannel+0x860>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	f040 8085 	bne.w	8004de4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ce2:	d004      	beq.n	8004cee <HAL_ADC_ConfigChannel+0x742>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a49      	ldr	r2, [pc, #292]	@ (8004e10 <HAL_ADC_ConfigChannel+0x864>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d101      	bne.n	8004cf2 <HAL_ADC_ConfigChannel+0x746>
 8004cee:	4a49      	ldr	r2, [pc, #292]	@ (8004e14 <HAL_ADC_ConfigChannel+0x868>)
 8004cf0:	e000      	b.n	8004cf4 <HAL_ADC_ConfigChannel+0x748>
 8004cf2:	4a43      	ldr	r2, [pc, #268]	@ (8004e00 <HAL_ADC_ConfigChannel+0x854>)
 8004cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004cf8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f7fe fa81 	bl	8003206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004d04:	4b44      	ldr	r3, [pc, #272]	@ (8004e18 <HAL_ADC_ConfigChannel+0x86c>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	099b      	lsrs	r3, r3, #6
 8004d0a:	4a44      	ldr	r2, [pc, #272]	@ (8004e1c <HAL_ADC_ConfigChannel+0x870>)
 8004d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d10:	099b      	lsrs	r3, r3, #6
 8004d12:	1c5a      	adds	r2, r3, #1
 8004d14:	4613      	mov	r3, r2
 8004d16:	005b      	lsls	r3, r3, #1
 8004d18:	4413      	add	r3, r2
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d1e:	e002      	b.n	8004d26 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f9      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d2c:	e05a      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a3b      	ldr	r2, [pc, #236]	@ (8004e20 <HAL_ADC_ConfigChannel+0x874>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d125      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d38:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d3c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11f      	bne.n	8004d84 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a31      	ldr	r2, [pc, #196]	@ (8004e10 <HAL_ADC_ConfigChannel+0x864>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d104      	bne.n	8004d58 <HAL_ADC_ConfigChannel+0x7ac>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a34      	ldr	r2, [pc, #208]	@ (8004e24 <HAL_ADC_ConfigChannel+0x878>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d047      	beq.n	8004de8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d60:	d004      	beq.n	8004d6c <HAL_ADC_ConfigChannel+0x7c0>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2a      	ldr	r2, [pc, #168]	@ (8004e10 <HAL_ADC_ConfigChannel+0x864>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d101      	bne.n	8004d70 <HAL_ADC_ConfigChannel+0x7c4>
 8004d6c:	4a29      	ldr	r2, [pc, #164]	@ (8004e14 <HAL_ADC_ConfigChannel+0x868>)
 8004d6e:	e000      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x7c6>
 8004d70:	4a23      	ldr	r2, [pc, #140]	@ (8004e00 <HAL_ADC_ConfigChannel+0x854>)
 8004d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	4610      	mov	r0, r2
 8004d7e:	f7fe fa42 	bl	8003206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d82:	e031      	b.n	8004de8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a27      	ldr	r2, [pc, #156]	@ (8004e28 <HAL_ADC_ConfigChannel+0x87c>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d12d      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d127      	bne.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8004e10 <HAL_ADC_ConfigChannel+0x864>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d022      	beq.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004dac:	d004      	beq.n	8004db8 <HAL_ADC_ConfigChannel+0x80c>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a17      	ldr	r2, [pc, #92]	@ (8004e10 <HAL_ADC_ConfigChannel+0x864>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_ADC_ConfigChannel+0x810>
 8004db8:	4a16      	ldr	r2, [pc, #88]	@ (8004e14 <HAL_ADC_ConfigChannel+0x868>)
 8004dba:	e000      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x812>
 8004dbc:	4a10      	ldr	r2, [pc, #64]	@ (8004e00 <HAL_ADC_ConfigChannel+0x854>)
 8004dbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004dc2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4610      	mov	r0, r2
 8004dca:	f7fe fa1c 	bl	8003206 <LL_ADC_SetCommonPathInternalCh>
 8004dce:	e00c      	b.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	f043 0220 	orr.w	r2, r3, #32
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004de2:	e002      	b.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de4:	bf00      	nop
 8004de6:	e000      	b.n	8004dea <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004de8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004df2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	37d8      	adds	r7, #216	@ 0xd8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	50000700 	.word	0x50000700
 8004e04:	c3210000 	.word	0xc3210000
 8004e08:	90c00010 	.word	0x90c00010
 8004e0c:	50000600 	.word	0x50000600
 8004e10:	50000100 	.word	0x50000100
 8004e14:	50000300 	.word	0x50000300
 8004e18:	20000014 	.word	0x20000014
 8004e1c:	053e2d63 	.word	0x053e2d63
 8004e20:	c7520000 	.word	0xc7520000
 8004e24:	50000500 	.word	0x50000500
 8004e28:	cb840000 	.word	0xcb840000

08004e2c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004e34:	2300      	movs	r3, #0
 8004e36:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fe fbd5 	bl	80035ec <LL_ADC_IsEnabled>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d176      	bne.n	8004f36 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	4b3c      	ldr	r3, [pc, #240]	@ (8004f40 <ADC_Enable+0x114>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00d      	beq.n	8004e72 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5a:	f043 0210 	orr.w	r2, r3, #16
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e66:	f043 0201 	orr.w	r2, r3, #1
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e062      	b.n	8004f38 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fb90 	bl	800359c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e84:	d004      	beq.n	8004e90 <ADC_Enable+0x64>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8004f44 <ADC_Enable+0x118>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <ADC_Enable+0x68>
 8004e90:	4b2d      	ldr	r3, [pc, #180]	@ (8004f48 <ADC_Enable+0x11c>)
 8004e92:	e000      	b.n	8004e96 <ADC_Enable+0x6a>
 8004e94:	4b2d      	ldr	r3, [pc, #180]	@ (8004f4c <ADC_Enable+0x120>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f7fe f9c8 	bl	800322c <LL_ADC_GetCommonPathInternalCh>
 8004e9c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d013      	beq.n	8004ece <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004ea6:	4b2a      	ldr	r3, [pc, #168]	@ (8004f50 <ADC_Enable+0x124>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	099b      	lsrs	r3, r3, #6
 8004eac:	4a29      	ldr	r2, [pc, #164]	@ (8004f54 <ADC_Enable+0x128>)
 8004eae:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	1c5a      	adds	r2, r3, #1
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	4413      	add	r3, r2
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ec0:	e002      	b.n	8004ec8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f9      	bne.n	8004ec2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ece:	f7fe f959 	bl	8003184 <HAL_GetTick>
 8004ed2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004ed4:	e028      	b.n	8004f28 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7fe fb86 	bl	80035ec <LL_ADC_IsEnabled>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d104      	bne.n	8004ef0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7fe fb56 	bl	800359c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ef0:	f7fe f948 	bl	8003184 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	d914      	bls.n	8004f28 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d00d      	beq.n	8004f28 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	f043 0210 	orr.w	r2, r3, #16
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1c:	f043 0201 	orr.w	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e007      	b.n	8004f38 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d1cf      	bne.n	8004ed6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004f36:	2300      	movs	r3, #0
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	8000003f 	.word	0x8000003f
 8004f44:	50000100 	.word	0x50000100
 8004f48:	50000300 	.word	0x50000300
 8004f4c:	50000700 	.word	0x50000700
 8004f50:	20000014 	.word	0x20000014
 8004f54:	053e2d63 	.word	0x053e2d63

08004f58 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe fb54 	bl	8003612 <LL_ADC_IsDisableOngoing>
 8004f6a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fb3b 	bl	80035ec <LL_ADC_IsEnabled>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d047      	beq.n	800500c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d144      	bne.n	800500c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030d 	and.w	r3, r3, #13
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d10c      	bne.n	8004faa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fe fb15 	bl	80035c4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2203      	movs	r2, #3
 8004fa0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004fa2:	f7fe f8ef 	bl	8003184 <HAL_GetTick>
 8004fa6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fa8:	e029      	b.n	8004ffe <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fae:	f043 0210 	orr.w	r2, r3, #16
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e023      	b.n	800500e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004fc6:	f7fe f8dd 	bl	8003184 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d914      	bls.n	8004ffe <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00d      	beq.n	8004ffe <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fe6:	f043 0210 	orr.w	r2, r3, #16
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff2:	f043 0201 	orr.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e007      	b.n	800500e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1dc      	bne.n	8004fc6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <LL_ADC_IsEnabled>:
{
 8005016:	b480      	push	{r7}
 8005018:	b083      	sub	sp, #12
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <LL_ADC_IsEnabled+0x18>
 800502a:	2301      	movs	r3, #1
 800502c:	e000      	b.n	8005030 <LL_ADC_IsEnabled+0x1a>
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <LL_ADC_StartCalibration>:
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800504e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005058:	4313      	orrs	r3, r2
 800505a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	609a      	str	r2, [r3, #8]
}
 8005062:	bf00      	nop
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr

0800506e <LL_ADC_IsCalibrationOnGoing>:
{
 800506e:	b480      	push	{r7}
 8005070:	b083      	sub	sp, #12
 8005072:	af00      	add	r7, sp, #0
 8005074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800507e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005082:	d101      	bne.n	8005088 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <LL_ADC_REG_IsConversionOngoing>:
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d101      	bne.n	80050ae <LL_ADC_REG_IsConversionOngoing+0x18>
 80050aa:	2301      	movs	r3, #1
 80050ac:	e000      	b.n	80050b0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d101      	bne.n	80050d8 <HAL_ADCEx_Calibration_Start+0x1c>
 80050d4:	2302      	movs	r3, #2
 80050d6:	e04d      	b.n	8005174 <HAL_ADCEx_Calibration_Start+0xb8>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f7ff ff39 	bl	8004f58 <ADC_Disable>
 80050e6:	4603      	mov	r3, r0
 80050e8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d136      	bne.n	800515e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050f4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80050f8:	f023 0302 	bic.w	r3, r3, #2
 80050fc:	f043 0202 	orr.w	r2, r3, #2
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff96 	bl	800503c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005110:	e014      	b.n	800513c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	3301      	adds	r3, #1
 8005116:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_ADCEx_Calibration_Start+0xc0>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d90d      	bls.n	800513c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005124:	f023 0312 	bic.w	r3, r3, #18
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e01b      	b.n	8005174 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff94 	bl	800506e <LL_ADC_IsCalibrationOnGoing>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e2      	bne.n	8005112 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005150:	f023 0303 	bic.w	r3, r3, #3
 8005154:	f043 0201 	orr.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800515c:	e005      	b.n	800516a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005162:	f043 0210 	orr.w	r2, r3, #16
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	0004de01 	.word	0x0004de01

08005180 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b083      	sub	sp, #12
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80051e4:	b590      	push	{r4, r7, lr}
 80051e6:	b0a1      	sub	sp, #132	@ 0x84
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d101      	bne.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80051fe:	2302      	movs	r3, #2
 8005200:	e0e7      	b.n	80053d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800520a:	2300      	movs	r3, #0
 800520c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800520e:	2300      	movs	r3, #0
 8005210:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800521a:	d102      	bne.n	8005222 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800521c:	4b6f      	ldr	r3, [pc, #444]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	e009      	b.n	8005236 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a6e      	ldr	r2, [pc, #440]	@ (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d102      	bne.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800522c:	4b6d      	ldr	r3, [pc, #436]	@ (80053e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	e001      	b.n	8005236 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10b      	bne.n	8005254 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005240:	f043 0220 	orr.w	r2, r3, #32
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e0be      	b.n	80053d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f7ff ff1d 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 800525c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4618      	mov	r0, r3
 8005264:	f7ff ff17 	bl	8005096 <LL_ADC_REG_IsConversionOngoing>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	f040 80a0 	bne.w	80053b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8005270:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 809c 	bne.w	80053b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005280:	d004      	beq.n	800528c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a55      	ldr	r2, [pc, #340]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d101      	bne.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800528c:	4b56      	ldr	r3, [pc, #344]	@ (80053e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800528e:	e000      	b.n	8005292 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8005290:	4b56      	ldr	r3, [pc, #344]	@ (80053ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8005292:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d04b      	beq.n	8005334 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800529c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	6859      	ldr	r1, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80052ae:	035b      	lsls	r3, r3, #13
 80052b0:	430b      	orrs	r3, r1
 80052b2:	431a      	orrs	r2, r3
 80052b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052c0:	d004      	beq.n	80052cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a45      	ldr	r2, [pc, #276]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10f      	bne.n	80052ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80052cc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80052d0:	f7ff fea1 	bl	8005016 <LL_ADC_IsEnabled>
 80052d4:	4604      	mov	r4, r0
 80052d6:	4841      	ldr	r0, [pc, #260]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80052d8:	f7ff fe9d 	bl	8005016 <LL_ADC_IsEnabled>
 80052dc:	4603      	mov	r3, r0
 80052de:	4323      	orrs	r3, r4
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	bf0c      	ite	eq
 80052e4:	2301      	moveq	r3, #1
 80052e6:	2300      	movne	r3, #0
 80052e8:	b2db      	uxtb	r3, r3
 80052ea:	e012      	b.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80052ec:	483c      	ldr	r0, [pc, #240]	@ (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80052ee:	f7ff fe92 	bl	8005016 <LL_ADC_IsEnabled>
 80052f2:	4604      	mov	r4, r0
 80052f4:	483b      	ldr	r0, [pc, #236]	@ (80053e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80052f6:	f7ff fe8e 	bl	8005016 <LL_ADC_IsEnabled>
 80052fa:	4603      	mov	r3, r0
 80052fc:	431c      	orrs	r4, r3
 80052fe:	483c      	ldr	r0, [pc, #240]	@ (80053f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005300:	f7ff fe89 	bl	8005016 <LL_ADC_IsEnabled>
 8005304:	4603      	mov	r3, r0
 8005306:	4323      	orrs	r3, r4
 8005308:	2b00      	cmp	r3, #0
 800530a:	bf0c      	ite	eq
 800530c:	2301      	moveq	r3, #1
 800530e:	2300      	movne	r3, #0
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d056      	beq.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005316:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800531e:	f023 030f 	bic.w	r3, r3, #15
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	6892      	ldr	r2, [r2, #8]
 800532a:	430a      	orrs	r2, r1
 800532c:	431a      	orrs	r2, r3
 800532e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005330:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005332:	e047      	b.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800533c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800533e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005348:	d004      	beq.n	8005354 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a23      	ldr	r2, [pc, #140]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d10f      	bne.n	8005374 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8005354:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005358:	f7ff fe5d 	bl	8005016 <LL_ADC_IsEnabled>
 800535c:	4604      	mov	r4, r0
 800535e:	481f      	ldr	r0, [pc, #124]	@ (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8005360:	f7ff fe59 	bl	8005016 <LL_ADC_IsEnabled>
 8005364:	4603      	mov	r3, r0
 8005366:	4323      	orrs	r3, r4
 8005368:	2b00      	cmp	r3, #0
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	e012      	b.n	800539a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005374:	481a      	ldr	r0, [pc, #104]	@ (80053e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8005376:	f7ff fe4e 	bl	8005016 <LL_ADC_IsEnabled>
 800537a:	4604      	mov	r4, r0
 800537c:	4819      	ldr	r0, [pc, #100]	@ (80053e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800537e:	f7ff fe4a 	bl	8005016 <LL_ADC_IsEnabled>
 8005382:	4603      	mov	r3, r0
 8005384:	431c      	orrs	r4, r3
 8005386:	481a      	ldr	r0, [pc, #104]	@ (80053f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8005388:	f7ff fe45 	bl	8005016 <LL_ADC_IsEnabled>
 800538c:	4603      	mov	r3, r0
 800538e:	4323      	orrs	r3, r4
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d012      	beq.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800539e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80053a6:	f023 030f 	bic.w	r3, r3, #15
 80053aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80053ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053ae:	e009      	b.n	80053c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80053c2:	e000      	b.n	80053c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80053c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2200      	movs	r2, #0
 80053ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80053ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3784      	adds	r7, #132	@ 0x84
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd90      	pop	{r4, r7, pc}
 80053da:	bf00      	nop
 80053dc:	50000100 	.word	0x50000100
 80053e0:	50000400 	.word	0x50000400
 80053e4:	50000500 	.word	0x50000500
 80053e8:	50000300 	.word	0x50000300
 80053ec:	50000700 	.word	0x50000700
 80053f0:	50000600 	.word	0x50000600

080053f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f003 0307 	and.w	r3, r3, #7
 8005402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005404:	4b0c      	ldr	r3, [pc, #48]	@ (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005410:	4013      	ands	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800541c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005426:	4a04      	ldr	r2, [pc, #16]	@ (8005438 <__NVIC_SetPriorityGrouping+0x44>)
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	60d3      	str	r3, [r2, #12]
}
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	e000ed00 	.word	0xe000ed00

0800543c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800543c:	b480      	push	{r7}
 800543e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005440:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <__NVIC_GetPriorityGrouping+0x18>)
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	0a1b      	lsrs	r3, r3, #8
 8005446:	f003 0307 	and.w	r3, r3, #7
}
 800544a:	4618      	mov	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr
 8005454:	e000ed00 	.word	0xe000ed00

08005458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	4603      	mov	r3, r0
 8005460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005466:	2b00      	cmp	r3, #0
 8005468:	db0b      	blt.n	8005482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800546a:	79fb      	ldrb	r3, [r7, #7]
 800546c:	f003 021f 	and.w	r2, r3, #31
 8005470:	4907      	ldr	r1, [pc, #28]	@ (8005490 <__NVIC_EnableIRQ+0x38>)
 8005472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2001      	movs	r0, #1
 800547a:	fa00 f202 	lsl.w	r2, r0, r2
 800547e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	e000e100 	.word	0xe000e100

08005494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	4603      	mov	r3, r0
 800549c:	6039      	str	r1, [r7, #0]
 800549e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	db0a      	blt.n	80054be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	490c      	ldr	r1, [pc, #48]	@ (80054e0 <__NVIC_SetPriority+0x4c>)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	440b      	add	r3, r1
 80054b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054bc:	e00a      	b.n	80054d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4908      	ldr	r1, [pc, #32]	@ (80054e4 <__NVIC_SetPriority+0x50>)
 80054c4:	79fb      	ldrb	r3, [r7, #7]
 80054c6:	f003 030f 	and.w	r3, r3, #15
 80054ca:	3b04      	subs	r3, #4
 80054cc:	0112      	lsls	r2, r2, #4
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	440b      	add	r3, r1
 80054d2:	761a      	strb	r2, [r3, #24]
}
 80054d4:	bf00      	nop
 80054d6:	370c      	adds	r7, #12
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	e000e100 	.word	0xe000e100
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b089      	sub	sp, #36	@ 0x24
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f003 0307 	and.w	r3, r3, #7
 80054fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	f1c3 0307 	rsb	r3, r3, #7
 8005502:	2b04      	cmp	r3, #4
 8005504:	bf28      	it	cs
 8005506:	2304      	movcs	r3, #4
 8005508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	3304      	adds	r3, #4
 800550e:	2b06      	cmp	r3, #6
 8005510:	d902      	bls.n	8005518 <NVIC_EncodePriority+0x30>
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3b03      	subs	r3, #3
 8005516:	e000      	b.n	800551a <NVIC_EncodePriority+0x32>
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800551c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fa02 f303 	lsl.w	r3, r2, r3
 8005526:	43da      	mvns	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	401a      	ands	r2, r3
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005530:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	fa01 f303 	lsl.w	r3, r1, r3
 800553a:	43d9      	mvns	r1, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005540:	4313      	orrs	r3, r2
         );
}
 8005542:	4618      	mov	r0, r3
 8005544:	3724      	adds	r7, #36	@ 0x24
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005560:	d301      	bcc.n	8005566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005562:	2301      	movs	r3, #1
 8005564:	e00f      	b.n	8005586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005566:	4a0a      	ldr	r2, [pc, #40]	@ (8005590 <SysTick_Config+0x40>)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	3b01      	subs	r3, #1
 800556c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800556e:	210f      	movs	r1, #15
 8005570:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005574:	f7ff ff8e 	bl	8005494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005578:	4b05      	ldr	r3, [pc, #20]	@ (8005590 <SysTick_Config+0x40>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800557e:	4b04      	ldr	r3, [pc, #16]	@ (8005590 <SysTick_Config+0x40>)
 8005580:	2207      	movs	r2, #7
 8005582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005584:	2300      	movs	r3, #0
}
 8005586:	4618      	mov	r0, r3
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	e000e010 	.word	0xe000e010

08005594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff ff29 	bl	80053f4 <__NVIC_SetPriorityGrouping>
}
 80055a2:	bf00      	nop
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b086      	sub	sp, #24
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	4603      	mov	r3, r0
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055b8:	f7ff ff40 	bl	800543c <__NVIC_GetPriorityGrouping>
 80055bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	6978      	ldr	r0, [r7, #20]
 80055c4:	f7ff ff90 	bl	80054e8 <NVIC_EncodePriority>
 80055c8:	4602      	mov	r2, r0
 80055ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055ce:	4611      	mov	r1, r2
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff5f 	bl	8005494 <__NVIC_SetPriority>
}
 80055d6:	bf00      	nop
 80055d8:	3718      	adds	r7, #24
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	4603      	mov	r3, r0
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f7ff ff33 	bl	8005458 <__NVIC_EnableIRQ>
}
 80055f2:	bf00      	nop
 80055f4:	3708      	adds	r7, #8
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff ffa4 	bl	8005550 <SysTick_Config>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005612:	b580      	push	{r7, lr}
 8005614:	b084      	sub	sp, #16
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d00d      	beq.n	8005646 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2204      	movs	r2, #4
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	73fb      	strb	r3, [r7, #15]
 8005644:	e047      	b.n	80056d6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 020e 	bic.w	r2, r2, #14
 8005654:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005674:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800567a:	f003 021f 	and.w	r2, r3, #31
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005682:	2101      	movs	r1, #1
 8005684:	fa01 f202 	lsl.w	r2, r1, r2
 8005688:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005692:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00c      	beq.n	80056b6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80056aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80056b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
    }
  }
  return status;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80056ee:	b2db      	uxtb	r3, r3
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e147      	b.n	800599e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd f87e 	bl	8002824 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	699a      	ldr	r2, [r3, #24]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0210 	bic.w	r2, r2, #16
 8005736:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005738:	f7fd fd24 	bl	8003184 <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800573e:	e012      	b.n	8005766 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005740:	f7fd fd20 	bl	8003184 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b0a      	cmp	r3, #10
 800574c:	d90b      	bls.n	8005766 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2203      	movs	r2, #3
 800575e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e11b      	b.n	800599e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b08      	cmp	r3, #8
 8005772:	d0e5      	beq.n	8005740 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f042 0201 	orr.w	r2, r2, #1
 8005782:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005784:	f7fd fcfe 	bl	8003184 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800578a:	e012      	b.n	80057b2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800578c:	f7fd fcfa 	bl	8003184 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	2b0a      	cmp	r3, #10
 8005798:	d90b      	bls.n	80057b2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800579e:	f043 0201 	orr.w	r2, r3, #1
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2203      	movs	r2, #3
 80057aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e0f5      	b.n	800599e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d0e5      	beq.n	800578c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	699a      	ldr	r2, [r3, #24]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0202 	orr.w	r2, r2, #2
 80057ce:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a74      	ldr	r2, [pc, #464]	@ (80059a8 <HAL_FDCAN_Init+0x2ac>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d103      	bne.n	80057e2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80057da:	4a74      	ldr	r2, [pc, #464]	@ (80059ac <HAL_FDCAN_Init+0x2b0>)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	7c1b      	ldrb	r3, [r3, #16]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d108      	bne.n	80057fc <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	699a      	ldr	r2, [r3, #24]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057f8:	619a      	str	r2, [r3, #24]
 80057fa:	e007      	b.n	800580c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800580a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	7c5b      	ldrb	r3, [r3, #17]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d108      	bne.n	8005826 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	699a      	ldr	r2, [r3, #24]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005822:	619a      	str	r2, [r3, #24]
 8005824:	e007      	b.n	8005836 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	699a      	ldr	r2, [r3, #24]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005834:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	7c9b      	ldrb	r3, [r3, #18]
 800583a:	2b01      	cmp	r3, #1
 800583c:	d108      	bne.n	8005850 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	699a      	ldr	r2, [r3, #24]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800584c:	619a      	str	r2, [r3, #24]
 800584e:	e007      	b.n	8005860 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	699a      	ldr	r2, [r3, #24]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800585e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	689a      	ldr	r2, [r3, #8]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	430a      	orrs	r2, r1
 8005874:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	699a      	ldr	r2, [r3, #24]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005884:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	691a      	ldr	r2, [r3, #16]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0210 	bic.w	r2, r2, #16
 8005894:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	2b01      	cmp	r3, #1
 800589c:	d108      	bne.n	80058b0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f042 0204 	orr.w	r2, r2, #4
 80058ac:	619a      	str	r2, [r3, #24]
 80058ae:	e02c      	b.n	800590a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d028      	beq.n	800590a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d01c      	beq.n	80058fa <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	699a      	ldr	r2, [r3, #24]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058ce:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0210 	orr.w	r2, r2, #16
 80058de:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	2b03      	cmp	r3, #3
 80058e6:	d110      	bne.n	800590a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0220 	orr.w	r2, r2, #32
 80058f6:	619a      	str	r2, [r3, #24]
 80058f8:	e007      	b.n	800590a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	699a      	ldr	r2, [r3, #24]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f042 0220 	orr.w	r2, r2, #32
 8005908:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	3b01      	subs	r3, #1
 8005910:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	3b01      	subs	r3, #1
 8005918:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800591a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005922:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	695b      	ldr	r3, [r3, #20]
 800592a:	3b01      	subs	r3, #1
 800592c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005932:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005934:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800593e:	d115      	bne.n	800596c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005944:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800594a:	3b01      	subs	r3, #1
 800594c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800594e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005954:	3b01      	subs	r3, #1
 8005956:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005958:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	3b01      	subs	r3, #1
 8005962:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005968:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800596a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	430a      	orrs	r2, r1
 800597e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f9b0 	bl	8005ce8 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3710      	adds	r7, #16
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	40006400 	.word	0x40006400
 80059ac:	40006500 	.word	0x40006500

080059b0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b08c      	sub	sp, #48	@ 0x30
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059be:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80059c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059cc:	4013      	ands	r3, r2
 80059ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059e4:	4013      	ands	r3, r2
 80059e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059fc:	4013      	ands	r3, r2
 80059fe:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a06:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005a0a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a12:	6a3a      	ldr	r2, [r7, #32]
 8005a14:	4013      	ands	r3, r2
 8005a16:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a1e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005a22:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a2a:	69fa      	ldr	r2, [r7, #28]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a36:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a3e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	099b      	lsrs	r3, r3, #6
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00c      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0xb6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	099b      	lsrs	r3, r3, #6
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d006      	beq.n	8005a66 <HAL_FDCAN_IRQHandler+0xb6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2240      	movs	r2, #64	@ 0x40
 8005a5e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f922 	bl	8005caa <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	0a1b      	lsrs	r3, r3, #8
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01a      	beq.n	8005aa8 <HAL_FDCAN_IRQHandler+0xf8>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	0a1b      	lsrs	r3, r3, #8
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d014      	beq.n	8005aa8 <HAL_FDCAN_IRQHandler+0xf8>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8005a86:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	4013      	ands	r3, r2
 8005a94:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a9e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005aa0:	6939      	ldr	r1, [r7, #16]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f8e2 	bl	8005c6c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d007      	beq.n	8005abe <HAL_FDCAN_IRQHandler+0x10e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ab4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005ab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f000 f8ac 	bl	8005c16 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_FDCAN_IRQHandler+0x124>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005aca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005acc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f7fc fc36 	bl	8002340 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d007      	beq.n	8005aea <HAL_FDCAN_IRQHandler+0x13a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f8a1 	bl	8005c2c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	0a5b      	lsrs	r3, r3, #9
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00d      	beq.n	8005b12 <HAL_FDCAN_IRQHandler+0x162>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	0a5b      	lsrs	r3, r3, #9
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_FDCAN_IRQHandler+0x162>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b0a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f898 	bl	8005c42 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	09db      	lsrs	r3, r3, #7
 8005b16:	f003 0301 	and.w	r3, r3, #1
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d019      	beq.n	8005b52 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8005b1e:	69bb      	ldr	r3, [r7, #24]
 8005b20:	09db      	lsrs	r3, r3, #7
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d013      	beq.n	8005b52 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8005b32:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8005b3c:	68fa      	ldr	r2, [r7, #12]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2280      	movs	r2, #128	@ 0x80
 8005b48:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005b4a:	68f9      	ldr	r1, [r7, #12]
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 f882 	bl	8005c56 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	0b5b      	lsrs	r3, r3, #13
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <HAL_FDCAN_IRQHandler+0x1ca>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	0b5b      	lsrs	r3, r3, #13
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d007      	beq.n	8005b7a <HAL_FDCAN_IRQHandler+0x1ca>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005b72:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f884 	bl	8005c82 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	0bdb      	lsrs	r3, r3, #15
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <HAL_FDCAN_IRQHandler+0x1f2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005b86:	69bb      	ldr	r3, [r7, #24]
 8005b88:	0bdb      	lsrs	r3, r3, #15
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_FDCAN_IRQHandler+0x1f2>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005b9a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f87a 	bl	8005c96 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	0b9b      	lsrs	r3, r3, #14
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d010      	beq.n	8005bd0 <HAL_FDCAN_IRQHandler+0x220>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	0b9b      	lsrs	r3, r3, #14
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_FDCAN_IRQHandler+0x220>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005bc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005bc8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005bd0:	69fb      	ldr	r3, [r7, #28]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d007      	beq.n	8005be6 <HAL_FDCAN_IRQHandler+0x236>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	69fa      	ldr	r2, [r7, #28]
 8005bdc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005bde:	69f9      	ldr	r1, [r7, #28]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f876 	bl	8005cd2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005be6:	6a3b      	ldr	r3, [r7, #32]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d009      	beq.n	8005c00 <HAL_FDCAN_IRQHandler+0x250>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	431a      	orrs	r2, r3
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d002      	beq.n	8005c0e <HAL_FDCAN_IRQHandler+0x25e>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f000 f858 	bl	8005cbe <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005c0e:	bf00      	nop
 8005c10:	3730      	adds	r7, #48	@ 0x30
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005c16:	b480      	push	{r7}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005c36:	bf00      	nop
 8005c38:	370c      	adds	r7, #12
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005c4a:	bf00      	nop
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b083      	sub	sp, #12
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005cf0:	4b30      	ldr	r3, [pc, #192]	@ (8005db4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005cf2:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a2f      	ldr	r2, [pc, #188]	@ (8005db8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d103      	bne.n	8005d06 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005d04:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dbc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d103      	bne.n	8005d18 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8005d16:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d26:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d2e:	041a      	lsls	r2, r3, #16
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005d4c:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d54:	061a      	lsls	r2, r3, #24
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	e005      	b.n	8005d9a <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	3304      	adds	r3, #4
 8005d98:	60fb      	str	r3, [r7, #12]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3f3      	bcc.n	8005d8e <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8005da6:	bf00      	nop
 8005da8:	bf00      	nop
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr
 8005db4:	4000a400 	.word	0x4000a400
 8005db8:	40006800 	.word	0x40006800
 8005dbc:	40006c00 	.word	0x40006c00

08005dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005dce:	e15a      	b.n	8006086 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	2101      	movs	r1, #1
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	4013      	ands	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f000 814c 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	f003 0303 	and.w	r3, r3, #3
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d005      	beq.n	8005e00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d130      	bne.n	8005e62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e10:	43db      	mvns	r3, r3
 8005e12:	693a      	ldr	r2, [r7, #16]
 8005e14:	4013      	ands	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	68da      	ldr	r2, [r3, #12]
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	fa02 f303 	lsl.w	r3, r2, r3
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e36:	2201      	movs	r2, #1
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	693a      	ldr	r2, [r7, #16]
 8005e42:	4013      	ands	r3, r2
 8005e44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 0201 	and.w	r2, r3, #1
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	fa02 f303 	lsl.w	r3, r2, r3
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	693a      	ldr	r2, [r7, #16]
 8005e60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	f003 0303 	and.w	r3, r3, #3
 8005e6a:	2b03      	cmp	r3, #3
 8005e6c:	d017      	beq.n	8005e9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68db      	ldr	r3, [r3, #12]
 8005e72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	2203      	movs	r2, #3
 8005e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7e:	43db      	mvns	r3, r3
 8005e80:	693a      	ldr	r2, [r7, #16]
 8005e82:	4013      	ands	r3, r2
 8005e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	005b      	lsls	r3, r3, #1
 8005e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e92:	693a      	ldr	r2, [r7, #16]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f003 0303 	and.w	r3, r3, #3
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d123      	bne.n	8005ef2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	08da      	lsrs	r2, r3, #3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	3208      	adds	r2, #8
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f003 0307 	and.w	r3, r3, #7
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	220f      	movs	r2, #15
 8005ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec6:	43db      	mvns	r3, r3
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	fa02 f303 	lsl.w	r3, r2, r3
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	08da      	lsrs	r2, r3, #3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	3208      	adds	r2, #8
 8005eec:	6939      	ldr	r1, [r7, #16]
 8005eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	2203      	movs	r2, #3
 8005efe:	fa02 f303 	lsl.w	r3, r2, r3
 8005f02:	43db      	mvns	r3, r3
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	4013      	ands	r3, r2
 8005f08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f003 0203 	and.w	r2, r3, #3
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	005b      	lsls	r3, r3, #1
 8005f16:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1a:	693a      	ldr	r2, [r7, #16]
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80a6 	beq.w	8006080 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f34:	4b5b      	ldr	r3, [pc, #364]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f38:	4a5a      	ldr	r2, [pc, #360]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f3a:	f043 0301 	orr.w	r3, r3, #1
 8005f3e:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f40:	4b58      	ldr	r3, [pc, #352]	@ (80060a4 <HAL_GPIO_Init+0x2e4>)
 8005f42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	60bb      	str	r3, [r7, #8]
 8005f4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f4c:	4a56      	ldr	r2, [pc, #344]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	089b      	lsrs	r3, r3, #2
 8005f52:	3302      	adds	r3, #2
 8005f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	f003 0303 	and.w	r3, r3, #3
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	220f      	movs	r2, #15
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005f76:	d01f      	beq.n	8005fb8 <HAL_GPIO_Init+0x1f8>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a4c      	ldr	r2, [pc, #304]	@ (80060ac <HAL_GPIO_Init+0x2ec>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d019      	beq.n	8005fb4 <HAL_GPIO_Init+0x1f4>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a4b      	ldr	r2, [pc, #300]	@ (80060b0 <HAL_GPIO_Init+0x2f0>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d013      	beq.n	8005fb0 <HAL_GPIO_Init+0x1f0>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80060b4 <HAL_GPIO_Init+0x2f4>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d00d      	beq.n	8005fac <HAL_GPIO_Init+0x1ec>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a49      	ldr	r2, [pc, #292]	@ (80060b8 <HAL_GPIO_Init+0x2f8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d007      	beq.n	8005fa8 <HAL_GPIO_Init+0x1e8>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a48      	ldr	r2, [pc, #288]	@ (80060bc <HAL_GPIO_Init+0x2fc>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_GPIO_Init+0x1e4>
 8005fa0:	2305      	movs	r3, #5
 8005fa2:	e00a      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa4:	2306      	movs	r3, #6
 8005fa6:	e008      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fa8:	2304      	movs	r3, #4
 8005faa:	e006      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fac:	2303      	movs	r3, #3
 8005fae:	e004      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e002      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e000      	b.n	8005fba <HAL_GPIO_Init+0x1fa>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	f002 0203 	and.w	r2, r2, #3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	4093      	lsls	r3, r2
 8005fc4:	693a      	ldr	r2, [r7, #16]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fca:	4937      	ldr	r1, [pc, #220]	@ (80060a8 <HAL_GPIO_Init+0x2e8>)
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	089b      	lsrs	r3, r3, #2
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005fd8:	4b39      	ldr	r3, [pc, #228]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	43db      	mvns	r3, r3
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d003      	beq.n	8005ffc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005ff4:	693a      	ldr	r2, [r7, #16]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005ffc:	4a30      	ldr	r2, [pc, #192]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006002:	4b2f      	ldr	r3, [pc, #188]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	43db      	mvns	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4013      	ands	r3, r2
 8006010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	685b      	ldr	r3, [r3, #4]
 8006016:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4313      	orrs	r3, r2
 8006024:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006026:	4a26      	ldr	r2, [pc, #152]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800602c:	4b24      	ldr	r3, [pc, #144]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	43db      	mvns	r3, r3
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	4013      	ands	r3, r2
 800603a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006044:	2b00      	cmp	r3, #0
 8006046:	d003      	beq.n	8006050 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	4313      	orrs	r3, r2
 800604e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006050:	4a1b      	ldr	r2, [pc, #108]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006056:	4b1a      	ldr	r3, [pc, #104]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	43db      	mvns	r3, r3
 8006060:	693a      	ldr	r2, [r7, #16]
 8006062:	4013      	ands	r3, r2
 8006064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800606e:	2b00      	cmp	r3, #0
 8006070:	d003      	beq.n	800607a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006072:	693a      	ldr	r2, [r7, #16]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800607a:	4a11      	ldr	r2, [pc, #68]	@ (80060c0 <HAL_GPIO_Init+0x300>)
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	3301      	adds	r3, #1
 8006084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	fa22 f303 	lsr.w	r3, r2, r3
 8006090:	2b00      	cmp	r3, #0
 8006092:	f47f ae9d 	bne.w	8005dd0 <HAL_GPIO_Init+0x10>
  }
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	371c      	adds	r7, #28
 800609c:	46bd      	mov	sp, r7
 800609e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a2:	4770      	bx	lr
 80060a4:	40021000 	.word	0x40021000
 80060a8:	40010000 	.word	0x40010000
 80060ac:	48000400 	.word	0x48000400
 80060b0:	48000800 	.word	0x48000800
 80060b4:	48000c00 	.word	0x48000c00
 80060b8:	48001000 	.word	0x48001000
 80060bc:	48001400 	.word	0x48001400
 80060c0:	40010400 	.word	0x40010400

080060c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	691a      	ldr	r2, [r3, #16]
 80060d4:	887b      	ldrh	r3, [r7, #2]
 80060d6:	4013      	ands	r3, r2
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060dc:	2301      	movs	r3, #1
 80060de:	73fb      	strb	r3, [r7, #15]
 80060e0:	e001      	b.n	80060e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3714      	adds	r7, #20
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e08d      	b.n	8006222 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d106      	bne.n	8006120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7fc fbec 	bl	80028f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2224      	movs	r2, #36	@ 0x24
 8006124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0201 	bic.w	r2, r2, #1
 8006136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d107      	bne.n	800616e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	e006      	b.n	800617c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	689a      	ldr	r2, [r3, #8]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800617a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d108      	bne.n	8006196 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006192:	605a      	str	r2, [r3, #4]
 8006194:	e007      	b.n	80061a6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80061a4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	6812      	ldr	r2, [r2, #0]
 80061b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80061b4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	691a      	ldr	r2, [r3, #16]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	430a      	orrs	r2, r1
 80061e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	69d9      	ldr	r1, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1a      	ldr	r2, [r3, #32]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                                uint32_t XferOptions)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006242:	b2db      	uxtb	r3, r3
 8006244:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006248:	2b28      	cmp	r3, #40	@ 0x28
 800624a:	f040 8098 	bne.w	800637e <HAL_I2C_Slave_Seq_Transmit_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d002      	beq.n	800625a <HAL_I2C_Slave_Seq_Transmit_IT+0x2e>
 8006254:	88fb      	ldrh	r3, [r7, #6]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <HAL_I2C_Slave_Seq_Transmit_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006260:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e08c      	b.n	8006380 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006266:	f248 0101 	movw	r1, #32769	@ 0x8001
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f001 fb7a 	bl	8007964 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006276:	2b01      	cmp	r3, #1
 8006278:	d101      	bne.n	800627e <HAL_I2C_Slave_Seq_Transmit_IT+0x52>
 800627a:	2302      	movs	r3, #2
 800627c:	e080      	b.n	8006380 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave RX state to TX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800628c:	b2db      	uxtb	r3, r3
 800628e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006290:	d12a      	bne.n	80062e8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006292:	2102      	movs	r1, #2
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 fb65 	bl	8007964 <I2C_Disable_IRQ>

      /* Abort DMA Xfer if any */
      if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062a8:	d11e      	bne.n	80062e8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80062b8:	601a      	str	r2, [r3, #0]

        if (hi2c->hdmarx != NULL)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d012      	beq.n	80062e8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062c6:	4a30      	ldr	r2, [pc, #192]	@ (8006388 <HAL_I2C_Slave_Seq_Transmit_IT+0x15c>)
 80062c8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA RX */
          if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062ce:	4618      	mov	r0, r3
 80062d0:	f7ff f99f 	bl	8005612 <HAL_DMA_Abort_IT>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d006      	beq.n	80062e8 <HAL_I2C_Slave_Seq_Transmit_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	68fa      	ldr	r2, [r7, #12]
 80062e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80062e4:	4610      	mov	r0, r2
 80062e6:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2229      	movs	r2, #41	@ 0x29
 80062ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	2220      	movs	r2, #32
 80062f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2200      	movs	r2, #0
 80062fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800630c:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4a17      	ldr	r2, [pc, #92]	@ (800638c <HAL_I2C_Slave_Seq_Transmit_IT+0x160>)
 800632e:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	f003 0308 	and.w	r3, r3, #8
 800633a:	2b08      	cmp	r3, #8
 800633c:	bf0c      	ite	eq
 800633e:	2301      	moveq	r3, #1
 8006340:	2300      	movne	r3, #0
 8006342:	b2db      	uxtb	r3, r3
 8006344:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE) && (tmp != RESET))
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	0c1b      	lsrs	r3, r3, #16
 800634e:	b2db      	uxtb	r3, r3
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b01      	cmp	r3, #1
 8006358:	d106      	bne.n	8006368 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <HAL_I2C_Slave_Seq_Transmit_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	2208      	movs	r2, #8
 8006366:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2200      	movs	r2, #0
 800636c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006370:	f248 0101 	movw	r1, #32769	@ 0x8001
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f001 fa71 	bl	800785c <I2C_Enable_IRQ>

    return HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	e000      	b.n	8006380 <HAL_I2C_Slave_Seq_Transmit_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
  }
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	080077bb 	.word	0x080077bb
 800638c:	080065e1 	.word	0x080065e1

08006390 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  XferOptions Options of Transfer, value of @ref I2C_XFEROPTIONS
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                               uint32_t XferOptions)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	4613      	mov	r3, r2
 800639e:	80fb      	strh	r3, [r7, #6]
  FlagStatus tmp;

  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063ac:	2b28      	cmp	r3, #40	@ 0x28
 80063ae:	f040 8098 	bne.w	80064e2 <HAL_I2C_Slave_Seq_Receive_IT+0x152>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d002      	beq.n	80063be <HAL_I2C_Slave_Seq_Receive_IT+0x2e>
 80063b8:	88fb      	ldrh	r3, [r7, #6]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d105      	bne.n	80063ca <HAL_I2C_Slave_Seq_Receive_IT+0x3a>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063c4:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	e08c      	b.n	80064e4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
    }

    /* Disable Interrupts, to prevent preemption during treatment in case of multicall */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80063ca:	f248 0102 	movw	r1, #32770	@ 0x8002
 80063ce:	68f8      	ldr	r0, [r7, #12]
 80063d0:	f001 fac8 	bl	8007964 <I2C_Disable_IRQ>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_I2C_Slave_Seq_Receive_IT+0x52>
 80063de:	2302      	movs	r3, #2
 80063e0:	e080      	b.n	80064e4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* I2C cannot manage full duplex exchange so disable previous IT enabled if any */
    /* and then toggle the HAL slave TX state to RX state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	2b29      	cmp	r3, #41	@ 0x29
 80063f4:	d12a      	bne.n	800644c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
    {
      /* Disable associated Interrupts */
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80063f6:	2101      	movs	r1, #1
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f001 fab3 	bl	8007964 <I2C_Disable_IRQ>

      if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006408:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800640c:	d11e      	bne.n	800644c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
      {
        hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800641c:	601a      	str	r2, [r3, #0]

        /* Abort DMA Xfer if any */
        if (hi2c->hdmatx != NULL)
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006422:	2b00      	cmp	r3, #0
 8006424:	d012      	beq.n	800644c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
        {
          /* Set the I2C DMA Abort callback :
           will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
          hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	4a30      	ldr	r2, [pc, #192]	@ (80064ec <HAL_I2C_Slave_Seq_Receive_IT+0x15c>)
 800642c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA TX */
          if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006432:	4618      	mov	r0, r3
 8006434:	f7ff f8ed 	bl	8005612 <HAL_DMA_Abort_IT>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	d006      	beq.n	800644c <HAL_I2C_Slave_Seq_Receive_IT+0xbc>
          {
            /* Call Directly XferAbortCallback function in case of error */
            hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006448:	4610      	mov	r0, r2
 800644a:	4798      	blx	r3
          }
        }
      }
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	222a      	movs	r2, #42	@ 0x2a
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2220      	movs	r2, #32
 8006458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2200      	movs	r2, #0
 8006460:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	685a      	ldr	r2, [r3, #4]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006470:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	68ba      	ldr	r2, [r7, #8]
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	88fa      	ldrh	r2, [r7, #6]
 800647c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006482:	b29a      	uxth	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = XferOptions;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4a17      	ldr	r2, [pc, #92]	@ (80064f0 <HAL_I2C_Slave_Seq_Receive_IT+0x160>)
 8006492:	635a      	str	r2, [r3, #52]	@ 0x34

    tmp = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699b      	ldr	r3, [r3, #24]
 800649a:	f003 0308 	and.w	r3, r3, #8
 800649e:	2b08      	cmp	r3, #8
 80064a0:	bf0c      	ite	eq
 80064a2:	2301      	moveq	r3, #1
 80064a4:	2300      	movne	r3, #0
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	75fb      	strb	r3, [r7, #23]
    if ((I2C_GET_DIR(hi2c) == I2C_DIRECTION_TRANSMIT) && (tmp != RESET))
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	f003 0301 	and.w	r3, r3, #1
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_I2C_Slave_Seq_Receive_IT+0x13c>
    {
      /* Clear ADDR flag after prepare the transfer parameters */
      /* This action will generate an acknowledge to the Master */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2208      	movs	r2, #8
 80064ca:	61da      	str	r2, [r3, #28]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */
    /* REnable ADDR interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 80064d4:	f248 0102 	movw	r1, #32770	@ 0x8002
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	f001 f9bf 	bl	800785c <I2C_Enable_IRQ>

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_I2C_Slave_Seq_Receive_IT+0x154>
  }
  else
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	080077bb 	.word	0x080077bb
 80064f0:	080065e1 	.word	0x080065e1

080064f4 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b20      	cmp	r3, #32
 8006506:	d10d      	bne.n	8006524 <HAL_I2C_EnableListen_IT+0x30>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2228      	movs	r2, #40	@ 0x28
 800650c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR = I2C_Slave_ISR_IT;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a07      	ldr	r2, [pc, #28]	@ (8006530 <HAL_I2C_EnableListen_IT+0x3c>)
 8006514:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the Address Match interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006516:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 f99e 	bl	800785c <I2C_Enable_IRQ>

    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e000      	b.n	8006526 <HAL_I2C_EnableListen_IT+0x32>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	080065e1 	.word	0x080065e1

08006534 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	68ba      	ldr	r2, [r7, #8]
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
  }
}
 8006560:	bf00      	nop
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}

08006568 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006584:	bf00      	nop
 8006586:	370c      	adds	r7, #12
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr

08006590 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006590:	b480      	push	{r7}
 8006592:	b083      	sub	sp, #12
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006598:	bf00      	nop
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80065ac:	bf00      	nop
 80065ae:	370c      	adds	r7, #12
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr

080065b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80065c0:	bf00      	nop
 80065c2:	370c      	adds	r7, #12
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b083      	sub	sp, #12
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80065d4:	bf00      	nop
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d101      	bne.n	8006604 <I2C_Slave_ISR_IT+0x24>
 8006600:	2302      	movs	r3, #2
 8006602:	e0ed      	b.n	80067e0 <I2C_Slave_ISR_IT+0x200>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00a      	beq.n	800662e <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006624:	6939      	ldr	r1, [r7, #16]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fdcc 	bl	80071c4 <I2C_ITSlaveCplt>
 800662c:	e0d3      	b.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	091b      	lsrs	r3, r3, #4
 8006632:	f003 0301 	and.w	r3, r3, #1
 8006636:	2b00      	cmp	r3, #0
 8006638:	d04d      	beq.n	80066d6 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	091b      	lsrs	r3, r3, #4
 800663e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006642:	2b00      	cmp	r3, #0
 8006644:	d047      	beq.n	80066d6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800664a:	b29b      	uxth	r3, r3
 800664c:	2b00      	cmp	r3, #0
 800664e:	d128      	bne.n	80066a2 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006656:	b2db      	uxtb	r3, r3
 8006658:	2b28      	cmp	r3, #40	@ 0x28
 800665a:	d108      	bne.n	800666e <I2C_Slave_ISR_IT+0x8e>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006662:	d104      	bne.n	800666e <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006664:	6939      	ldr	r1, [r7, #16]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 ff16 	bl	8007498 <I2C_ITListenCplt>
 800666c:	e032      	b.n	80066d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b29      	cmp	r3, #41	@ 0x29
 8006678:	d10e      	bne.n	8006698 <I2C_Slave_ISR_IT+0xb8>
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006680:	d00a      	beq.n	8006698 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2210      	movs	r2, #16
 8006688:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f001 f871 	bl	8007772 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 fc6f 	bl	8006f74 <I2C_ITSlaveSeqCplt>
 8006696:	e01d      	b.n	80066d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2210      	movs	r2, #16
 800669e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80066a0:	e096      	b.n	80067d0 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2210      	movs	r2, #16
 80066a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ae:	f043 0204 	orr.w	r2, r3, #4
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d004      	beq.n	80066c6 <I2C_Slave_ISR_IT+0xe6>
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066c2:	f040 8085 	bne.w	80067d0 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ca:	4619      	mov	r1, r3
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 ff39 	bl	8007544 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80066d2:	e07d      	b.n	80067d0 <I2C_Slave_ISR_IT+0x1f0>
 80066d4:	e07c      	b.n	80067d0 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	089b      	lsrs	r3, r3, #2
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d030      	beq.n	8006744 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	089b      	lsrs	r3, r3, #2
 80066e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d02a      	beq.n	8006744 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066f2:	b29b      	uxth	r3, r3
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d018      	beq.n	800672a <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006714:	3b01      	subs	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006720:	b29b      	uxth	r3, r3
 8006722:	3b01      	subs	r3, #1
 8006724:	b29a      	uxth	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d14f      	bne.n	80067d4 <I2C_Slave_ISR_IT+0x1f4>
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800673a:	d04b      	beq.n	80067d4 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 fc19 	bl	8006f74 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006742:	e047      	b.n	80067d4 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	08db      	lsrs	r3, r3, #3
 8006748:	f003 0301 	and.w	r3, r3, #1
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00a      	beq.n	8006766 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	08db      	lsrs	r3, r3, #3
 8006754:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800675c:	6939      	ldr	r1, [r7, #16]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f000 fb47 	bl	8006df2 <I2C_ITAddrCplt>
 8006764:	e037      	b.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	085b      	lsrs	r3, r3, #1
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b00      	cmp	r3, #0
 8006770:	d031      	beq.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	085b      	lsrs	r3, r3, #1
 8006776:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800677a:	2b00      	cmp	r3, #0
 800677c:	d02b      	beq.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d018      	beq.n	80067ba <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	781a      	ldrb	r2, [r3, #0]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80067b8:	e00d      	b.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067c0:	d002      	beq.n	80067c8 <I2C_Slave_ISR_IT+0x1e8>
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d106      	bne.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 fbd3 	bl	8006f74 <I2C_ITSlaveSeqCplt>
 80067ce:	e002      	b.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80067d0:	bf00      	nop
 80067d2:	e000      	b.n	80067d6 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80067d4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80067de:	2300      	movs	r3, #0
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d101      	bne.n	8006802 <I2C_Master_ISR_DMA+0x1a>
 80067fe:	2302      	movs	r3, #2
 8006800:	e0e1      	b.n	80069c6 <I2C_Master_ISR_DMA+0x1de>
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b00      	cmp	r3, #0
 8006814:	d017      	beq.n	8006846 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	091b      	lsrs	r3, r3, #4
 800681a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800681e:	2b00      	cmp	r3, #0
 8006820:	d011      	beq.n	8006846 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800682e:	f043 0204 	orr.w	r2, r3, #4
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006836:	2120      	movs	r1, #32
 8006838:	68f8      	ldr	r0, [r7, #12]
 800683a:	f001 f80f 	bl	800785c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f000 ff97 	bl	8007772 <I2C_Flush_TXDR>
 8006844:	e0ba      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	09db      	lsrs	r3, r3, #7
 800684a:	f003 0301 	and.w	r3, r3, #1
 800684e:	2b00      	cmp	r3, #0
 8006850:	d072      	beq.n	8006938 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	099b      	lsrs	r3, r3, #6
 8006856:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800685a:	2b00      	cmp	r3, #0
 800685c:	d06c      	beq.n	8006938 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800686c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006872:	b29b      	uxth	r3, r3
 8006874:	2b00      	cmp	r3, #0
 8006876:	d04e      	beq.n	8006916 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	b29b      	uxth	r3, r3
 8006880:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006884:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688a:	b29b      	uxth	r3, r3
 800688c:	2bff      	cmp	r3, #255	@ 0xff
 800688e:	d906      	bls.n	800689e <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	22ff      	movs	r2, #255	@ 0xff
 8006894:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8006896:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800689a:	617b      	str	r3, [r7, #20]
 800689c:	e010      	b.n	80068c0 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068a2:	b29a      	uxth	r2, r3
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068b0:	d003      	beq.n	80068ba <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e002      	b.n	80068c0 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80068ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068be:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	8a79      	ldrh	r1, [r7, #18]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 ff92 	bl	80077f8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d8:	b29a      	uxth	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b22      	cmp	r3, #34	@ 0x22
 80068f0:	d108      	bne.n	8006904 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681a      	ldr	r2, [r3, #0]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006900:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006902:	e05b      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006912:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006914:	e052      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006920:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006924:	d003      	beq.n	800692e <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006926:	68f8      	ldr	r0, [r7, #12]
 8006928:	f000 fae7 	bl	8006efa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800692c:	e046      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800692e:	2140      	movs	r1, #64	@ 0x40
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fe07 	bl	8007544 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006936:	e041      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	099b      	lsrs	r3, r3, #6
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d029      	beq.n	8006998 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	099b      	lsrs	r3, r3, #6
 8006948:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800694c:	2b00      	cmp	r3, #0
 800694e:	d023      	beq.n	8006998 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006954:	b29b      	uxth	r3, r3
 8006956:	2b00      	cmp	r3, #0
 8006958:	d119      	bne.n	800698e <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	685b      	ldr	r3, [r3, #4]
 8006960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006964:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006968:	d027      	beq.n	80069ba <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006972:	d108      	bne.n	8006986 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006982:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8006984:	e019      	b.n	80069ba <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006986:	68f8      	ldr	r0, [r7, #12]
 8006988:	f000 fab7 	bl	8006efa <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800698c:	e015      	b.n	80069ba <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800698e:	2140      	movs	r1, #64	@ 0x40
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f000 fdd7 	bl	8007544 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006996:	e010      	b.n	80069ba <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 fb3c 	bl	8007030 <I2C_ITMasterCplt>
 80069b8:	e000      	b.n	80069bc <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 80069ba:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af02      	add	r7, sp, #8
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80069dc:	4b92      	ldr	r3, [pc, #584]	@ (8006c28 <I2C_Mem_ISR_DMA+0x258>)
 80069de:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d101      	bne.n	80069ee <I2C_Mem_ISR_DMA+0x1e>
 80069ea:	2302      	movs	r3, #2
 80069ec:	e118      	b.n	8006c20 <I2C_Mem_ISR_DMA+0x250>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2201      	movs	r2, #1
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	091b      	lsrs	r3, r3, #4
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d017      	beq.n	8006a32 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	091b      	lsrs	r3, r3, #4
 8006a06:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d011      	beq.n	8006a32 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2210      	movs	r2, #16
 8006a14:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a1a:	f043 0204 	orr.w	r2, r3, #4
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8006a22:	2120      	movs	r1, #32
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 ff19 	bl	800785c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f000 fea1 	bl	8007772 <I2C_Flush_TXDR>
 8006a30:	e0f1      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	085b      	lsrs	r3, r3, #1
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00f      	beq.n	8006a5e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	085b      	lsrs	r3, r3, #1
 8006a42:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d009      	beq.n	8006a5e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006a52:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006a5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8006a5c:	e0db      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	09db      	lsrs	r3, r3, #7
 8006a62:	f003 0301 	and.w	r3, r3, #1
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d060      	beq.n	8006b2c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	099b      	lsrs	r3, r3, #6
 8006a6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d05a      	beq.n	8006b2c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006a76:	2101      	movs	r1, #1
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 ff73 	bl	8007964 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006a7e:	2110      	movs	r1, #16
 8006a80:	68f8      	ldr	r0, [r7, #12]
 8006a82:	f000 feeb 	bl	800785c <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d048      	beq.n	8006b22 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2bff      	cmp	r3, #255	@ 0xff
 8006a98:	d910      	bls.n	8006abc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	22ff      	movs	r2, #255	@ 0xff
 8006a9e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa4:	b299      	uxth	r1, r3
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	2300      	movs	r3, #0
 8006aae:	9300      	str	r3, [sp, #0]
 8006ab0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 fe9f 	bl	80077f8 <I2C_TransferConfig>
 8006aba:	e011      	b.n	8006ae0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aca:	b299      	uxth	r1, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	9300      	str	r3, [sp, #0]
 8006ad6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 fe8c 	bl	80077f8 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	2b22      	cmp	r3, #34	@ 0x22
 8006afc:	d108      	bne.n	8006b10 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b0e:	e082      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b1e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8006b20:	e079      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006b22:	2140      	movs	r1, #64	@ 0x40
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f000 fd0d 	bl	8007544 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8006b2a:	e074      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	099b      	lsrs	r3, r3, #6
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d05e      	beq.n	8006bf6 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	099b      	lsrs	r3, r3, #6
 8006b3c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d058      	beq.n	8006bf6 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006b44:	2101      	movs	r1, #1
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 ff0c 	bl	8007964 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8006b4c:	2110      	movs	r1, #16
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 fe84 	bl	800785c <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b22      	cmp	r3, #34	@ 0x22
 8006b5e:	d101      	bne.n	8006b64 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 8006b60:	4b32      	ldr	r3, [pc, #200]	@ (8006c2c <I2C_Mem_ISR_DMA+0x25c>)
 8006b62:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2bff      	cmp	r3, #255	@ 0xff
 8006b6c:	d910      	bls.n	8006b90 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	22ff      	movs	r2, #255	@ 0xff
 8006b72:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b78:	b299      	uxth	r1, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	9300      	str	r3, [sp, #0]
 8006b84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 fe35 	bl	80077f8 <I2C_TransferConfig>
 8006b8e:	e011      	b.n	8006bb4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b94:	b29a      	uxth	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b9e:	b299      	uxth	r1, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006bae:	68f8      	ldr	r0, [r7, #12]
 8006bb0:	f000 fe22 	bl	80077f8 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b22      	cmp	r3, #34	@ 0x22
 8006bd0:	d108      	bne.n	8006be4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006be0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006be2:	e018      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006bf2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006bf4:	e00f      	b.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	095b      	lsrs	r3, r3, #5
 8006bfa:	f003 0301 	and.w	r3, r3, #1
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d009      	beq.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	095b      	lsrs	r3, r3, #5
 8006c06:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8006c0e:	68b9      	ldr	r1, [r7, #8]
 8006c10:	68f8      	ldr	r0, [r7, #12]
 8006c12:	f000 fa0d 	bl	8007030 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	80002000 	.word	0x80002000
 8006c2c:	80002400 	.word	0x80002400

08006c30 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b088      	sub	sp, #32
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c40:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <I2C_Slave_ISR_DMA+0x24>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e0ca      	b.n	8006dea <I2C_Slave_ISR_DMA+0x1ba>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	095b      	lsrs	r3, r3, #5
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	095b      	lsrs	r3, r3, #5
 8006c6c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8006c74:	68b9      	ldr	r1, [r7, #8]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 faa4 	bl	80071c4 <I2C_ITSlaveCplt>
 8006c7c:	e0b0      	b.n	8006de0 <I2C_Slave_ISR_DMA+0x1b0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	091b      	lsrs	r3, r3, #4
 8006c82:	f003 0301 	and.w	r3, r3, #1
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 809a 	beq.w	8006dc0 <I2C_Slave_ISR_DMA+0x190>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	091b      	lsrs	r3, r3, #4
 8006c90:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	f000 8093 	beq.w	8006dc0 <I2C_Slave_ISR_DMA+0x190>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	0b9b      	lsrs	r3, r3, #14
 8006c9e:	f003 0301 	and.w	r3, r3, #1
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d105      	bne.n	8006cb2 <I2C_Slave_ISR_DMA+0x82>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	0bdb      	lsrs	r3, r3, #15
 8006caa:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d07f      	beq.n	8006db2 <I2C_Slave_ISR_DMA+0x182>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00d      	beq.n	8006cd6 <I2C_Slave_ISR_DMA+0xa6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	0bdb      	lsrs	r3, r3, #15
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d007      	beq.n	8006cd6 <I2C_Slave_ISR_DMA+0xa6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d101      	bne.n	8006cd6 <I2C_Slave_ISR_DMA+0xa6>
          {
            treatdmanack = 1U;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00d      	beq.n	8006cfa <I2C_Slave_ISR_DMA+0xca>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	0b9b      	lsrs	r3, r3, #14
 8006ce2:	f003 0301 	and.w	r3, r3, #1
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d007      	beq.n	8006cfa <I2C_Slave_ISR_DMA+0xca>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	685b      	ldr	r3, [r3, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <I2C_Slave_ISR_DMA+0xca>
          {
            treatdmanack = 1U;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8006cfa:	69fb      	ldr	r3, [r7, #28]
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d128      	bne.n	8006d52 <I2C_Slave_ISR_DMA+0x122>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b28      	cmp	r3, #40	@ 0x28
 8006d0a:	d108      	bne.n	8006d1e <I2C_Slave_ISR_DMA+0xee>
 8006d0c:	69bb      	ldr	r3, [r7, #24]
 8006d0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006d12:	d104      	bne.n	8006d1e <I2C_Slave_ISR_DMA+0xee>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f000 fbbe 	bl	8007498 <I2C_ITListenCplt>
 8006d1c:	e048      	b.n	8006db0 <I2C_Slave_ISR_DMA+0x180>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	2b29      	cmp	r3, #41	@ 0x29
 8006d28:	d10e      	bne.n	8006d48 <I2C_Slave_ISR_DMA+0x118>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006d30:	d00a      	beq.n	8006d48 <I2C_Slave_ISR_DMA+0x118>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2210      	movs	r2, #16
 8006d38:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f000 fd19 	bl	8007772 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f917 	bl	8006f74 <I2C_ITSlaveSeqCplt>
 8006d46:	e033      	b.n	8006db0 <I2C_Slave_ISR_DMA+0x180>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2210      	movs	r2, #16
 8006d4e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8006d50:	e034      	b.n	8006dbc <I2C_Slave_ISR_DMA+0x18c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2210      	movs	r2, #16
 8006d58:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d5e:	f043 0204 	orr.w	r2, r3, #4
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d6c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d003      	beq.n	8006d7c <I2C_Slave_ISR_DMA+0x14c>
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006d7a:	d11f      	bne.n	8006dbc <I2C_Slave_ISR_DMA+0x18c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d7c:	7dfb      	ldrb	r3, [r7, #23]
 8006d7e:	2b21      	cmp	r3, #33	@ 0x21
 8006d80:	d002      	beq.n	8006d88 <I2C_Slave_ISR_DMA+0x158>
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	2b29      	cmp	r3, #41	@ 0x29
 8006d86:	d103      	bne.n	8006d90 <I2C_Slave_ISR_DMA+0x160>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2221      	movs	r2, #33	@ 0x21
 8006d8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d8e:	e008      	b.n	8006da2 <I2C_Slave_ISR_DMA+0x172>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006d90:	7dfb      	ldrb	r3, [r7, #23]
 8006d92:	2b22      	cmp	r3, #34	@ 0x22
 8006d94:	d002      	beq.n	8006d9c <I2C_Slave_ISR_DMA+0x16c>
 8006d96:	7dfb      	ldrb	r3, [r7, #23]
 8006d98:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d9a:	d102      	bne.n	8006da2 <I2C_Slave_ISR_DMA+0x172>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2222      	movs	r2, #34	@ 0x22
 8006da0:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006da6:	4619      	mov	r1, r3
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f000 fbcb 	bl	8007544 <I2C_ITError>
      if (treatdmanack == 1U)
 8006dae:	e005      	b.n	8006dbc <I2C_Slave_ISR_DMA+0x18c>
 8006db0:	e004      	b.n	8006dbc <I2C_Slave_ISR_DMA+0x18c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2210      	movs	r2, #16
 8006db8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dba:	e011      	b.n	8006de0 <I2C_Slave_ISR_DMA+0x1b0>
      if (treatdmanack == 1U)
 8006dbc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8006dbe:	e00f      	b.n	8006de0 <I2C_Slave_ISR_DMA+0x1b0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	08db      	lsrs	r3, r3, #3
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d009      	beq.n	8006de0 <I2C_Slave_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	08db      	lsrs	r3, r3, #3
 8006dd0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <I2C_Slave_ISR_DMA+0x1b0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f809 	bl	8006df2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3720      	adds	r7, #32
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b084      	sub	sp, #16
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006e08:	2b28      	cmp	r3, #40	@ 0x28
 8006e0a:	d16a      	bne.n	8006ee2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699b      	ldr	r3, [r3, #24]
 8006e12:	0c1b      	lsrs	r3, r3, #16
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	699b      	ldr	r3, [r3, #24]
 8006e22:	0c1b      	lsrs	r3, r3, #16
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006e2a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e38:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8006e46:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d138      	bne.n	8006ec2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006e50:	897b      	ldrh	r3, [r7, #10]
 8006e52:	09db      	lsrs	r3, r3, #7
 8006e54:	b29a      	uxth	r2, r3
 8006e56:	89bb      	ldrh	r3, [r7, #12]
 8006e58:	4053      	eors	r3, r2
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	f003 0306 	and.w	r3, r3, #6
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d11c      	bne.n	8006e9e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006e64:	897b      	ldrh	r3, [r7, #10]
 8006e66:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6c:	1c5a      	adds	r2, r3, #1
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d13b      	bne.n	8006ef2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2208      	movs	r2, #8
 8006e86:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006e90:	89ba      	ldrh	r2, [r7, #12]
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7f9 ff5e 	bl	8000d58 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006e9c:	e029      	b.n	8006ef2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006e9e:	893b      	ldrh	r3, [r7, #8]
 8006ea0:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ea2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fd5c 	bl	8007964 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006eb4:	89ba      	ldrh	r2, [r7, #12]
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	4619      	mov	r1, r3
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7f9 ff4c 	bl	8000d58 <HAL_I2C_AddrCallback>
}
 8006ec0:	e017      	b.n	8006ef2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006ec2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fd4c 	bl	8007964 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ed4:	89ba      	ldrh	r2, [r7, #12]
 8006ed6:	7bfb      	ldrb	r3, [r7, #15]
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f7f9 ff3c 	bl	8000d58 <HAL_I2C_AddrCallback>
}
 8006ee0:	e007      	b.n	8006ef2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2208      	movs	r2, #8
 8006ee8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8006ef2:	bf00      	nop
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b082      	sub	sp, #8
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b21      	cmp	r3, #33	@ 0x21
 8006f14:	d115      	bne.n	8006f42 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2220      	movs	r2, #32
 8006f1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2211      	movs	r2, #17
 8006f22:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fd19 	bl	8007964 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fb14 	bl	8006568 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f40:	e014      	b.n	8006f6c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2220      	movs	r2, #32
 8006f46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2212      	movs	r2, #18
 8006f4e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006f56:	2102      	movs	r1, #2
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fd03 	bl	8007964 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7ff fb08 	bl	800657c <HAL_I2C_MasterRxCpltCallback>
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	0b9b      	lsrs	r3, r3, #14
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d008      	beq.n	8006faa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	e00d      	b.n	8006fc6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	0bdb      	lsrs	r3, r3, #15
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d007      	beq.n	8006fc6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fc4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b29      	cmp	r3, #41	@ 0x29
 8006fd0:	d112      	bne.n	8006ff8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2228      	movs	r2, #40	@ 0x28
 8006fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2221      	movs	r2, #33	@ 0x21
 8006fde:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006fe0:	2101      	movs	r1, #1
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 fcbe 	bl	8007964 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7f9 ff8b 	bl	8000f0c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ff6:	e017      	b.n	8007028 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b2a      	cmp	r3, #42	@ 0x2a
 8007002:	d111      	bne.n	8007028 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2228      	movs	r2, #40	@ 0x28
 8007008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2222      	movs	r2, #34	@ 0x22
 8007010:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007012:	2102      	movs	r1, #2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fca5 	bl	8007964 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7f9 ff00 	bl	8000e28 <HAL_I2C_SlaveRxCpltCallback>
}
 8007028:	bf00      	nop
 800702a:	3710      	adds	r7, #16
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}

08007030 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b086      	sub	sp, #24
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2220      	movs	r2, #32
 8007044:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800704c:	b2db      	uxtb	r3, r3
 800704e:	2b21      	cmp	r3, #33	@ 0x21
 8007050:	d107      	bne.n	8007062 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007052:	2101      	movs	r1, #1
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 fc85 	bl	8007964 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2211      	movs	r2, #17
 800705e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007060:	e00c      	b.n	800707c <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b22      	cmp	r3, #34	@ 0x22
 800706c:	d106      	bne.n	800707c <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800706e:	2102      	movs	r1, #2
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc77 	bl	8007964 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2212      	movs	r2, #18
 800707a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6859      	ldr	r1, [r3, #4]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	4b4d      	ldr	r3, [pc, #308]	@ (80071bc <I2C_ITMasterCplt+0x18c>)
 8007088:	400b      	ands	r3, r1
 800708a:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a4a      	ldr	r2, [pc, #296]	@ (80071c0 <I2C_ITMasterCplt+0x190>)
 8007096:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	091b      	lsrs	r3, r3, #4
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d009      	beq.n	80070b8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2210      	movs	r2, #16
 80070aa:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070b0:	f043 0204 	orr.w	r2, r3, #4
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	2b60      	cmp	r3, #96	@ 0x60
 80070c2:	d10b      	bne.n	80070dc <I2C_ITMasterCplt+0xac>
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	089b      	lsrs	r3, r3, #2
 80070c8:	f003 0301 	and.w	r3, r3, #1
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d005      	beq.n	80070dc <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80070da:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb48 	bl	8007772 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070e6:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	2b60      	cmp	r3, #96	@ 0x60
 80070f2:	d002      	beq.n	80070fa <I2C_ITMasterCplt+0xca>
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d006      	beq.n	8007108 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070fe:	4619      	mov	r1, r3
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa1f 	bl	8007544 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007106:	e054      	b.n	80071b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b21      	cmp	r3, #33	@ 0x21
 8007112:	d124      	bne.n	800715e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2220      	movs	r2, #32
 8007118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b40      	cmp	r3, #64	@ 0x40
 800712c:	d10b      	bne.n	8007146 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fa26 	bl	8006590 <HAL_I2C_MemTxCpltCallback>
}
 8007144:	e035      	b.n	80071b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f7ff fa06 	bl	8006568 <HAL_I2C_MasterTxCpltCallback>
}
 800715c:	e029      	b.n	80071b2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b22      	cmp	r3, #34	@ 0x22
 8007168:	d123      	bne.n	80071b2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800717e:	b2db      	uxtb	r3, r3
 8007180:	2b40      	cmp	r3, #64	@ 0x40
 8007182:	d10b      	bne.n	800719c <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fa05 	bl	80065a4 <HAL_I2C_MemRxCpltCallback>
}
 800719a:	e00a      	b.n	80071b2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff f9e5 	bl	800657c <HAL_I2C_MasterRxCpltCallback>
}
 80071b2:	bf00      	nop
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	fe00e800 	.word	0xfe00e800
 80071c0:	ffff0000 	.word	0xffff0000

080071c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2220      	movs	r2, #32
 80071ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80071f0:	7afb      	ldrb	r3, [r7, #11]
 80071f2:	2b21      	cmp	r3, #33	@ 0x21
 80071f4:	d002      	beq.n	80071fc <I2C_ITSlaveCplt+0x38>
 80071f6:	7afb      	ldrb	r3, [r7, #11]
 80071f8:	2b29      	cmp	r3, #41	@ 0x29
 80071fa:	d108      	bne.n	800720e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80071fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f000 fbaf 	bl	8007964 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2221      	movs	r2, #33	@ 0x21
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
 800720c:	e019      	b.n	8007242 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	2b22      	cmp	r3, #34	@ 0x22
 8007212:	d002      	beq.n	800721a <I2C_ITSlaveCplt+0x56>
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b2a      	cmp	r3, #42	@ 0x2a
 8007218:	d108      	bne.n	800722c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800721a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fba0 	bl	8007964 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2222      	movs	r2, #34	@ 0x22
 8007228:	631a      	str	r2, [r3, #48]	@ 0x30
 800722a:	e00a      	b.n	8007242 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800722c:	7afb      	ldrb	r3, [r7, #11]
 800722e:	2b28      	cmp	r3, #40	@ 0x28
 8007230:	d107      	bne.n	8007242 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007232:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fb94 	bl	8007964 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2200      	movs	r2, #0
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	685a      	ldr	r2, [r3, #4]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007250:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	6859      	ldr	r1, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	4b8c      	ldr	r3, [pc, #560]	@ (8007490 <I2C_ITSlaveCplt+0x2cc>)
 800725e:	400b      	ands	r3, r1
 8007260:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 fa85 	bl	8007772 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	0b9b      	lsrs	r3, r3, #14
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d013      	beq.n	800729c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007282:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007288:	2b00      	cmp	r3, #0
 800728a:	d020      	beq.n	80072ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	b29a      	uxth	r2, r3
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800729a:	e018      	b.n	80072ce <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	0bdb      	lsrs	r3, r3, #15
 80072a0:	f003 0301 	and.w	r3, r3, #1
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d012      	beq.n	80072ce <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681a      	ldr	r2, [r3, #0]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80072b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d006      	beq.n	80072ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	089b      	lsrs	r3, r3, #2
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d020      	beq.n	800731c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	f023 0304 	bic.w	r3, r3, #4
 80072e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f4:	1c5a      	adds	r2, r3, #1
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00c      	beq.n	800731c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007306:	3b01      	subs	r3, #1
 8007308:	b29a      	uxth	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007312:	b29b      	uxth	r3, r3
 8007314:	3b01      	subs	r3, #1
 8007316:	b29a      	uxth	r2, r3
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007320:	b29b      	uxth	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800732a:	f043 0204 	orr.w	r2, r3, #4
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	091b      	lsrs	r3, r3, #4
 8007336:	f003 0301 	and.w	r3, r3, #1
 800733a:	2b00      	cmp	r3, #0
 800733c:	d04a      	beq.n	80073d4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	091b      	lsrs	r3, r3, #4
 8007342:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007346:	2b00      	cmp	r3, #0
 8007348:	d044      	beq.n	80073d4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d128      	bne.n	80073a6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b28      	cmp	r3, #40	@ 0x28
 800735e:	d108      	bne.n	8007372 <I2C_ITSlaveCplt+0x1ae>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007366:	d104      	bne.n	8007372 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007368:	6979      	ldr	r1, [r7, #20]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f894 	bl	8007498 <I2C_ITListenCplt>
 8007370:	e030      	b.n	80073d4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b29      	cmp	r3, #41	@ 0x29
 800737c:	d10e      	bne.n	800739c <I2C_ITSlaveCplt+0x1d8>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007384:	d00a      	beq.n	800739c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2210      	movs	r2, #16
 800738c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 f9ef 	bl	8007772 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fded 	bl	8006f74 <I2C_ITSlaveSeqCplt>
 800739a:	e01b      	b.n	80073d4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2210      	movs	r2, #16
 80073a2:	61da      	str	r2, [r3, #28]
 80073a4:	e016      	b.n	80073d4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2210      	movs	r2, #16
 80073ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073b2:	f043 0204 	orr.w	r2, r3, #4
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d003      	beq.n	80073c8 <I2C_ITSlaveCplt+0x204>
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80073c6:	d105      	bne.n	80073d4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073cc:	4619      	mov	r1, r3
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f8b8 	bl	8007544 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d010      	beq.n	800740c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ee:	4619      	mov	r1, r3
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 f8a7 	bl	8007544 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b28      	cmp	r3, #40	@ 0x28
 8007400:	d141      	bne.n	8007486 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007402:	6979      	ldr	r1, [r7, #20]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f847 	bl	8007498 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800740a:	e03c      	b.n	8007486 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007410:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007414:	d014      	beq.n	8007440 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7ff fdac 	bl	8006f74 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a1d      	ldr	r2, [pc, #116]	@ (8007494 <I2C_ITSlaveCplt+0x2d0>)
 8007420:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7f9 fd77 	bl	8000f2c <HAL_I2C_ListenCpltCallback>
}
 800743e:	e022      	b.n	8007486 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007446:	b2db      	uxtb	r3, r3
 8007448:	2b22      	cmp	r3, #34	@ 0x22
 800744a:	d10e      	bne.n	800746a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2200      	movs	r2, #0
 8007458:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2200      	movs	r2, #0
 800745e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f7f9 fce0 	bl	8000e28 <HAL_I2C_SlaveRxCpltCallback>
}
 8007468:	e00d      	b.n	8007486 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2220      	movs	r2, #32
 800746e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2200      	movs	r2, #0
 8007476:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7f9 fd43 	bl	8000f0c <HAL_I2C_SlaveTxCpltCallback>
}
 8007486:	bf00      	nop
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	fe00e800 	.word	0xfe00e800
 8007494:	ffff0000 	.word	0xffff0000

08007498 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a26      	ldr	r2, [pc, #152]	@ (8007540 <I2C_ITListenCplt+0xa8>)
 80074a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2220      	movs	r2, #32
 80074b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	089b      	lsrs	r3, r3, #2
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d022      	beq.n	8007516 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e2:	1c5a      	adds	r2, r3, #1
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d012      	beq.n	8007516 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074f4:	3b01      	subs	r3, #1
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750e:	f043 0204 	orr.w	r2, r3, #4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007516:	f248 0103 	movw	r1, #32771	@ 0x8003
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fa22 	bl	8007964 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2210      	movs	r2, #16
 8007526:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7f9 fcfb 	bl	8000f2c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	ffff0000 	.word	0xffff0000

08007544 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007554:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a6d      	ldr	r2, [pc, #436]	@ (8007718 <I2C_ITError+0x1d4>)
 8007562:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	2b28      	cmp	r3, #40	@ 0x28
 800757a:	d005      	beq.n	8007588 <I2C_ITError+0x44>
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	2b29      	cmp	r3, #41	@ 0x29
 8007580:	d002      	beq.n	8007588 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	2b2a      	cmp	r3, #42	@ 0x2a
 8007586:	d10b      	bne.n	80075a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007588:	2103      	movs	r1, #3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f9ea 	bl	8007964 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2228      	movs	r2, #40	@ 0x28
 8007594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a60      	ldr	r2, [pc, #384]	@ (800771c <I2C_ITError+0x1d8>)
 800759c:	635a      	str	r2, [r3, #52]	@ 0x34
 800759e:	e030      	b.n	8007602 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80075a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f9dd 	bl	8007964 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f8e1 	bl	8007772 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b60      	cmp	r3, #96	@ 0x60
 80075ba:	d01f      	beq.n	80075fc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f003 0320 	and.w	r3, r3, #32
 80075ce:	2b20      	cmp	r3, #32
 80075d0:	d114      	bne.n	80075fc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b10      	cmp	r3, #16
 80075de:	d109      	bne.n	80075f4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2210      	movs	r2, #16
 80075e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075ec:	f043 0204 	orr.w	r2, r3, #4
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	2220      	movs	r2, #32
 80075fa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007606:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d039      	beq.n	8007684 <I2C_ITError+0x140>
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2b11      	cmp	r3, #17
 8007614:	d002      	beq.n	800761c <I2C_ITError+0xd8>
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	2b21      	cmp	r3, #33	@ 0x21
 800761a:	d133      	bne.n	8007684 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007626:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800762a:	d107      	bne.n	800763c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800763a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	4618      	mov	r0, r3
 8007642:	f7fe f84d 	bl	80056e0 <HAL_DMA_GetState>
 8007646:	4603      	mov	r3, r0
 8007648:	2b01      	cmp	r3, #1
 800764a:	d017      	beq.n	800767c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007650:	4a33      	ldr	r2, [pc, #204]	@ (8007720 <I2C_ITError+0x1dc>)
 8007652:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	4618      	mov	r0, r3
 8007662:	f7fd ffd6 	bl	8005612 <HAL_DMA_Abort_IT>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d04d      	beq.n	8007708 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007676:	4610      	mov	r0, r2
 8007678:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800767a:	e045      	b.n	8007708 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f851 	bl	8007724 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007682:	e041      	b.n	8007708 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007688:	2b00      	cmp	r3, #0
 800768a:	d039      	beq.n	8007700 <I2C_ITError+0x1bc>
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2b12      	cmp	r3, #18
 8007690:	d002      	beq.n	8007698 <I2C_ITError+0x154>
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2b22      	cmp	r3, #34	@ 0x22
 8007696:	d133      	bne.n	8007700 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80076a6:	d107      	bne.n	80076b8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80076b6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076bc:	4618      	mov	r0, r3
 80076be:	f7fe f80f 	bl	80056e0 <HAL_DMA_GetState>
 80076c2:	4603      	mov	r3, r0
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d017      	beq.n	80076f8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076cc:	4a14      	ldr	r2, [pc, #80]	@ (8007720 <I2C_ITError+0x1dc>)
 80076ce:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076dc:	4618      	mov	r0, r3
 80076de:	f7fd ff98 	bl	8005612 <HAL_DMA_Abort_IT>
 80076e2:	4603      	mov	r3, r0
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d011      	beq.n	800770c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80076f2:	4610      	mov	r0, r2
 80076f4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076f6:	e009      	b.n	800770c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 f813 	bl	8007724 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80076fe:	e005      	b.n	800770c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f80f 	bl	8007724 <I2C_TreatErrorCallback>
  }
}
 8007706:	e002      	b.n	800770e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800770c:	bf00      	nop
}
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	ffff0000 	.word	0xffff0000
 800771c:	080065e1 	.word	0x080065e1
 8007720:	080077bb 	.word	0x080077bb

08007724 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007732:	b2db      	uxtb	r3, r3
 8007734:	2b60      	cmp	r3, #96	@ 0x60
 8007736:	d10e      	bne.n	8007756 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2220      	movs	r2, #32
 800773c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f7fe ff3c 	bl	80065cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007754:	e009      	b.n	800776a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f7fe ff27 	bl	80065b8 <HAL_I2C_ErrorCallback>
}
 800776a:	bf00      	nop
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}

08007772 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007772:	b480      	push	{r7}
 8007774:	b083      	sub	sp, #12
 8007776:	af00      	add	r7, sp, #0
 8007778:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	699b      	ldr	r3, [r3, #24]
 8007780:	f003 0302 	and.w	r3, r3, #2
 8007784:	2b02      	cmp	r3, #2
 8007786:	d103      	bne.n	8007790 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2200      	movs	r2, #0
 800778e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d007      	beq.n	80077ae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f042 0201 	orr.w	r2, r2, #1
 80077ac:	619a      	str	r2, [r3, #24]
  }
}
 80077ae:	bf00      	nop
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b8:	4770      	bx	lr

080077ba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077d4:	2200      	movs	r2, #0
 80077d6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d003      	beq.n	80077e8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e4:	2200      	movs	r2, #0
 80077e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80077e8:	68f8      	ldr	r0, [r7, #12]
 80077ea:	f7ff ff9b 	bl	8007724 <I2C_TreatErrorCallback>
}
 80077ee:	bf00      	nop
 80077f0:	3710      	adds	r7, #16
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
	...

080077f8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b087      	sub	sp, #28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	607b      	str	r3, [r7, #4]
 8007802:	460b      	mov	r3, r1
 8007804:	817b      	strh	r3, [r7, #10]
 8007806:	4613      	mov	r3, r2
 8007808:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800780a:	897b      	ldrh	r3, [r7, #10]
 800780c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007810:	7a7b      	ldrb	r3, [r7, #9]
 8007812:	041b      	lsls	r3, r3, #16
 8007814:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007818:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800781e:	6a3b      	ldr	r3, [r7, #32]
 8007820:	4313      	orrs	r3, r2
 8007822:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007826:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	685a      	ldr	r2, [r3, #4]
 800782e:	6a3b      	ldr	r3, [r7, #32]
 8007830:	0d5b      	lsrs	r3, r3, #21
 8007832:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007836:	4b08      	ldr	r3, [pc, #32]	@ (8007858 <I2C_TransferConfig+0x60>)
 8007838:	430b      	orrs	r3, r1
 800783a:	43db      	mvns	r3, r3
 800783c:	ea02 0103 	and.w	r1, r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	430a      	orrs	r2, r1
 8007848:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800784a:	bf00      	nop
 800784c:	371c      	adds	r7, #28
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	03ff63ff 	.word	0x03ff63ff

0800785c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007868:	2300      	movs	r3, #0
 800786a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007870:	4a39      	ldr	r2, [pc, #228]	@ (8007958 <I2C_Enable_IRQ+0xfc>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d032      	beq.n	80078dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800787a:	4a38      	ldr	r2, [pc, #224]	@ (800795c <I2C_Enable_IRQ+0x100>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d02d      	beq.n	80078dc <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8007884:	4a36      	ldr	r2, [pc, #216]	@ (8007960 <I2C_Enable_IRQ+0x104>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d028      	beq.n	80078dc <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800788a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800788e:	2b00      	cmp	r3, #0
 8007890:	da03      	bge.n	800789a <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8007898:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800789a:	887b      	ldrh	r3, [r7, #2]
 800789c:	f003 0301 	and.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d003      	beq.n	80078ac <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80078aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078ac:	887b      	ldrh	r3, [r7, #2]
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d003      	beq.n	80078be <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 80078bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80078be:	887b      	ldrh	r3, [r7, #2]
 80078c0:	2b10      	cmp	r3, #16
 80078c2:	d103      	bne.n	80078cc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80078ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078cc:	887b      	ldrh	r3, [r7, #2]
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d133      	bne.n	800793a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f043 0320 	orr.w	r3, r3, #32
 80078d8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80078da:	e02e      	b.n	800793a <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80078dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	da03      	bge.n	80078ec <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80078ea:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80078ec:	887b      	ldrh	r3, [r7, #2]
 80078ee:	f003 0301 	and.w	r3, r3, #1
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d003      	beq.n	80078fe <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 80078fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80078fe:	887b      	ldrh	r3, [r7, #2]
 8007900:	f003 0302 	and.w	r3, r3, #2
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 800790e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8007910:	887b      	ldrh	r3, [r7, #2]
 8007912:	2b10      	cmp	r3, #16
 8007914:	d103      	bne.n	800791e <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800791c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800791e:	887b      	ldrh	r3, [r7, #2]
 8007920:	2b20      	cmp	r3, #32
 8007922:	d103      	bne.n	800792c <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800792a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800792c:	887b      	ldrh	r3, [r7, #2]
 800792e:	2b40      	cmp	r3, #64	@ 0x40
 8007930:	d103      	bne.n	800793a <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007938:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	6819      	ldr	r1, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68fa      	ldr	r2, [r7, #12]
 8007946:	430a      	orrs	r2, r1
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	bf00      	nop
 800794c:	3714      	adds	r7, #20
 800794e:	46bd      	mov	sp, r7
 8007950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007954:	4770      	bx	lr
 8007956:	bf00      	nop
 8007958:	080067e9 	.word	0x080067e9
 800795c:	08006c31 	.word	0x08006c31
 8007960:	080069d1 	.word	0x080069d1

08007964 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007974:	887b      	ldrh	r3, [r7, #2]
 8007976:	f003 0301 	and.w	r3, r3, #1
 800797a:	2b00      	cmp	r3, #0
 800797c:	d00f      	beq.n	800799e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8007984:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800798c:	b2db      	uxtb	r3, r3
 800798e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007992:	2b28      	cmp	r3, #40	@ 0x28
 8007994:	d003      	beq.n	800799e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800799c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800799e:	887b      	ldrh	r3, [r7, #2]
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00f      	beq.n	80079c8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 80079ae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80079bc:	2b28      	cmp	r3, #40	@ 0x28
 80079be:	d003      	beq.n	80079c8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80079c6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80079c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	da03      	bge.n	80079d8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 80079d6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80079d8:	887b      	ldrh	r3, [r7, #2]
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d103      	bne.n	80079e6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 80079e4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80079e6:	887b      	ldrh	r3, [r7, #2]
 80079e8:	2b20      	cmp	r3, #32
 80079ea:	d103      	bne.n	80079f4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f043 0320 	orr.w	r3, r3, #32
 80079f2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80079f4:	887b      	ldrh	r3, [r7, #2]
 80079f6:	2b40      	cmp	r3, #64	@ 0x40
 80079f8:	d103      	bne.n	8007a02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6819      	ldr	r1, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	43da      	mvns	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	400a      	ands	r2, r1
 8007a12:	601a      	str	r2, [r3, #0]
}
 8007a14:	bf00      	nop
 8007a16:	3714      	adds	r7, #20
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b20      	cmp	r3, #32
 8007a34:	d138      	bne.n	8007aa8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e032      	b.n	8007aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2224      	movs	r2, #36	@ 0x24
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681a      	ldr	r2, [r3, #0]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0201 	bic.w	r2, r2, #1
 8007a62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007a72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	6819      	ldr	r1, [r3, #0]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	e000      	b.n	8007aaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007aa8:	2302      	movs	r3, #2
  }
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b085      	sub	sp, #20
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	d139      	bne.n	8007b40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e033      	b.n	8007b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2224      	movs	r2, #36	@ 0x24
 8007ae6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0201 	bic.w	r2, r2, #1
 8007af8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	021b      	lsls	r3, r3, #8
 8007b0e:	68fa      	ldr	r2, [r7, #12]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2220      	movs	r2, #32
 8007b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
 8007b3e:	e000      	b.n	8007b42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007b40:	2302      	movs	r3, #2
  }
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
	...

08007b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b085      	sub	sp, #20
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d141      	bne.n	8007be2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b6a:	d131      	bne.n	8007bd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007b6c:	4b47      	ldr	r3, [pc, #284]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b72:	4a46      	ldr	r2, [pc, #280]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b78:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b7c:	4b43      	ldr	r3, [pc, #268]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007b84:	4a41      	ldr	r2, [pc, #260]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007b8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007b8c:	4b40      	ldr	r3, [pc, #256]	@ (8007c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2232      	movs	r2, #50	@ 0x32
 8007b92:	fb02 f303 	mul.w	r3, r2, r3
 8007b96:	4a3f      	ldr	r2, [pc, #252]	@ (8007c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	0c9b      	lsrs	r3, r3, #18
 8007b9e:	3301      	adds	r3, #1
 8007ba0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ba2:	e002      	b.n	8007baa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007baa:	4b38      	ldr	r3, [pc, #224]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb6:	d102      	bne.n	8007bbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d1f2      	bne.n	8007ba4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007bbe:	4b33      	ldr	r3, [pc, #204]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bc0:	695b      	ldr	r3, [r3, #20]
 8007bc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bca:	d158      	bne.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e057      	b.n	8007c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bd6:	4a2d      	ldr	r2, [pc, #180]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bd8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bdc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007be0:	e04d      	b.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007be8:	d141      	bne.n	8007c6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bea:	4b28      	ldr	r3, [pc, #160]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf6:	d131      	bne.n	8007c5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bf8:	4b24      	ldr	r3, [pc, #144]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007bfe:	4a23      	ldr	r2, [pc, #140]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c04:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c08:	4b20      	ldr	r3, [pc, #128]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c10:	4a1e      	ldr	r2, [pc, #120]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c18:	4b1d      	ldr	r3, [pc, #116]	@ (8007c90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2232      	movs	r2, #50	@ 0x32
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
 8007c22:	4a1c      	ldr	r2, [pc, #112]	@ (8007c94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007c24:	fba2 2303 	umull	r2, r3, r2, r3
 8007c28:	0c9b      	lsrs	r3, r3, #18
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c2e:	e002      	b.n	8007c36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c36:	4b15      	ldr	r3, [pc, #84]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c42:	d102      	bne.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d1f2      	bne.n	8007c30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c4a:	4b10      	ldr	r3, [pc, #64]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007c56:	d112      	bne.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	e011      	b.n	8007c80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c62:	4a0a      	ldr	r2, [pc, #40]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c6c:	e007      	b.n	8007c7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007c6e:	4b07      	ldr	r3, [pc, #28]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c76:	4a05      	ldr	r2, [pc, #20]	@ (8007c8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007c78:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007c7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	40007000 	.word	0x40007000
 8007c90:	20000014 	.word	0x20000014
 8007c94:	431bde83 	.word	0x431bde83

08007c98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	4a04      	ldr	r2, [pc, #16]	@ (8007cb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ca6:	6093      	str	r3, [r2, #8]
}
 8007ca8:	bf00      	nop
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	40007000 	.word	0x40007000

08007cb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e2fe      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f003 0301 	and.w	r3, r3, #1
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d075      	beq.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cd6:	4b97      	ldr	r3, [pc, #604]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 030c 	and.w	r3, r3, #12
 8007cde:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ce0:	4b94      	ldr	r3, [pc, #592]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f003 0303 	and.w	r3, r3, #3
 8007ce8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007cea:	69bb      	ldr	r3, [r7, #24]
 8007cec:	2b0c      	cmp	r3, #12
 8007cee:	d102      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x3e>
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d002      	beq.n	8007cfc <HAL_RCC_OscConfig+0x44>
 8007cf6:	69bb      	ldr	r3, [r7, #24]
 8007cf8:	2b08      	cmp	r3, #8
 8007cfa:	d10b      	bne.n	8007d14 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cfc:	4b8d      	ldr	r3, [pc, #564]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d05b      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x108>
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d157      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e2d9      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d1c:	d106      	bne.n	8007d2c <HAL_RCC_OscConfig+0x74>
 8007d1e:	4b85      	ldr	r3, [pc, #532]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a84      	ldr	r2, [pc, #528]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	e01d      	b.n	8007d68 <HAL_RCC_OscConfig+0xb0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007d34:	d10c      	bne.n	8007d50 <HAL_RCC_OscConfig+0x98>
 8007d36:	4b7f      	ldr	r3, [pc, #508]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a7e      	ldr	r2, [pc, #504]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007d40:	6013      	str	r3, [r2, #0]
 8007d42:	4b7c      	ldr	r3, [pc, #496]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a7b      	ldr	r2, [pc, #492]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	e00b      	b.n	8007d68 <HAL_RCC_OscConfig+0xb0>
 8007d50:	4b78      	ldr	r3, [pc, #480]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a77      	ldr	r2, [pc, #476]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	4b75      	ldr	r3, [pc, #468]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a74      	ldr	r2, [pc, #464]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d013      	beq.n	8007d98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d70:	f7fb fa08 	bl	8003184 <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d76:	e008      	b.n	8007d8a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007d78:	f7fb fa04 	bl	8003184 <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	2b64      	cmp	r3, #100	@ 0x64
 8007d84:	d901      	bls.n	8007d8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007d86:	2303      	movs	r3, #3
 8007d88:	e29e      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d0f0      	beq.n	8007d78 <HAL_RCC_OscConfig+0xc0>
 8007d96:	e014      	b.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fb f9f4 	bl	8003184 <HAL_GetTick>
 8007d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007da0:	f7fb f9f0 	bl	8003184 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b64      	cmp	r3, #100	@ 0x64
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e28a      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007db2:	4b60      	ldr	r3, [pc, #384]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1f0      	bne.n	8007da0 <HAL_RCC_OscConfig+0xe8>
 8007dbe:	e000      	b.n	8007dc2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007dc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d075      	beq.n	8007eba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dce:	4b59      	ldr	r3, [pc, #356]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 030c 	and.w	r3, r3, #12
 8007dd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007dd8:	4b56      	ldr	r3, [pc, #344]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007de2:	69bb      	ldr	r3, [r7, #24]
 8007de4:	2b0c      	cmp	r3, #12
 8007de6:	d102      	bne.n	8007dee <HAL_RCC_OscConfig+0x136>
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d002      	beq.n	8007df4 <HAL_RCC_OscConfig+0x13c>
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d11f      	bne.n	8007e34 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007df4:	4b4f      	ldr	r3, [pc, #316]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d005      	beq.n	8007e0c <HAL_RCC_OscConfig+0x154>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	68db      	ldr	r3, [r3, #12]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d101      	bne.n	8007e0c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e25d      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e0c:	4b49      	ldr	r3, [pc, #292]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	4946      	ldr	r1, [pc, #280]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007e20:	4b45      	ldr	r3, [pc, #276]	@ (8007f38 <HAL_RCC_OscConfig+0x280>)
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fb f961 	bl	80030ec <HAL_InitTick>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d043      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	e249      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d023      	beq.n	8007e84 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a3c      	ldr	r2, [pc, #240]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e48:	f7fb f99c 	bl	8003184 <HAL_GetTick>
 8007e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e4e:	e008      	b.n	8007e62 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e50:	f7fb f998 	bl	8003184 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	693b      	ldr	r3, [r7, #16]
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	2b02      	cmp	r3, #2
 8007e5c:	d901      	bls.n	8007e62 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007e5e:	2303      	movs	r3, #3
 8007e60:	e232      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007e62:	4b34      	ldr	r3, [pc, #208]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d0f0      	beq.n	8007e50 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e6e:	4b31      	ldr	r3, [pc, #196]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	691b      	ldr	r3, [r3, #16]
 8007e7a:	061b      	lsls	r3, r3, #24
 8007e7c:	492d      	ldr	r1, [pc, #180]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	604b      	str	r3, [r1, #4]
 8007e82:	e01a      	b.n	8007eba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e84:	4b2b      	ldr	r3, [pc, #172]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a2a      	ldr	r2, [pc, #168]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007e8a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e90:	f7fb f978 	bl	8003184 <HAL_GetTick>
 8007e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007e96:	e008      	b.n	8007eaa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e98:	f7fb f974 	bl	8003184 <HAL_GetTick>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d901      	bls.n	8007eaa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007ea6:	2303      	movs	r3, #3
 8007ea8:	e20e      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007eaa:	4b22      	ldr	r3, [pc, #136]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f0      	bne.n	8007e98 <HAL_RCC_OscConfig+0x1e0>
 8007eb6:	e000      	b.n	8007eba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007eb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0308 	and.w	r3, r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d041      	beq.n	8007f4a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01c      	beq.n	8007f08 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ece:	4b19      	ldr	r3, [pc, #100]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007ed4:	4a17      	ldr	r2, [pc, #92]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007ed6:	f043 0301 	orr.w	r3, r3, #1
 8007eda:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ede:	f7fb f951 	bl	8003184 <HAL_GetTick>
 8007ee2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ee4:	e008      	b.n	8007ef8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ee6:	f7fb f94d 	bl	8003184 <HAL_GetTick>
 8007eea:	4602      	mov	r2, r0
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	1ad3      	subs	r3, r2, r3
 8007ef0:	2b02      	cmp	r3, #2
 8007ef2:	d901      	bls.n	8007ef8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	e1e7      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007efe:	f003 0302 	and.w	r3, r3, #2
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d0ef      	beq.n	8007ee6 <HAL_RCC_OscConfig+0x22e>
 8007f06:	e020      	b.n	8007f4a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f08:	4b0a      	ldr	r3, [pc, #40]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f0e:	4a09      	ldr	r2, [pc, #36]	@ (8007f34 <HAL_RCC_OscConfig+0x27c>)
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f18:	f7fb f934 	bl	8003184 <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f1e:	e00d      	b.n	8007f3c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f20:	f7fb f930 	bl	8003184 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d906      	bls.n	8007f3c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e1ca      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
 8007f32:	bf00      	nop
 8007f34:	40021000 	.word	0x40021000
 8007f38:	20000018 	.word	0x20000018
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007f3c:	4b8c      	ldr	r3, [pc, #560]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1ea      	bne.n	8007f20 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	f003 0304 	and.w	r3, r3, #4
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 80a6 	beq.w	80080a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f5c:	4b84      	ldr	r3, [pc, #528]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_RCC_OscConfig+0x2b4>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <HAL_RCC_OscConfig+0x2b6>
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00d      	beq.n	8007f8e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f72:	4b7f      	ldr	r3, [pc, #508]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f76:	4a7e      	ldr	r2, [pc, #504]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8007f7e:	4b7c      	ldr	r3, [pc, #496]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007f80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f8e:	4b79      	ldr	r3, [pc, #484]	@ (8008174 <HAL_RCC_OscConfig+0x4bc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d118      	bne.n	8007fcc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f9a:	4b76      	ldr	r3, [pc, #472]	@ (8008174 <HAL_RCC_OscConfig+0x4bc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a75      	ldr	r2, [pc, #468]	@ (8008174 <HAL_RCC_OscConfig+0x4bc>)
 8007fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007fa6:	f7fb f8ed 	bl	8003184 <HAL_GetTick>
 8007faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fae:	f7fb f8e9 	bl	8003184 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e183      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007fc0:	4b6c      	ldr	r3, [pc, #432]	@ (8008174 <HAL_RCC_OscConfig+0x4bc>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0f0      	beq.n	8007fae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d108      	bne.n	8007fe6 <HAL_RCC_OscConfig+0x32e>
 8007fd4:	4b66      	ldr	r3, [pc, #408]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fda:	4a65      	ldr	r2, [pc, #404]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007fdc:	f043 0301 	orr.w	r3, r3, #1
 8007fe0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007fe4:	e024      	b.n	8008030 <HAL_RCC_OscConfig+0x378>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d110      	bne.n	8008010 <HAL_RCC_OscConfig+0x358>
 8007fee:	4b60      	ldr	r3, [pc, #384]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8007ff6:	f043 0304 	orr.w	r3, r3, #4
 8007ffa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8007ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008004:	4a5a      	ldr	r2, [pc, #360]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008006:	f043 0301 	orr.w	r3, r3, #1
 800800a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800800e:	e00f      	b.n	8008030 <HAL_RCC_OscConfig+0x378>
 8008010:	4b57      	ldr	r3, [pc, #348]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008016:	4a56      	ldr	r2, [pc, #344]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008018:	f023 0301 	bic.w	r3, r3, #1
 800801c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008020:	4b53      	ldr	r3, [pc, #332]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008026:	4a52      	ldr	r2, [pc, #328]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008028:	f023 0304 	bic.w	r3, r3, #4
 800802c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d016      	beq.n	8008066 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008038:	f7fb f8a4 	bl	8003184 <HAL_GetTick>
 800803c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800803e:	e00a      	b.n	8008056 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008040:	f7fb f8a0 	bl	8003184 <HAL_GetTick>
 8008044:	4602      	mov	r2, r0
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	1ad3      	subs	r3, r2, r3
 800804a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800804e:	4293      	cmp	r3, r2
 8008050:	d901      	bls.n	8008056 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008052:	2303      	movs	r3, #3
 8008054:	e138      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008056:	4b46      	ldr	r3, [pc, #280]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800805c:	f003 0302 	and.w	r3, r3, #2
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0ed      	beq.n	8008040 <HAL_RCC_OscConfig+0x388>
 8008064:	e015      	b.n	8008092 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008066:	f7fb f88d 	bl	8003184 <HAL_GetTick>
 800806a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800806c:	e00a      	b.n	8008084 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800806e:	f7fb f889 	bl	8003184 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800807c:	4293      	cmp	r3, r2
 800807e:	d901      	bls.n	8008084 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e121      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008084:	4b3a      	ldr	r3, [pc, #232]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1ed      	bne.n	800806e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008092:	7ffb      	ldrb	r3, [r7, #31]
 8008094:	2b01      	cmp	r3, #1
 8008096:	d105      	bne.n	80080a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008098:	4b35      	ldr	r3, [pc, #212]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 800809a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800809c:	4a34      	ldr	r2, [pc, #208]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 800809e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080a2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0320 	and.w	r3, r3, #32
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d03c      	beq.n	800812a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d01c      	beq.n	80080f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080b8:	4b2d      	ldr	r3, [pc, #180]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 80080ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080be:	4a2c      	ldr	r2, [pc, #176]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 80080c0:	f043 0301 	orr.w	r3, r3, #1
 80080c4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c8:	f7fb f85c 	bl	8003184 <HAL_GetTick>
 80080cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080d0:	f7fb f858 	bl	8003184 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e0f2      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80080e2:	4b23      	ldr	r3, [pc, #140]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 80080e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080e8:	f003 0302 	and.w	r3, r3, #2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d0ef      	beq.n	80080d0 <HAL_RCC_OscConfig+0x418>
 80080f0:	e01b      	b.n	800812a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80080f2:	4b1f      	ldr	r3, [pc, #124]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 80080f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80080f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 80080fa:	f023 0301 	bic.w	r3, r3, #1
 80080fe:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008102:	f7fb f83f 	bl	8003184 <HAL_GetTick>
 8008106:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008108:	e008      	b.n	800811c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800810a:	f7fb f83b 	bl	8003184 <HAL_GetTick>
 800810e:	4602      	mov	r2, r0
 8008110:	693b      	ldr	r3, [r7, #16]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	2b02      	cmp	r3, #2
 8008116:	d901      	bls.n	800811c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e0d5      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800811c:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 800811e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008122:	f003 0302 	and.w	r3, r3, #2
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1ef      	bne.n	800810a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69db      	ldr	r3, [r3, #28]
 800812e:	2b00      	cmp	r3, #0
 8008130:	f000 80c9 	beq.w	80082c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008134:	4b0e      	ldr	r3, [pc, #56]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 030c 	and.w	r3, r3, #12
 800813c:	2b0c      	cmp	r3, #12
 800813e:	f000 8083 	beq.w	8008248 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	69db      	ldr	r3, [r3, #28]
 8008146:	2b02      	cmp	r3, #2
 8008148:	d15e      	bne.n	8008208 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800814a:	4b09      	ldr	r3, [pc, #36]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	4a08      	ldr	r2, [pc, #32]	@ (8008170 <HAL_RCC_OscConfig+0x4b8>)
 8008150:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008154:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008156:	f7fb f815 	bl	8003184 <HAL_GetTick>
 800815a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800815c:	e00c      	b.n	8008178 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800815e:	f7fb f811 	bl	8003184 <HAL_GetTick>
 8008162:	4602      	mov	r2, r0
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	1ad3      	subs	r3, r2, r3
 8008168:	2b02      	cmp	r3, #2
 800816a:	d905      	bls.n	8008178 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800816c:	2303      	movs	r3, #3
 800816e:	e0ab      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
 8008170:	40021000 	.word	0x40021000
 8008174:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008178:	4b55      	ldr	r3, [pc, #340]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1ec      	bne.n	800815e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008184:	4b52      	ldr	r3, [pc, #328]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 8008186:	68da      	ldr	r2, [r3, #12]
 8008188:	4b52      	ldr	r3, [pc, #328]	@ (80082d4 <HAL_RCC_OscConfig+0x61c>)
 800818a:	4013      	ands	r3, r2
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6a11      	ldr	r1, [r2, #32]
 8008190:	687a      	ldr	r2, [r7, #4]
 8008192:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008194:	3a01      	subs	r2, #1
 8008196:	0112      	lsls	r2, r2, #4
 8008198:	4311      	orrs	r1, r2
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800819e:	0212      	lsls	r2, r2, #8
 80081a0:	4311      	orrs	r1, r2
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80081a6:	0852      	lsrs	r2, r2, #1
 80081a8:	3a01      	subs	r2, #1
 80081aa:	0552      	lsls	r2, r2, #21
 80081ac:	4311      	orrs	r1, r2
 80081ae:	687a      	ldr	r2, [r7, #4]
 80081b0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80081b2:	0852      	lsrs	r2, r2, #1
 80081b4:	3a01      	subs	r2, #1
 80081b6:	0652      	lsls	r2, r2, #25
 80081b8:	4311      	orrs	r1, r2
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80081be:	06d2      	lsls	r2, r2, #27
 80081c0:	430a      	orrs	r2, r1
 80081c2:	4943      	ldr	r1, [pc, #268]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081c8:	4b41      	ldr	r3, [pc, #260]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a40      	ldr	r2, [pc, #256]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80081d4:	4b3e      	ldr	r3, [pc, #248]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	4a3d      	ldr	r2, [pc, #244]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e0:	f7fa ffd0 	bl	8003184 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081e6:	e008      	b.n	80081fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e8:	f7fa ffcc 	bl	8003184 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	2b02      	cmp	r3, #2
 80081f4:	d901      	bls.n	80081fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80081f6:	2303      	movs	r3, #3
 80081f8:	e066      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80081fa:	4b35      	ldr	r3, [pc, #212]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0f0      	beq.n	80081e8 <HAL_RCC_OscConfig+0x530>
 8008206:	e05e      	b.n	80082c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008208:	4b31      	ldr	r3, [pc, #196]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a30      	ldr	r2, [pc, #192]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 800820e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008214:	f7fa ffb6 	bl	8003184 <HAL_GetTick>
 8008218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800821a:	e008      	b.n	800822e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800821c:	f7fa ffb2 	bl	8003184 <HAL_GetTick>
 8008220:	4602      	mov	r2, r0
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	1ad3      	subs	r3, r2, r3
 8008226:	2b02      	cmp	r3, #2
 8008228:	d901      	bls.n	800822e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e04c      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800822e:	4b28      	ldr	r3, [pc, #160]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1f0      	bne.n	800821c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800823a:	4b25      	ldr	r3, [pc, #148]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	4924      	ldr	r1, [pc, #144]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 8008240:	4b25      	ldr	r3, [pc, #148]	@ (80082d8 <HAL_RCC_OscConfig+0x620>)
 8008242:	4013      	ands	r3, r2
 8008244:	60cb      	str	r3, [r1, #12]
 8008246:	e03e      	b.n	80082c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b01      	cmp	r3, #1
 800824e:	d101      	bne.n	8008254 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008250:	2301      	movs	r3, #1
 8008252:	e039      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008254:	4b1e      	ldr	r3, [pc, #120]	@ (80082d0 <HAL_RCC_OscConfig+0x618>)
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	f003 0203 	and.w	r2, r3, #3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6a1b      	ldr	r3, [r3, #32]
 8008264:	429a      	cmp	r2, r3
 8008266:	d12c      	bne.n	80082c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008272:	3b01      	subs	r3, #1
 8008274:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008276:	429a      	cmp	r2, r3
 8008278:	d123      	bne.n	80082c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008284:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008286:	429a      	cmp	r2, r3
 8008288:	d11b      	bne.n	80082c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d113      	bne.n	80082c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800829a:	697b      	ldr	r3, [r7, #20]
 800829c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a4:	085b      	lsrs	r3, r3, #1
 80082a6:	3b01      	subs	r3, #1
 80082a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d109      	bne.n	80082c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	3b01      	subs	r3, #1
 80082bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082be:	429a      	cmp	r2, r3
 80082c0:	d001      	beq.n	80082c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80082c2:	2301      	movs	r3, #1
 80082c4:	e000      	b.n	80082c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80082c6:	2300      	movs	r3, #0
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3720      	adds	r7, #32
 80082cc:	46bd      	mov	sp, r7
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	40021000 	.word	0x40021000
 80082d4:	019f800c 	.word	0x019f800c
 80082d8:	feeefffc 	.word	0xfeeefffc

080082dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b086      	sub	sp, #24
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80082e6:	2300      	movs	r3, #0
 80082e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80082f0:	2301      	movs	r3, #1
 80082f2:	e11e      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80082f4:	4b91      	ldr	r3, [pc, #580]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 030f 	and.w	r3, r3, #15
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d910      	bls.n	8008324 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008302:	4b8e      	ldr	r3, [pc, #568]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f023 020f 	bic.w	r2, r3, #15
 800830a:	498c      	ldr	r1, [pc, #560]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	4313      	orrs	r3, r2
 8008310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008312:	4b8a      	ldr	r3, [pc, #552]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 030f 	and.w	r3, r3, #15
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	429a      	cmp	r2, r3
 800831e:	d001      	beq.n	8008324 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e106      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0301 	and.w	r3, r3, #1
 800832c:	2b00      	cmp	r3, #0
 800832e:	d073      	beq.n	8008418 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	2b03      	cmp	r3, #3
 8008336:	d129      	bne.n	800838c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008338:	4b81      	ldr	r3, [pc, #516]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008340:	2b00      	cmp	r3, #0
 8008342:	d101      	bne.n	8008348 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	e0f4      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008348:	f000 f99c 	bl	8008684 <RCC_GetSysClockFreqFromPLLSource>
 800834c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	4a7c      	ldr	r2, [pc, #496]	@ (8008544 <HAL_RCC_ClockConfig+0x268>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d93f      	bls.n	80083d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008356:	4b7a      	ldr	r3, [pc, #488]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008358:	689b      	ldr	r3, [r3, #8]
 800835a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d009      	beq.n	8008376 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800836a:	2b00      	cmp	r3, #0
 800836c:	d033      	beq.n	80083d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008372:	2b00      	cmp	r3, #0
 8008374:	d12f      	bne.n	80083d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008376:	4b72      	ldr	r3, [pc, #456]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008378:	689b      	ldr	r3, [r3, #8]
 800837a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800837e:	4a70      	ldr	r2, [pc, #448]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008380:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008384:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008386:	2380      	movs	r3, #128	@ 0x80
 8008388:	617b      	str	r3, [r7, #20]
 800838a:	e024      	b.n	80083d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	2b02      	cmp	r3, #2
 8008392:	d107      	bne.n	80083a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008394:	4b6a      	ldr	r3, [pc, #424]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	e0c6      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083a4:	4b66      	ldr	r3, [pc, #408]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e0be      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80083b4:	f000 f8ce 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 80083b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	4a61      	ldr	r2, [pc, #388]	@ (8008544 <HAL_RCC_ClockConfig+0x268>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d909      	bls.n	80083d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083c2:	4b5f      	ldr	r3, [pc, #380]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083ca:	4a5d      	ldr	r2, [pc, #372]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80083cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80083d2:	2380      	movs	r3, #128	@ 0x80
 80083d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80083d6:	4b5a      	ldr	r3, [pc, #360]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80083d8:	689b      	ldr	r3, [r3, #8]
 80083da:	f023 0203 	bic.w	r2, r3, #3
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	4957      	ldr	r1, [pc, #348]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083e8:	f7fa fecc 	bl	8003184 <HAL_GetTick>
 80083ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083ee:	e00a      	b.n	8008406 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083f0:	f7fa fec8 	bl	8003184 <HAL_GetTick>
 80083f4:	4602      	mov	r2, r0
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	1ad3      	subs	r3, r2, r3
 80083fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083fe:	4293      	cmp	r3, r2
 8008400:	d901      	bls.n	8008406 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008402:	2303      	movs	r3, #3
 8008404:	e095      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008406:	4b4e      	ldr	r3, [pc, #312]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 020c 	and.w	r2, r3, #12
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	685b      	ldr	r3, [r3, #4]
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	429a      	cmp	r2, r3
 8008416:	d1eb      	bne.n	80083f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d023      	beq.n	800846c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008430:	4b43      	ldr	r3, [pc, #268]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a42      	ldr	r2, [pc, #264]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008436:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800843a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d007      	beq.n	8008458 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008448:	4b3d      	ldr	r3, [pc, #244]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008450:	4a3b      	ldr	r2, [pc, #236]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008452:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008456:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008458:	4b39      	ldr	r3, [pc, #228]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	4936      	ldr	r1, [pc, #216]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008466:	4313      	orrs	r3, r2
 8008468:	608b      	str	r3, [r1, #8]
 800846a:	e008      	b.n	800847e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	2b80      	cmp	r3, #128	@ 0x80
 8008470:	d105      	bne.n	800847e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008472:	4b33      	ldr	r3, [pc, #204]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008474:	689b      	ldr	r3, [r3, #8]
 8008476:	4a32      	ldr	r2, [pc, #200]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008478:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800847c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800847e:	4b2f      	ldr	r3, [pc, #188]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d21d      	bcs.n	80084c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848c:	4b2b      	ldr	r3, [pc, #172]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f023 020f 	bic.w	r2, r3, #15
 8008494:	4929      	ldr	r1, [pc, #164]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	4313      	orrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800849c:	f7fa fe72 	bl	8003184 <HAL_GetTick>
 80084a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084a2:	e00a      	b.n	80084ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084a4:	f7fa fe6e 	bl	8003184 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e03b      	b.n	8008532 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084ba:	4b20      	ldr	r3, [pc, #128]	@ (800853c <HAL_RCC_ClockConfig+0x260>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 030f 	and.w	r3, r3, #15
 80084c2:	683a      	ldr	r2, [r7, #0]
 80084c4:	429a      	cmp	r2, r3
 80084c6:	d1ed      	bne.n	80084a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d008      	beq.n	80084e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80084d6:	689b      	ldr	r3, [r3, #8]
 80084d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	4917      	ldr	r1, [pc, #92]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80084e2:	4313      	orrs	r3, r2
 80084e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f003 0308 	and.w	r3, r3, #8
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80084f2:	4b13      	ldr	r3, [pc, #76]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	00db      	lsls	r3, r3, #3
 8008500:	490f      	ldr	r1, [pc, #60]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 8008502:	4313      	orrs	r3, r2
 8008504:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008506:	f000 f825 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 800850a:	4602      	mov	r2, r0
 800850c:	4b0c      	ldr	r3, [pc, #48]	@ (8008540 <HAL_RCC_ClockConfig+0x264>)
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	091b      	lsrs	r3, r3, #4
 8008512:	f003 030f 	and.w	r3, r3, #15
 8008516:	490c      	ldr	r1, [pc, #48]	@ (8008548 <HAL_RCC_ClockConfig+0x26c>)
 8008518:	5ccb      	ldrb	r3, [r1, r3]
 800851a:	f003 031f 	and.w	r3, r3, #31
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	4a0a      	ldr	r2, [pc, #40]	@ (800854c <HAL_RCC_ClockConfig+0x270>)
 8008524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008526:	4b0a      	ldr	r3, [pc, #40]	@ (8008550 <HAL_RCC_ClockConfig+0x274>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4618      	mov	r0, r3
 800852c:	f7fa fdde 	bl	80030ec <HAL_InitTick>
 8008530:	4603      	mov	r3, r0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40022000 	.word	0x40022000
 8008540:	40021000 	.word	0x40021000
 8008544:	04c4b400 	.word	0x04c4b400
 8008548:	0800ad70 	.word	0x0800ad70
 800854c:	20000014 	.word	0x20000014
 8008550:	20000018 	.word	0x20000018

08008554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008554:	b480      	push	{r7}
 8008556:	b087      	sub	sp, #28
 8008558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800855a:	4b2c      	ldr	r3, [pc, #176]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f003 030c 	and.w	r3, r3, #12
 8008562:	2b04      	cmp	r3, #4
 8008564:	d102      	bne.n	800856c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008566:	4b2a      	ldr	r3, [pc, #168]	@ (8008610 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008568:	613b      	str	r3, [r7, #16]
 800856a:	e047      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800856c:	4b27      	ldr	r3, [pc, #156]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f003 030c 	and.w	r3, r3, #12
 8008574:	2b08      	cmp	r3, #8
 8008576:	d102      	bne.n	800857e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008578:	4b25      	ldr	r3, [pc, #148]	@ (8008610 <HAL_RCC_GetSysClockFreq+0xbc>)
 800857a:	613b      	str	r3, [r7, #16]
 800857c:	e03e      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800857e:	4b23      	ldr	r3, [pc, #140]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	f003 030c 	and.w	r3, r3, #12
 8008586:	2b0c      	cmp	r3, #12
 8008588:	d136      	bne.n	80085f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800858a:	4b20      	ldr	r3, [pc, #128]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 800858c:	68db      	ldr	r3, [r3, #12]
 800858e:	f003 0303 	and.w	r3, r3, #3
 8008592:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008594:	4b1d      	ldr	r3, [pc, #116]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008596:	68db      	ldr	r3, [r3, #12]
 8008598:	091b      	lsrs	r3, r3, #4
 800859a:	f003 030f 	and.w	r3, r3, #15
 800859e:	3301      	adds	r3, #1
 80085a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b03      	cmp	r3, #3
 80085a6:	d10c      	bne.n	80085c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085a8:	4a19      	ldr	r2, [pc, #100]	@ (8008610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b0:	4a16      	ldr	r2, [pc, #88]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085b2:	68d2      	ldr	r2, [r2, #12]
 80085b4:	0a12      	lsrs	r2, r2, #8
 80085b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085ba:	fb02 f303 	mul.w	r3, r2, r3
 80085be:	617b      	str	r3, [r7, #20]
      break;
 80085c0:	e00c      	b.n	80085dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80085c2:	4a13      	ldr	r2, [pc, #76]	@ (8008610 <HAL_RCC_GetSysClockFreq+0xbc>)
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ca:	4a10      	ldr	r2, [pc, #64]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085cc:	68d2      	ldr	r2, [r2, #12]
 80085ce:	0a12      	lsrs	r2, r2, #8
 80085d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80085d4:	fb02 f303 	mul.w	r3, r2, r3
 80085d8:	617b      	str	r3, [r7, #20]
      break;
 80085da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80085dc:	4b0b      	ldr	r3, [pc, #44]	@ (800860c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	0e5b      	lsrs	r3, r3, #25
 80085e2:	f003 0303 	and.w	r3, r3, #3
 80085e6:	3301      	adds	r3, #1
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e001      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80085f8:	2300      	movs	r3, #0
 80085fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80085fc:	693b      	ldr	r3, [r7, #16]
}
 80085fe:	4618      	mov	r0, r3
 8008600:	371c      	adds	r7, #28
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	40021000 	.word	0x40021000
 8008610:	00f42400 	.word	0x00f42400

08008614 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008614:	b480      	push	{r7}
 8008616:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008618:	4b03      	ldr	r3, [pc, #12]	@ (8008628 <HAL_RCC_GetHCLKFreq+0x14>)
 800861a:	681b      	ldr	r3, [r3, #0]
}
 800861c:	4618      	mov	r0, r3
 800861e:	46bd      	mov	sp, r7
 8008620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008624:	4770      	bx	lr
 8008626:	bf00      	nop
 8008628:	20000014 	.word	0x20000014

0800862c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008630:	f7ff fff0 	bl	8008614 <HAL_RCC_GetHCLKFreq>
 8008634:	4602      	mov	r2, r0
 8008636:	4b06      	ldr	r3, [pc, #24]	@ (8008650 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	0a1b      	lsrs	r3, r3, #8
 800863c:	f003 0307 	and.w	r3, r3, #7
 8008640:	4904      	ldr	r1, [pc, #16]	@ (8008654 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008642:	5ccb      	ldrb	r3, [r1, r3]
 8008644:	f003 031f 	and.w	r3, r3, #31
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800864c:	4618      	mov	r0, r3
 800864e:	bd80      	pop	{r7, pc}
 8008650:	40021000 	.word	0x40021000
 8008654:	0800ad80 	.word	0x0800ad80

08008658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800865c:	f7ff ffda 	bl	8008614 <HAL_RCC_GetHCLKFreq>
 8008660:	4602      	mov	r2, r0
 8008662:	4b06      	ldr	r3, [pc, #24]	@ (800867c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	0adb      	lsrs	r3, r3, #11
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	4904      	ldr	r1, [pc, #16]	@ (8008680 <HAL_RCC_GetPCLK2Freq+0x28>)
 800866e:	5ccb      	ldrb	r3, [r1, r3]
 8008670:	f003 031f 	and.w	r3, r3, #31
 8008674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008678:	4618      	mov	r0, r3
 800867a:	bd80      	pop	{r7, pc}
 800867c:	40021000 	.word	0x40021000
 8008680:	0800ad80 	.word	0x0800ad80

08008684 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800868a:	4b1e      	ldr	r3, [pc, #120]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800868c:	68db      	ldr	r3, [r3, #12]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008694:	4b1b      	ldr	r3, [pc, #108]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	091b      	lsrs	r3, r3, #4
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	3301      	adds	r3, #1
 80086a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	2b03      	cmp	r3, #3
 80086a6:	d10c      	bne.n	80086c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086a8:	4a17      	ldr	r2, [pc, #92]	@ (8008708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80086b0:	4a14      	ldr	r2, [pc, #80]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086b2:	68d2      	ldr	r2, [r2, #12]
 80086b4:	0a12      	lsrs	r2, r2, #8
 80086b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086ba:	fb02 f303 	mul.w	r3, r2, r3
 80086be:	617b      	str	r3, [r7, #20]
    break;
 80086c0:	e00c      	b.n	80086dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086c2:	4a11      	ldr	r2, [pc, #68]	@ (8008708 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80086ca:	4a0e      	ldr	r2, [pc, #56]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086cc:	68d2      	ldr	r2, [r2, #12]
 80086ce:	0a12      	lsrs	r2, r2, #8
 80086d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80086d4:	fb02 f303 	mul.w	r3, r2, r3
 80086d8:	617b      	str	r3, [r7, #20]
    break;
 80086da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80086dc:	4b09      	ldr	r3, [pc, #36]	@ (8008704 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	0e5b      	lsrs	r3, r3, #25
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	3301      	adds	r3, #1
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80086ec:	697a      	ldr	r2, [r7, #20]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80086f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80086f6:	687b      	ldr	r3, [r7, #4]
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	371c      	adds	r7, #28
 80086fc:	46bd      	mov	sp, r7
 80086fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008702:	4770      	bx	lr
 8008704:	40021000 	.word	0x40021000
 8008708:	00f42400 	.word	0x00f42400

0800870c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008714:	2300      	movs	r3, #0
 8008716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008718:	2300      	movs	r3, #0
 800871a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 8098 	beq.w	800885a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800872a:	2300      	movs	r3, #0
 800872c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800872e:	4b43      	ldr	r3, [pc, #268]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10d      	bne.n	8008756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800873a:	4b40      	ldr	r3, [pc, #256]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800873c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800873e:	4a3f      	ldr	r2, [pc, #252]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008744:	6593      	str	r3, [r2, #88]	@ 0x58
 8008746:	4b3d      	ldr	r3, [pc, #244]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800874a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800874e:	60bb      	str	r3, [r7, #8]
 8008750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008752:	2301      	movs	r3, #1
 8008754:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008756:	4b3a      	ldr	r3, [pc, #232]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a39      	ldr	r2, [pc, #228]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800875c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008762:	f7fa fd0f 	bl	8003184 <HAL_GetTick>
 8008766:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008768:	e009      	b.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800876a:	f7fa fd0b 	bl	8003184 <HAL_GetTick>
 800876e:	4602      	mov	r2, r0
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	1ad3      	subs	r3, r2, r3
 8008774:	2b02      	cmp	r3, #2
 8008776:	d902      	bls.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008778:	2303      	movs	r3, #3
 800877a:	74fb      	strb	r3, [r7, #19]
        break;
 800877c:	e005      	b.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800877e:	4b30      	ldr	r3, [pc, #192]	@ (8008840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008786:	2b00      	cmp	r3, #0
 8008788:	d0ef      	beq.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800878a:	7cfb      	ldrb	r3, [r7, #19]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d159      	bne.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008790:	4b2a      	ldr	r3, [pc, #168]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800879a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01e      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80087a6:	697a      	ldr	r2, [r7, #20]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d019      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80087ac:	4b23      	ldr	r3, [pc, #140]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80087b8:	4b20      	ldr	r3, [pc, #128]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087be:	4a1f      	ldr	r2, [pc, #124]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80087c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80087c8:	4b1c      	ldr	r3, [pc, #112]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087ce:	4a1b      	ldr	r2, [pc, #108]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80087d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80087d8:	4a18      	ldr	r2, [pc, #96]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d016      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087ea:	f7fa fccb 	bl	8003184 <HAL_GetTick>
 80087ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087f0:	e00b      	b.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087f2:	f7fa fcc7 	bl	8003184 <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008800:	4293      	cmp	r3, r2
 8008802:	d902      	bls.n	800880a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	74fb      	strb	r3, [r7, #19]
            break;
 8008808:	e006      	b.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800880a:	4b0c      	ldr	r3, [pc, #48]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800880c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d0ec      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008818:	7cfb      	ldrb	r3, [r7, #19]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800881e:	4b07      	ldr	r3, [pc, #28]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800882c:	4903      	ldr	r1, [pc, #12]	@ (800883c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008834:	e008      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008836:	7cfb      	ldrb	r3, [r7, #19]
 8008838:	74bb      	strb	r3, [r7, #18]
 800883a:	e005      	b.n	8008848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800883c:	40021000 	.word	0x40021000
 8008840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008844:	7cfb      	ldrb	r3, [r7, #19]
 8008846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008848:	7c7b      	ldrb	r3, [r7, #17]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d105      	bne.n	800885a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800884e:	4ba7      	ldr	r3, [pc, #668]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008852:	4aa6      	ldr	r2, [pc, #664]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0301 	and.w	r3, r3, #1
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008866:	4ba1      	ldr	r3, [pc, #644]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800886c:	f023 0203 	bic.w	r2, r3, #3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	685b      	ldr	r3, [r3, #4]
 8008874:	499d      	ldr	r1, [pc, #628]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008876:	4313      	orrs	r3, r2
 8008878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f003 0302 	and.w	r3, r3, #2
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00a      	beq.n	800889e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008888:	4b98      	ldr	r3, [pc, #608]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800888a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800888e:	f023 020c 	bic.w	r2, r3, #12
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	4995      	ldr	r1, [pc, #596]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008898:	4313      	orrs	r3, r2
 800889a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80088aa:	4b90      	ldr	r3, [pc, #576]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	498c      	ldr	r1, [pc, #560]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d00a      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088cc:	4b87      	ldr	r3, [pc, #540]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	691b      	ldr	r3, [r3, #16]
 80088da:	4984      	ldr	r1, [pc, #528]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 0310 	and.w	r3, r3, #16
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00a      	beq.n	8008904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80088ee:	4b7f      	ldr	r3, [pc, #508]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	497b      	ldr	r1, [pc, #492]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80088fe:	4313      	orrs	r3, r2
 8008900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0320 	and.w	r3, r3, #32
 800890c:	2b00      	cmp	r3, #0
 800890e:	d00a      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008910:	4b76      	ldr	r3, [pc, #472]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008916:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	699b      	ldr	r3, [r3, #24]
 800891e:	4973      	ldr	r1, [pc, #460]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008920:	4313      	orrs	r3, r2
 8008922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800892e:	2b00      	cmp	r3, #0
 8008930:	d00a      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008932:	4b6e      	ldr	r3, [pc, #440]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	69db      	ldr	r3, [r3, #28]
 8008940:	496a      	ldr	r1, [pc, #424]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00a      	beq.n	800896a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008954:	4b65      	ldr	r3, [pc, #404]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800895a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6a1b      	ldr	r3, [r3, #32]
 8008962:	4962      	ldr	r1, [pc, #392]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008964:	4313      	orrs	r3, r2
 8008966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008972:	2b00      	cmp	r3, #0
 8008974:	d00a      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008976:	4b5d      	ldr	r3, [pc, #372]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800897c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008984:	4959      	ldr	r1, [pc, #356]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008986:	4313      	orrs	r3, r2
 8008988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00a      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008998:	4b54      	ldr	r3, [pc, #336]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800899a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800899e:	f023 0203 	bic.w	r2, r3, #3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a6:	4951      	ldr	r1, [pc, #324]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a8:	4313      	orrs	r3, r2
 80089aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80089ba:	4b4c      	ldr	r3, [pc, #304]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089c8:	4948      	ldr	r1, [pc, #288]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ca:	4313      	orrs	r3, r2
 80089cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d015      	beq.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80089dc:	4b43      	ldr	r3, [pc, #268]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ea:	4940      	ldr	r1, [pc, #256]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ec:	4313      	orrs	r3, r2
 80089ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80089fa:	d105      	bne.n	8008a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089fc:	4b3b      	ldr	r3, [pc, #236]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	4a3a      	ldr	r2, [pc, #232]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d015      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008a14:	4b35      	ldr	r3, [pc, #212]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a22:	4932      	ldr	r1, [pc, #200]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a24:	4313      	orrs	r3, r2
 8008a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a32:	d105      	bne.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a34:	4b2d      	ldr	r3, [pc, #180]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	4a2c      	ldr	r2, [pc, #176]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d015      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008a4c:	4b27      	ldr	r3, [pc, #156]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a5a:	4924      	ldr	r1, [pc, #144]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008a6a:	d105      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a6e:	68db      	ldr	r3, [r3, #12]
 8008a70:	4a1e      	ldr	r2, [pc, #120]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d015      	beq.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a84:	4b19      	ldr	r3, [pc, #100]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a92:	4916      	ldr	r1, [pc, #88]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a94:	4313      	orrs	r3, r2
 8008a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008aa2:	d105      	bne.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008aa4:	4b11      	ldr	r3, [pc, #68]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	4a10      	ldr	r2, [pc, #64]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d019      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008abc:	4b0b      	ldr	r3, [pc, #44]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aca:	4908      	ldr	r1, [pc, #32]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008acc:	4313      	orrs	r3, r2
 8008ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ada:	d109      	bne.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008adc:	4b03      	ldr	r3, [pc, #12]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	4a02      	ldr	r2, [pc, #8]	@ (8008aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ae6:	60d3      	str	r3, [r2, #12]
 8008ae8:	e002      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008aea:	bf00      	nop
 8008aec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d015      	beq.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008afc:	4b29      	ldr	r3, [pc, #164]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b0a:	4926      	ldr	r1, [pc, #152]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008b1a:	d105      	bne.n	8008b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b1c:	4b21      	ldr	r3, [pc, #132]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	4a20      	ldr	r2, [pc, #128]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d015      	beq.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008b34:	4b1b      	ldr	r3, [pc, #108]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b42:	4918      	ldr	r1, [pc, #96]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b52:	d105      	bne.n	8008b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008b54:	4b13      	ldr	r3, [pc, #76]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b56:	68db      	ldr	r3, [r3, #12]
 8008b58:	4a12      	ldr	r2, [pc, #72]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008b5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d015      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b7a:	490a      	ldr	r1, [pc, #40]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008b8a:	d105      	bne.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4a04      	ldr	r2, [pc, #16]	@ (8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop
 8008ba4:	40021000 	.word	0x40021000

08008ba8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d101      	bne.n	8008bba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e049      	b.n	8008c4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d106      	bne.n	8008bd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f7f9 ff10 	bl	80029f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2202      	movs	r2, #2
 8008bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	3304      	adds	r3, #4
 8008be4:	4619      	mov	r1, r3
 8008be6:	4610      	mov	r0, r2
 8008be8:	f000 fc44 	bl	8009474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2201      	movs	r2, #1
 8008c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2201      	movs	r2, #1
 8008c20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2201      	movs	r2, #1
 8008c38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2201      	movs	r2, #1
 8008c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d001      	beq.n	8008c70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e04c      	b.n	8008d0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2202      	movs	r2, #2
 8008c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	4a26      	ldr	r2, [pc, #152]	@ (8008d18 <HAL_TIM_Base_Start+0xc0>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d022      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c8a:	d01d      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a22      	ldr	r2, [pc, #136]	@ (8008d1c <HAL_TIM_Base_Start+0xc4>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d018      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	4a21      	ldr	r2, [pc, #132]	@ (8008d20 <HAL_TIM_Base_Start+0xc8>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d013      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a1f      	ldr	r2, [pc, #124]	@ (8008d24 <HAL_TIM_Base_Start+0xcc>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1e      	ldr	r2, [pc, #120]	@ (8008d28 <HAL_TIM_Base_Start+0xd0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d2c <HAL_TIM_Base_Start+0xd4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d004      	beq.n	8008cc8 <HAL_TIM_Base_Start+0x70>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a1b      	ldr	r2, [pc, #108]	@ (8008d30 <HAL_TIM_Base_Start+0xd8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d115      	bne.n	8008cf4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689a      	ldr	r2, [r3, #8]
 8008cce:	4b19      	ldr	r3, [pc, #100]	@ (8008d34 <HAL_TIM_Base_Start+0xdc>)
 8008cd0:	4013      	ands	r3, r2
 8008cd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2b06      	cmp	r3, #6
 8008cd8:	d015      	beq.n	8008d06 <HAL_TIM_Base_Start+0xae>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ce0:	d011      	beq.n	8008d06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f042 0201 	orr.w	r2, r2, #1
 8008cf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008cf2:	e008      	b.n	8008d06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f042 0201 	orr.w	r2, r2, #1
 8008d02:	601a      	str	r2, [r3, #0]
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d08:	2300      	movs	r3, #0
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40000400 	.word	0x40000400
 8008d20:	40000800 	.word	0x40000800
 8008d24:	40000c00 	.word	0x40000c00
 8008d28:	40013400 	.word	0x40013400
 8008d2c:	40014000 	.word	0x40014000
 8008d30:	40015000 	.word	0x40015000
 8008d34:	00010007 	.word	0x00010007

08008d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008d38:	b580      	push	{r7, lr}
 8008d3a:	b082      	sub	sp, #8
 8008d3c:	af00      	add	r7, sp, #0
 8008d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d101      	bne.n	8008d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008d46:	2301      	movs	r3, #1
 8008d48:	e049      	b.n	8008dde <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d106      	bne.n	8008d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 f841 	bl	8008de6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2202      	movs	r2, #2
 8008d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4619      	mov	r1, r3
 8008d76:	4610      	mov	r0, r2
 8008d78:	f000 fb7c 	bl	8009474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2201      	movs	r2, #1
 8008da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3708      	adds	r7, #8
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
	...

08008dfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
 8008e04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d109      	bne.n	8008e20 <HAL_TIM_PWM_Start+0x24>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	bf14      	ite	ne
 8008e18:	2301      	movne	r3, #1
 8008e1a:	2300      	moveq	r3, #0
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	e03c      	b.n	8008e9a <HAL_TIM_PWM_Start+0x9e>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	2b04      	cmp	r3, #4
 8008e24:	d109      	bne.n	8008e3a <HAL_TIM_PWM_Start+0x3e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	bf14      	ite	ne
 8008e32:	2301      	movne	r3, #1
 8008e34:	2300      	moveq	r3, #0
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	e02f      	b.n	8008e9a <HAL_TIM_PWM_Start+0x9e>
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b08      	cmp	r3, #8
 8008e3e:	d109      	bne.n	8008e54 <HAL_TIM_PWM_Start+0x58>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	bf14      	ite	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	e022      	b.n	8008e9a <HAL_TIM_PWM_Start+0x9e>
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	2b0c      	cmp	r3, #12
 8008e58:	d109      	bne.n	8008e6e <HAL_TIM_PWM_Start+0x72>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	2b01      	cmp	r3, #1
 8008e64:	bf14      	ite	ne
 8008e66:	2301      	movne	r3, #1
 8008e68:	2300      	moveq	r3, #0
 8008e6a:	b2db      	uxtb	r3, r3
 8008e6c:	e015      	b.n	8008e9a <HAL_TIM_PWM_Start+0x9e>
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	2b10      	cmp	r3, #16
 8008e72:	d109      	bne.n	8008e88 <HAL_TIM_PWM_Start+0x8c>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008e7a:	b2db      	uxtb	r3, r3
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	bf14      	ite	ne
 8008e80:	2301      	movne	r3, #1
 8008e82:	2300      	moveq	r3, #0
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	e008      	b.n	8008e9a <HAL_TIM_PWM_Start+0x9e>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008e8e:	b2db      	uxtb	r3, r3
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	bf14      	ite	ne
 8008e94:	2301      	movne	r3, #1
 8008e96:	2300      	moveq	r3, #0
 8008e98:	b2db      	uxtb	r3, r3
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e0a6      	b.n	8008ff0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d104      	bne.n	8008eb2 <HAL_TIM_PWM_Start+0xb6>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008eb0:	e023      	b.n	8008efa <HAL_TIM_PWM_Start+0xfe>
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b04      	cmp	r3, #4
 8008eb6:	d104      	bne.n	8008ec2 <HAL_TIM_PWM_Start+0xc6>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ec0:	e01b      	b.n	8008efa <HAL_TIM_PWM_Start+0xfe>
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	d104      	bne.n	8008ed2 <HAL_TIM_PWM_Start+0xd6>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ed0:	e013      	b.n	8008efa <HAL_TIM_PWM_Start+0xfe>
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2b0c      	cmp	r3, #12
 8008ed6:	d104      	bne.n	8008ee2 <HAL_TIM_PWM_Start+0xe6>
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2202      	movs	r2, #2
 8008edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008ee0:	e00b      	b.n	8008efa <HAL_TIM_PWM_Start+0xfe>
 8008ee2:	683b      	ldr	r3, [r7, #0]
 8008ee4:	2b10      	cmp	r3, #16
 8008ee6:	d104      	bne.n	8008ef2 <HAL_TIM_PWM_Start+0xf6>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2202      	movs	r2, #2
 8008eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008ef0:	e003      	b.n	8008efa <HAL_TIM_PWM_Start+0xfe>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2202      	movs	r2, #2
 8008ef6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	2201      	movs	r2, #1
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 ff30 	bl	8009d68 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8008ff8 <HAL_TIM_PWM_Start+0x1fc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d018      	beq.n	8008f44 <HAL_TIM_PWM_Start+0x148>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a39      	ldr	r2, [pc, #228]	@ (8008ffc <HAL_TIM_PWM_Start+0x200>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d013      	beq.n	8008f44 <HAL_TIM_PWM_Start+0x148>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a37      	ldr	r2, [pc, #220]	@ (8009000 <HAL_TIM_PWM_Start+0x204>)
 8008f22:	4293      	cmp	r3, r2
 8008f24:	d00e      	beq.n	8008f44 <HAL_TIM_PWM_Start+0x148>
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a36      	ldr	r2, [pc, #216]	@ (8009004 <HAL_TIM_PWM_Start+0x208>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d009      	beq.n	8008f44 <HAL_TIM_PWM_Start+0x148>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a34      	ldr	r2, [pc, #208]	@ (8009008 <HAL_TIM_PWM_Start+0x20c>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d004      	beq.n	8008f44 <HAL_TIM_PWM_Start+0x148>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a33      	ldr	r2, [pc, #204]	@ (800900c <HAL_TIM_PWM_Start+0x210>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d101      	bne.n	8008f48 <HAL_TIM_PWM_Start+0x14c>
 8008f44:	2301      	movs	r3, #1
 8008f46:	e000      	b.n	8008f4a <HAL_TIM_PWM_Start+0x14e>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d007      	beq.n	8008f5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008f5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4a25      	ldr	r2, [pc, #148]	@ (8008ff8 <HAL_TIM_PWM_Start+0x1fc>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d022      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f70:	d01d      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a26      	ldr	r2, [pc, #152]	@ (8009010 <HAL_TIM_PWM_Start+0x214>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d018      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a24      	ldr	r2, [pc, #144]	@ (8009014 <HAL_TIM_PWM_Start+0x218>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d013      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a23      	ldr	r2, [pc, #140]	@ (8009018 <HAL_TIM_PWM_Start+0x21c>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00e      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a19      	ldr	r2, [pc, #100]	@ (8008ffc <HAL_TIM_PWM_Start+0x200>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d009      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a18      	ldr	r2, [pc, #96]	@ (8009000 <HAL_TIM_PWM_Start+0x204>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIM_PWM_Start+0x1b2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a18      	ldr	r2, [pc, #96]	@ (800900c <HAL_TIM_PWM_Start+0x210>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d115      	bne.n	8008fda <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	689a      	ldr	r2, [r3, #8]
 8008fb4:	4b19      	ldr	r3, [pc, #100]	@ (800901c <HAL_TIM_PWM_Start+0x220>)
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	2b06      	cmp	r3, #6
 8008fbe:	d015      	beq.n	8008fec <HAL_TIM_PWM_Start+0x1f0>
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008fc6:	d011      	beq.n	8008fec <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f042 0201 	orr.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd8:	e008      	b.n	8008fec <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0201 	orr.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]
 8008fea:	e000      	b.n	8008fee <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3710      	adds	r7, #16
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	40012c00 	.word	0x40012c00
 8008ffc:	40013400 	.word	0x40013400
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400
 8009008:	40014800 	.word	0x40014800
 800900c:	40015000 	.word	0x40015000
 8009010:	40000400 	.word	0x40000400
 8009014:	40000800 	.word	0x40000800
 8009018:	40000c00 	.word	0x40000c00
 800901c:	00010007 	.word	0x00010007

08009020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b086      	sub	sp, #24
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800902c:	2300      	movs	r3, #0
 800902e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d101      	bne.n	800903e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800903a:	2302      	movs	r3, #2
 800903c:	e0ff      	b.n	800923e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2201      	movs	r2, #1
 8009042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b14      	cmp	r3, #20
 800904a:	f200 80f0 	bhi.w	800922e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800904e:	a201      	add	r2, pc, #4	@ (adr r2, 8009054 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	080090a9 	.word	0x080090a9
 8009058:	0800922f 	.word	0x0800922f
 800905c:	0800922f 	.word	0x0800922f
 8009060:	0800922f 	.word	0x0800922f
 8009064:	080090e9 	.word	0x080090e9
 8009068:	0800922f 	.word	0x0800922f
 800906c:	0800922f 	.word	0x0800922f
 8009070:	0800922f 	.word	0x0800922f
 8009074:	0800912b 	.word	0x0800912b
 8009078:	0800922f 	.word	0x0800922f
 800907c:	0800922f 	.word	0x0800922f
 8009080:	0800922f 	.word	0x0800922f
 8009084:	0800916b 	.word	0x0800916b
 8009088:	0800922f 	.word	0x0800922f
 800908c:	0800922f 	.word	0x0800922f
 8009090:	0800922f 	.word	0x0800922f
 8009094:	080091ad 	.word	0x080091ad
 8009098:	0800922f 	.word	0x0800922f
 800909c:	0800922f 	.word	0x0800922f
 80090a0:	0800922f 	.word	0x0800922f
 80090a4:	080091ed 	.word	0x080091ed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68b9      	ldr	r1, [r7, #8]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f000 fa94 	bl	80095dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f042 0208 	orr.w	r2, r2, #8
 80090c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f022 0204 	bic.w	r2, r2, #4
 80090d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6999      	ldr	r1, [r3, #24]
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	691a      	ldr	r2, [r3, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	619a      	str	r2, [r3, #24]
      break;
 80090e6:	e0a5      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68b9      	ldr	r1, [r7, #8]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fb0e 	bl	8009710 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	699a      	ldr	r2, [r3, #24]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6999      	ldr	r1, [r3, #24]
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	021a      	lsls	r2, r3, #8
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	430a      	orrs	r2, r1
 8009126:	619a      	str	r2, [r3, #24]
      break;
 8009128:	e084      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	68b9      	ldr	r1, [r7, #8]
 8009130:	4618      	mov	r0, r3
 8009132:	f000 fb81 	bl	8009838 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f042 0208 	orr.w	r2, r2, #8
 8009144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69da      	ldr	r2, [r3, #28]
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f022 0204 	bic.w	r2, r2, #4
 8009154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	69d9      	ldr	r1, [r3, #28]
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	691a      	ldr	r2, [r3, #16]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	430a      	orrs	r2, r1
 8009166:	61da      	str	r2, [r3, #28]
      break;
 8009168:	e064      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	4618      	mov	r0, r3
 8009172:	f000 fbf3 	bl	800995c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69da      	ldr	r2, [r3, #28]
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	69da      	ldr	r2, [r3, #28]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	69d9      	ldr	r1, [r3, #28]
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	021a      	lsls	r2, r3, #8
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	430a      	orrs	r2, r1
 80091a8:	61da      	str	r2, [r3, #28]
      break;
 80091aa:	e043      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68b9      	ldr	r1, [r7, #8]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fc66 	bl	8009a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f042 0208 	orr.w	r2, r2, #8
 80091c6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f022 0204 	bic.w	r2, r2, #4
 80091d6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	430a      	orrs	r2, r1
 80091e8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80091ea:	e023      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	68b9      	ldr	r1, [r7, #8]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 fcb0 	bl	8009b58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009206:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009216:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	021a      	lsls	r2, r3, #8
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800922c:	e002      	b.n	8009234 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	75fb      	strb	r3, [r7, #23]
      break;
 8009232:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800923c:	7dfb      	ldrb	r3, [r7, #23]
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009252:	2300      	movs	r3, #0
 8009254:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800925c:	2b01      	cmp	r3, #1
 800925e:	d101      	bne.n	8009264 <HAL_TIM_ConfigClockSource+0x1c>
 8009260:	2302      	movs	r3, #2
 8009262:	e0f6      	b.n	8009452 <HAL_TIM_ConfigClockSource+0x20a>
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2201      	movs	r2, #1
 8009268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2202      	movs	r2, #2
 8009270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009282:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68ba      	ldr	r2, [r7, #8]
 8009296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a6f      	ldr	r2, [pc, #444]	@ (800945c <HAL_TIM_ConfigClockSource+0x214>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	f000 80c1 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092a4:	4a6d      	ldr	r2, [pc, #436]	@ (800945c <HAL_TIM_ConfigClockSource+0x214>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	f200 80c6 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092ac:	4a6c      	ldr	r2, [pc, #432]	@ (8009460 <HAL_TIM_ConfigClockSource+0x218>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	f000 80b9 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092b4:	4a6a      	ldr	r2, [pc, #424]	@ (8009460 <HAL_TIM_ConfigClockSource+0x218>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	f200 80be 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092bc:	4a69      	ldr	r2, [pc, #420]	@ (8009464 <HAL_TIM_ConfigClockSource+0x21c>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	f000 80b1 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092c4:	4a67      	ldr	r2, [pc, #412]	@ (8009464 <HAL_TIM_ConfigClockSource+0x21c>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	f200 80b6 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092cc:	4a66      	ldr	r2, [pc, #408]	@ (8009468 <HAL_TIM_ConfigClockSource+0x220>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	f000 80a9 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092d4:	4a64      	ldr	r2, [pc, #400]	@ (8009468 <HAL_TIM_ConfigClockSource+0x220>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	f200 80ae 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092dc:	4a63      	ldr	r2, [pc, #396]	@ (800946c <HAL_TIM_ConfigClockSource+0x224>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	f000 80a1 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092e4:	4a61      	ldr	r2, [pc, #388]	@ (800946c <HAL_TIM_ConfigClockSource+0x224>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	f200 80a6 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092ec:	4a60      	ldr	r2, [pc, #384]	@ (8009470 <HAL_TIM_ConfigClockSource+0x228>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	f000 8099 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 80092f4:	4a5e      	ldr	r2, [pc, #376]	@ (8009470 <HAL_TIM_ConfigClockSource+0x228>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	f200 809e 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 80092fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009300:	f000 8091 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 8009304:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009308:	f200 8096 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 800930c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009310:	f000 8089 	beq.w	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 8009314:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009318:	f200 808e 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 800931c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009320:	d03e      	beq.n	80093a0 <HAL_TIM_ConfigClockSource+0x158>
 8009322:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009326:	f200 8087 	bhi.w	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800932e:	f000 8086 	beq.w	800943e <HAL_TIM_ConfigClockSource+0x1f6>
 8009332:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009336:	d87f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009338:	2b70      	cmp	r3, #112	@ 0x70
 800933a:	d01a      	beq.n	8009372 <HAL_TIM_ConfigClockSource+0x12a>
 800933c:	2b70      	cmp	r3, #112	@ 0x70
 800933e:	d87b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009340:	2b60      	cmp	r3, #96	@ 0x60
 8009342:	d050      	beq.n	80093e6 <HAL_TIM_ConfigClockSource+0x19e>
 8009344:	2b60      	cmp	r3, #96	@ 0x60
 8009346:	d877      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009348:	2b50      	cmp	r3, #80	@ 0x50
 800934a:	d03c      	beq.n	80093c6 <HAL_TIM_ConfigClockSource+0x17e>
 800934c:	2b50      	cmp	r3, #80	@ 0x50
 800934e:	d873      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009350:	2b40      	cmp	r3, #64	@ 0x40
 8009352:	d058      	beq.n	8009406 <HAL_TIM_ConfigClockSource+0x1be>
 8009354:	2b40      	cmp	r3, #64	@ 0x40
 8009356:	d86f      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009358:	2b30      	cmp	r3, #48	@ 0x30
 800935a:	d064      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 800935c:	2b30      	cmp	r3, #48	@ 0x30
 800935e:	d86b      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009360:	2b20      	cmp	r3, #32
 8009362:	d060      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 8009364:	2b20      	cmp	r3, #32
 8009366:	d867      	bhi.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05c      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 800936c:	2b10      	cmp	r3, #16
 800936e:	d05a      	beq.n	8009426 <HAL_TIM_ConfigClockSource+0x1de>
 8009370:	e062      	b.n	8009438 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009382:	f000 fcd1 	bl	8009d28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009394:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	68ba      	ldr	r2, [r7, #8]
 800939c:	609a      	str	r2, [r3, #8]
      break;
 800939e:	e04f      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80093b0:	f000 fcba 	bl	8009d28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	689a      	ldr	r2, [r3, #8]
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80093c2:	609a      	str	r2, [r3, #8]
      break;
 80093c4:	e03c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093d2:	461a      	mov	r2, r3
 80093d4:	f000 fc2c 	bl	8009c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2150      	movs	r1, #80	@ 0x50
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 fc85 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 80093e4:	e02c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80093f2:	461a      	mov	r2, r3
 80093f4:	f000 fc4b 	bl	8009c8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2160      	movs	r1, #96	@ 0x60
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fc75 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8009404:	e01c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009412:	461a      	mov	r2, r3
 8009414:	f000 fc0c 	bl	8009c30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2140      	movs	r1, #64	@ 0x40
 800941e:	4618      	mov	r0, r3
 8009420:	f000 fc65 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8009424:	e00c      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fc5c 	bl	8009cee <TIM_ITRx_SetConfig>
      break;
 8009436:	e003      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009438:	2301      	movs	r3, #1
 800943a:	73fb      	strb	r3, [r7, #15]
      break;
 800943c:	e000      	b.n	8009440 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800943e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	00100070 	.word	0x00100070
 8009460:	00100060 	.word	0x00100060
 8009464:	00100050 	.word	0x00100050
 8009468:	00100040 	.word	0x00100040
 800946c:	00100030 	.word	0x00100030
 8009470:	00100020 	.word	0x00100020

08009474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a4c      	ldr	r2, [pc, #304]	@ (80095b8 <TIM_Base_SetConfig+0x144>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d017      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009492:	d013      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a49      	ldr	r2, [pc, #292]	@ (80095bc <TIM_Base_SetConfig+0x148>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d00f      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a48      	ldr	r2, [pc, #288]	@ (80095c0 <TIM_Base_SetConfig+0x14c>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d00b      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	4a47      	ldr	r2, [pc, #284]	@ (80095c4 <TIM_Base_SetConfig+0x150>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d007      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4a46      	ldr	r2, [pc, #280]	@ (80095c8 <TIM_Base_SetConfig+0x154>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d003      	beq.n	80094bc <TIM_Base_SetConfig+0x48>
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	4a45      	ldr	r2, [pc, #276]	@ (80095cc <TIM_Base_SetConfig+0x158>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d108      	bne.n	80094ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	4313      	orrs	r3, r2
 80094cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	4a39      	ldr	r2, [pc, #228]	@ (80095b8 <TIM_Base_SetConfig+0x144>)
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d023      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094dc:	d01f      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	4a36      	ldr	r2, [pc, #216]	@ (80095bc <TIM_Base_SetConfig+0x148>)
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d01b      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	4a35      	ldr	r2, [pc, #212]	@ (80095c0 <TIM_Base_SetConfig+0x14c>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d017      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4a34      	ldr	r2, [pc, #208]	@ (80095c4 <TIM_Base_SetConfig+0x150>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d013      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a33      	ldr	r2, [pc, #204]	@ (80095c8 <TIM_Base_SetConfig+0x154>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d00f      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	4a33      	ldr	r2, [pc, #204]	@ (80095d0 <TIM_Base_SetConfig+0x15c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d00b      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	4a32      	ldr	r2, [pc, #200]	@ (80095d4 <TIM_Base_SetConfig+0x160>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d007      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	4a31      	ldr	r2, [pc, #196]	@ (80095d8 <TIM_Base_SetConfig+0x164>)
 8009512:	4293      	cmp	r3, r2
 8009514:	d003      	beq.n	800951e <TIM_Base_SetConfig+0xaa>
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	4a2c      	ldr	r2, [pc, #176]	@ (80095cc <TIM_Base_SetConfig+0x158>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d108      	bne.n	8009530 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	68db      	ldr	r3, [r3, #12]
 800952a:	68fa      	ldr	r2, [r7, #12]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	689a      	ldr	r2, [r3, #8]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a18      	ldr	r2, [pc, #96]	@ (80095b8 <TIM_Base_SetConfig+0x144>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d013      	beq.n	8009584 <TIM_Base_SetConfig+0x110>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a1a      	ldr	r2, [pc, #104]	@ (80095c8 <TIM_Base_SetConfig+0x154>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d00f      	beq.n	8009584 <TIM_Base_SetConfig+0x110>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a1a      	ldr	r2, [pc, #104]	@ (80095d0 <TIM_Base_SetConfig+0x15c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d00b      	beq.n	8009584 <TIM_Base_SetConfig+0x110>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	4a19      	ldr	r2, [pc, #100]	@ (80095d4 <TIM_Base_SetConfig+0x160>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d007      	beq.n	8009584 <TIM_Base_SetConfig+0x110>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4a18      	ldr	r2, [pc, #96]	@ (80095d8 <TIM_Base_SetConfig+0x164>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d003      	beq.n	8009584 <TIM_Base_SetConfig+0x110>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	4a13      	ldr	r2, [pc, #76]	@ (80095cc <TIM_Base_SetConfig+0x158>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d103      	bne.n	800958c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b01      	cmp	r3, #1
 800959c:	d105      	bne.n	80095aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	691b      	ldr	r3, [r3, #16]
 80095a2:	f023 0201 	bic.w	r2, r3, #1
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	611a      	str	r2, [r3, #16]
  }
}
 80095aa:	bf00      	nop
 80095ac:	3714      	adds	r7, #20
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40012c00 	.word	0x40012c00
 80095bc:	40000400 	.word	0x40000400
 80095c0:	40000800 	.word	0x40000800
 80095c4:	40000c00 	.word	0x40000c00
 80095c8:	40013400 	.word	0x40013400
 80095cc:	40015000 	.word	0x40015000
 80095d0:	40014000 	.word	0x40014000
 80095d4:	40014400 	.word	0x40014400
 80095d8:	40014800 	.word	0x40014800

080095dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095dc:	b480      	push	{r7}
 80095de:	b087      	sub	sp, #28
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6a1b      	ldr	r3, [r3, #32]
 80095ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6a1b      	ldr	r3, [r3, #32]
 80095f0:	f023 0201 	bic.w	r2, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800960a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800960e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f023 0303 	bic.w	r3, r3, #3
 8009616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68fa      	ldr	r2, [r7, #12]
 800961e:	4313      	orrs	r3, r2
 8009620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f023 0302 	bic.w	r3, r3, #2
 8009628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	4313      	orrs	r3, r2
 8009632:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a30      	ldr	r2, [pc, #192]	@ (80096f8 <TIM_OC1_SetConfig+0x11c>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <TIM_OC1_SetConfig+0x88>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	4a2f      	ldr	r2, [pc, #188]	@ (80096fc <TIM_OC1_SetConfig+0x120>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d00f      	beq.n	8009664 <TIM_OC1_SetConfig+0x88>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a2e      	ldr	r2, [pc, #184]	@ (8009700 <TIM_OC1_SetConfig+0x124>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00b      	beq.n	8009664 <TIM_OC1_SetConfig+0x88>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a2d      	ldr	r2, [pc, #180]	@ (8009704 <TIM_OC1_SetConfig+0x128>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d007      	beq.n	8009664 <TIM_OC1_SetConfig+0x88>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a2c      	ldr	r2, [pc, #176]	@ (8009708 <TIM_OC1_SetConfig+0x12c>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_OC1_SetConfig+0x88>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a2b      	ldr	r2, [pc, #172]	@ (800970c <TIM_OC1_SetConfig+0x130>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d10c      	bne.n	800967e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 0308 	bic.w	r3, r3, #8
 800966a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	f023 0304 	bic.w	r3, r3, #4
 800967c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a1d      	ldr	r2, [pc, #116]	@ (80096f8 <TIM_OC1_SetConfig+0x11c>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d013      	beq.n	80096ae <TIM_OC1_SetConfig+0xd2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a1c      	ldr	r2, [pc, #112]	@ (80096fc <TIM_OC1_SetConfig+0x120>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d00f      	beq.n	80096ae <TIM_OC1_SetConfig+0xd2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a1b      	ldr	r2, [pc, #108]	@ (8009700 <TIM_OC1_SetConfig+0x124>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d00b      	beq.n	80096ae <TIM_OC1_SetConfig+0xd2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a1a      	ldr	r2, [pc, #104]	@ (8009704 <TIM_OC1_SetConfig+0x128>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d007      	beq.n	80096ae <TIM_OC1_SetConfig+0xd2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a19      	ldr	r2, [pc, #100]	@ (8009708 <TIM_OC1_SetConfig+0x12c>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d003      	beq.n	80096ae <TIM_OC1_SetConfig+0xd2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a18      	ldr	r2, [pc, #96]	@ (800970c <TIM_OC1_SetConfig+0x130>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d111      	bne.n	80096d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80096b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80096bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	693a      	ldr	r2, [r7, #16]
 80096c4:	4313      	orrs	r3, r2
 80096c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80096c8:	683b      	ldr	r3, [r7, #0]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	68fa      	ldr	r2, [r7, #12]
 80096dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	685a      	ldr	r2, [r3, #4]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	621a      	str	r2, [r3, #32]
}
 80096ec:	bf00      	nop
 80096ee:	371c      	adds	r7, #28
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	40012c00 	.word	0x40012c00
 80096fc:	40013400 	.word	0x40013400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800
 800970c:	40015000 	.word	0x40015000

08009710 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009710:	b480      	push	{r7}
 8009712:	b087      	sub	sp, #28
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	f023 0210 	bic.w	r2, r3, #16
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800973e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009742:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800974a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	021b      	lsls	r3, r3, #8
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	4313      	orrs	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f023 0320 	bic.w	r3, r3, #32
 800975e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a2c      	ldr	r2, [pc, #176]	@ (8009820 <TIM_OC2_SetConfig+0x110>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d007      	beq.n	8009784 <TIM_OC2_SetConfig+0x74>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a2b      	ldr	r2, [pc, #172]	@ (8009824 <TIM_OC2_SetConfig+0x114>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d003      	beq.n	8009784 <TIM_OC2_SetConfig+0x74>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a2a      	ldr	r2, [pc, #168]	@ (8009828 <TIM_OC2_SetConfig+0x118>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d10d      	bne.n	80097a0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800978a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	011b      	lsls	r3, r3, #4
 8009792:	697a      	ldr	r2, [r7, #20]
 8009794:	4313      	orrs	r3, r2
 8009796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800979e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	4a1f      	ldr	r2, [pc, #124]	@ (8009820 <TIM_OC2_SetConfig+0x110>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d013      	beq.n	80097d0 <TIM_OC2_SetConfig+0xc0>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	4a1e      	ldr	r2, [pc, #120]	@ (8009824 <TIM_OC2_SetConfig+0x114>)
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d00f      	beq.n	80097d0 <TIM_OC2_SetConfig+0xc0>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4a1e      	ldr	r2, [pc, #120]	@ (800982c <TIM_OC2_SetConfig+0x11c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00b      	beq.n	80097d0 <TIM_OC2_SetConfig+0xc0>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a1d      	ldr	r2, [pc, #116]	@ (8009830 <TIM_OC2_SetConfig+0x120>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d007      	beq.n	80097d0 <TIM_OC2_SetConfig+0xc0>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009834 <TIM_OC2_SetConfig+0x124>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d003      	beq.n	80097d0 <TIM_OC2_SetConfig+0xc0>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	4a17      	ldr	r2, [pc, #92]	@ (8009828 <TIM_OC2_SetConfig+0x118>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d113      	bne.n	80097f8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80097d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80097de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	4313      	orrs	r3, r2
 80097ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	693a      	ldr	r2, [r7, #16]
 80097fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	685a      	ldr	r2, [r3, #4]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	621a      	str	r2, [r3, #32]
}
 8009812:	bf00      	nop
 8009814:	371c      	adds	r7, #28
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	40012c00 	.word	0x40012c00
 8009824:	40013400 	.word	0x40013400
 8009828:	40015000 	.word	0x40015000
 800982c:	40014000 	.word	0x40014000
 8009830:	40014400 	.word	0x40014400
 8009834:	40014800 	.word	0x40014800

08009838 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009838:	b480      	push	{r7}
 800983a:	b087      	sub	sp, #28
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6a1b      	ldr	r3, [r3, #32]
 8009846:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6a1b      	ldr	r3, [r3, #32]
 800984c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	69db      	ldr	r3, [r3, #28]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009866:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800986a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	f023 0303 	bic.w	r3, r3, #3
 8009872:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	4313      	orrs	r3, r2
 800987c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009884:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	021b      	lsls	r3, r3, #8
 800988c:	697a      	ldr	r2, [r7, #20]
 800988e:	4313      	orrs	r3, r2
 8009890:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a2b      	ldr	r2, [pc, #172]	@ (8009944 <TIM_OC3_SetConfig+0x10c>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d007      	beq.n	80098aa <TIM_OC3_SetConfig+0x72>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a2a      	ldr	r2, [pc, #168]	@ (8009948 <TIM_OC3_SetConfig+0x110>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d003      	beq.n	80098aa <TIM_OC3_SetConfig+0x72>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a29      	ldr	r2, [pc, #164]	@ (800994c <TIM_OC3_SetConfig+0x114>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d10d      	bne.n	80098c6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80098b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	697a      	ldr	r2, [r7, #20]
 80098ba:	4313      	orrs	r3, r2
 80098bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80098be:	697b      	ldr	r3, [r7, #20]
 80098c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80098c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	4a1e      	ldr	r2, [pc, #120]	@ (8009944 <TIM_OC3_SetConfig+0x10c>)
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d013      	beq.n	80098f6 <TIM_OC3_SetConfig+0xbe>
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009948 <TIM_OC3_SetConfig+0x110>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d00f      	beq.n	80098f6 <TIM_OC3_SetConfig+0xbe>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	4a1d      	ldr	r2, [pc, #116]	@ (8009950 <TIM_OC3_SetConfig+0x118>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d00b      	beq.n	80098f6 <TIM_OC3_SetConfig+0xbe>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009954 <TIM_OC3_SetConfig+0x11c>)
 80098e2:	4293      	cmp	r3, r2
 80098e4:	d007      	beq.n	80098f6 <TIM_OC3_SetConfig+0xbe>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	4a1b      	ldr	r2, [pc, #108]	@ (8009958 <TIM_OC3_SetConfig+0x120>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d003      	beq.n	80098f6 <TIM_OC3_SetConfig+0xbe>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a16      	ldr	r2, [pc, #88]	@ (800994c <TIM_OC3_SetConfig+0x114>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d113      	bne.n	800991e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009904:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	011b      	lsls	r3, r3, #4
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	4313      	orrs	r3, r2
 8009910:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	699b      	ldr	r3, [r3, #24]
 8009916:	011b      	lsls	r3, r3, #4
 8009918:	693a      	ldr	r2, [r7, #16]
 800991a:	4313      	orrs	r3, r2
 800991c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	693a      	ldr	r2, [r7, #16]
 8009922:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68fa      	ldr	r2, [r7, #12]
 8009928:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	697a      	ldr	r2, [r7, #20]
 8009936:	621a      	str	r2, [r3, #32]
}
 8009938:	bf00      	nop
 800993a:	371c      	adds	r7, #28
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	40012c00 	.word	0x40012c00
 8009948:	40013400 	.word	0x40013400
 800994c:	40015000 	.word	0x40015000
 8009950:	40014000 	.word	0x40014000
 8009954:	40014400 	.word	0x40014400
 8009958:	40014800 	.word	0x40014800

0800995c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800995c:	b480      	push	{r7}
 800995e:	b087      	sub	sp, #28
 8009960:	af00      	add	r7, sp, #0
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a1b      	ldr	r3, [r3, #32]
 8009970:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800998a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800998e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	021b      	lsls	r3, r3, #8
 800999e:	68fa      	ldr	r2, [r7, #12]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80099aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	031b      	lsls	r3, r3, #12
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a2c      	ldr	r2, [pc, #176]	@ (8009a6c <TIM_OC4_SetConfig+0x110>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d007      	beq.n	80099d0 <TIM_OC4_SetConfig+0x74>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a2b      	ldr	r2, [pc, #172]	@ (8009a70 <TIM_OC4_SetConfig+0x114>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d003      	beq.n	80099d0 <TIM_OC4_SetConfig+0x74>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009a74 <TIM_OC4_SetConfig+0x118>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d10d      	bne.n	80099ec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80099d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	031b      	lsls	r3, r3, #12
 80099de:	697a      	ldr	r2, [r7, #20]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80099ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	4a1f      	ldr	r2, [pc, #124]	@ (8009a6c <TIM_OC4_SetConfig+0x110>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d013      	beq.n	8009a1c <TIM_OC4_SetConfig+0xc0>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	4a1e      	ldr	r2, [pc, #120]	@ (8009a70 <TIM_OC4_SetConfig+0x114>)
 80099f8:	4293      	cmp	r3, r2
 80099fa:	d00f      	beq.n	8009a1c <TIM_OC4_SetConfig+0xc0>
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	4a1e      	ldr	r2, [pc, #120]	@ (8009a78 <TIM_OC4_SetConfig+0x11c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00b      	beq.n	8009a1c <TIM_OC4_SetConfig+0xc0>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a1d      	ldr	r2, [pc, #116]	@ (8009a7c <TIM_OC4_SetConfig+0x120>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d007      	beq.n	8009a1c <TIM_OC4_SetConfig+0xc0>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8009a80 <TIM_OC4_SetConfig+0x124>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d003      	beq.n	8009a1c <TIM_OC4_SetConfig+0xc0>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4a17      	ldr	r2, [pc, #92]	@ (8009a74 <TIM_OC4_SetConfig+0x118>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d113      	bne.n	8009a44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	019b      	lsls	r3, r3, #6
 8009a32:	693a      	ldr	r2, [r7, #16]
 8009a34:	4313      	orrs	r3, r2
 8009a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	019b      	lsls	r3, r3, #6
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	4313      	orrs	r3, r2
 8009a42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	693a      	ldr	r2, [r7, #16]
 8009a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	621a      	str	r2, [r3, #32]
}
 8009a5e:	bf00      	nop
 8009a60:	371c      	adds	r7, #28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr
 8009a6a:	bf00      	nop
 8009a6c:	40012c00 	.word	0x40012c00
 8009a70:	40013400 	.word	0x40013400
 8009a74:	40015000 	.word	0x40015000
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	40014400 	.word	0x40014400
 8009a80:	40014800 	.word	0x40014800

08009a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1b      	ldr	r3, [r3, #32]
 8009a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a1b      	ldr	r3, [r3, #32]
 8009a98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a19      	ldr	r2, [pc, #100]	@ (8009b40 <TIM_OC5_SetConfig+0xbc>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d013      	beq.n	8009b06 <TIM_OC5_SetConfig+0x82>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a18      	ldr	r2, [pc, #96]	@ (8009b44 <TIM_OC5_SetConfig+0xc0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d00f      	beq.n	8009b06 <TIM_OC5_SetConfig+0x82>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	4a17      	ldr	r2, [pc, #92]	@ (8009b48 <TIM_OC5_SetConfig+0xc4>)
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d00b      	beq.n	8009b06 <TIM_OC5_SetConfig+0x82>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a16      	ldr	r2, [pc, #88]	@ (8009b4c <TIM_OC5_SetConfig+0xc8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d007      	beq.n	8009b06 <TIM_OC5_SetConfig+0x82>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a15      	ldr	r2, [pc, #84]	@ (8009b50 <TIM_OC5_SetConfig+0xcc>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d003      	beq.n	8009b06 <TIM_OC5_SetConfig+0x82>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a14      	ldr	r2, [pc, #80]	@ (8009b54 <TIM_OC5_SetConfig+0xd0>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d109      	bne.n	8009b1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	695b      	ldr	r3, [r3, #20]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	697a      	ldr	r2, [r7, #20]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	693a      	ldr	r2, [r7, #16]
 8009b32:	621a      	str	r2, [r3, #32]
}
 8009b34:	bf00      	nop
 8009b36:	371c      	adds	r7, #28
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	40012c00 	.word	0x40012c00
 8009b44:	40013400 	.word	0x40013400
 8009b48:	40014000 	.word	0x40014000
 8009b4c:	40014400 	.word	0x40014400
 8009b50:	40014800 	.word	0x40014800
 8009b54:	40015000 	.word	0x40015000

08009b58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	021b      	lsls	r3, r3, #8
 8009b92:	68fa      	ldr	r2, [r7, #12]
 8009b94:	4313      	orrs	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b98:	693b      	ldr	r3, [r7, #16]
 8009b9a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	051b      	lsls	r3, r3, #20
 8009ba6:	693a      	ldr	r2, [r7, #16]
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	4a1a      	ldr	r2, [pc, #104]	@ (8009c18 <TIM_OC6_SetConfig+0xc0>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d013      	beq.n	8009bdc <TIM_OC6_SetConfig+0x84>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a19      	ldr	r2, [pc, #100]	@ (8009c1c <TIM_OC6_SetConfig+0xc4>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00f      	beq.n	8009bdc <TIM_OC6_SetConfig+0x84>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a18      	ldr	r2, [pc, #96]	@ (8009c20 <TIM_OC6_SetConfig+0xc8>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d00b      	beq.n	8009bdc <TIM_OC6_SetConfig+0x84>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a17      	ldr	r2, [pc, #92]	@ (8009c24 <TIM_OC6_SetConfig+0xcc>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d007      	beq.n	8009bdc <TIM_OC6_SetConfig+0x84>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a16      	ldr	r2, [pc, #88]	@ (8009c28 <TIM_OC6_SetConfig+0xd0>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d003      	beq.n	8009bdc <TIM_OC6_SetConfig+0x84>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a15      	ldr	r2, [pc, #84]	@ (8009c2c <TIM_OC6_SetConfig+0xd4>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d109      	bne.n	8009bf0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009be2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	029b      	lsls	r3, r3, #10
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	4313      	orrs	r3, r2
 8009bee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	697a      	ldr	r2, [r7, #20]
 8009bf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	693a      	ldr	r2, [r7, #16]
 8009c08:	621a      	str	r2, [r3, #32]
}
 8009c0a:	bf00      	nop
 8009c0c:	371c      	adds	r7, #28
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c14:	4770      	bx	lr
 8009c16:	bf00      	nop
 8009c18:	40012c00 	.word	0x40012c00
 8009c1c:	40013400 	.word	0x40013400
 8009c20:	40014000 	.word	0x40014000
 8009c24:	40014400 	.word	0x40014400
 8009c28:	40014800 	.word	0x40014800
 8009c2c:	40015000 	.word	0x40015000

08009c30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b087      	sub	sp, #28
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f023 0201 	bic.w	r2, r3, #1
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	011b      	lsls	r3, r3, #4
 8009c60:	693a      	ldr	r2, [r7, #16]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f023 030a 	bic.w	r3, r3, #10
 8009c6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b087      	sub	sp, #28
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	6a1b      	ldr	r3, [r3, #32]
 8009c9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	6a1b      	ldr	r3, [r3, #32]
 8009ca4:	f023 0210 	bic.w	r2, r3, #16
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	699b      	ldr	r3, [r3, #24]
 8009cb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cb2:	693b      	ldr	r3, [r7, #16]
 8009cb4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	031b      	lsls	r3, r3, #12
 8009cbe:	693a      	ldr	r2, [r7, #16]
 8009cc0:	4313      	orrs	r3, r2
 8009cc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	693a      	ldr	r2, [r7, #16]
 8009cda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009d04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	f043 0307 	orr.w	r3, r3, #7
 8009d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	68fa      	ldr	r2, [r7, #12]
 8009d1a:	609a      	str	r2, [r3, #8]
}
 8009d1c:	bf00      	nop
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	021a      	lsls	r2, r3, #8
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	431a      	orrs	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	697a      	ldr	r2, [r7, #20]
 8009d52:	4313      	orrs	r3, r2
 8009d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	609a      	str	r2, [r3, #8]
}
 8009d5c:	bf00      	nop
 8009d5e:	371c      	adds	r7, #28
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr

08009d68 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b087      	sub	sp, #28
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	60f8      	str	r0, [r7, #12]
 8009d70:	60b9      	str	r1, [r7, #8]
 8009d72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d74:	68bb      	ldr	r3, [r7, #8]
 8009d76:	f003 031f 	and.w	r3, r3, #31
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8009d80:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	6a1a      	ldr	r2, [r3, #32]
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	43db      	mvns	r3, r3
 8009d8a:	401a      	ands	r2, r3
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6a1a      	ldr	r2, [r3, #32]
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	f003 031f 	and.w	r3, r3, #31
 8009d9a:	6879      	ldr	r1, [r7, #4]
 8009d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8009da0:	431a      	orrs	r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	621a      	str	r2, [r3, #32]
}
 8009da6:	bf00      	nop
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
	...

08009db4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009dc4:	2b01      	cmp	r3, #1
 8009dc6:	d101      	bne.n	8009dcc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dc8:	2302      	movs	r3, #2
 8009dca:	e074      	b.n	8009eb6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2201      	movs	r2, #1
 8009dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	685b      	ldr	r3, [r3, #4]
 8009de2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4a34      	ldr	r2, [pc, #208]	@ (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d009      	beq.n	8009e0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a33      	ldr	r2, [pc, #204]	@ (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d004      	beq.n	8009e0a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	4a31      	ldr	r2, [pc, #196]	@ (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d108      	bne.n	8009e1c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009e22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68fa      	ldr	r2, [r7, #12]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68fa      	ldr	r2, [r7, #12]
 8009e38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	4a21      	ldr	r2, [pc, #132]	@ (8009ec4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d022      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e4c:	d01d      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4a1f      	ldr	r2, [pc, #124]	@ (8009ed0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009e54:	4293      	cmp	r3, r2
 8009e56:	d018      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ed4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d013      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	4a1c      	ldr	r2, [pc, #112]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d00e      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	4a15      	ldr	r2, [pc, #84]	@ (8009ec8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e72:	4293      	cmp	r3, r2
 8009e74:	d009      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4a18      	ldr	r2, [pc, #96]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d004      	beq.n	8009e8a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a11      	ldr	r2, [pc, #68]	@ (8009ecc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d10c      	bne.n	8009ea4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	4313      	orrs	r3, r2
 8009e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68ba      	ldr	r2, [r7, #8]
 8009ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40012c00 	.word	0x40012c00
 8009ec8:	40013400 	.word	0x40013400
 8009ecc:	40015000 	.word	0x40015000
 8009ed0:	40000400 	.word	0x40000400
 8009ed4:	40000800 	.word	0x40000800
 8009ed8:	40000c00 	.word	0x40000c00
 8009edc:	40014000 	.word	0x40014000

08009ee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009ef4:	2b01      	cmp	r3, #1
 8009ef6:	d101      	bne.n	8009efc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009ef8:	2302      	movs	r3, #2
 8009efa:	e078      	b.n	8009fee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	689b      	ldr	r3, [r3, #8]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f26:	683b      	ldr	r3, [r7, #0]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	695b      	ldr	r3, [r3, #20]
 8009f54:	4313      	orrs	r3, r2
 8009f56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f62:	4313      	orrs	r3, r2
 8009f64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	041b      	lsls	r3, r3, #16
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1c      	ldr	r2, [pc, #112]	@ (8009ffc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d009      	beq.n	8009fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1b      	ldr	r2, [pc, #108]	@ (800a000 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d004      	beq.n	8009fa2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	4a19      	ldr	r2, [pc, #100]	@ (800a004 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d11c      	bne.n	8009fdc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fac:	051b      	lsls	r3, r3, #20
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd8:	4313      	orrs	r3, r2
 8009fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3714      	adds	r7, #20
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr
 8009ffa:	bf00      	nop
 8009ffc:	40012c00 	.word	0x40012c00
 800a000:	40013400 	.word	0x40013400
 800a004:	40015000 	.word	0x40015000

0800a008 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d101      	bne.n	800a01a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e042      	b.n	800a0a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a020:	2b00      	cmp	r3, #0
 800a022:	d106      	bne.n	800a032 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2200      	movs	r2, #0
 800a028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7f8 fe61 	bl	8002cf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2224      	movs	r2, #36	@ 0x24
 800a036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681a      	ldr	r2, [r3, #0]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 0201 	bic.w	r2, r2, #1
 800a048:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 fb24 	bl	800a6a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f000 f825 	bl	800a0a8 <UART_SetConfig>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b01      	cmp	r3, #1
 800a062:	d101      	bne.n	800a068 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a064:	2301      	movs	r3, #1
 800a066:	e01b      	b.n	800a0a0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	685a      	ldr	r2, [r3, #4]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a076:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a086:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681a      	ldr	r2, [r3, #0]
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f042 0201 	orr.w	r2, r2, #1
 800a096:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f000 fba3 	bl	800a7e4 <UART_CheckIdleState>
 800a09e:	4603      	mov	r3, r0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3708      	adds	r7, #8
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0ac:	b08c      	sub	sp, #48	@ 0x30
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	689a      	ldr	r2, [r3, #8]
 800a0bc:	697b      	ldr	r3, [r7, #20]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	69db      	ldr	r3, [r3, #28]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	4baa      	ldr	r3, [pc, #680]	@ (800a380 <UART_SetConfig+0x2d8>)
 800a0d8:	4013      	ands	r3, r2
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	6812      	ldr	r2, [r2, #0]
 800a0de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a0e0:	430b      	orrs	r3, r1
 800a0e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	685b      	ldr	r3, [r3, #4]
 800a0ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	430a      	orrs	r2, r1
 800a0f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	699b      	ldr	r3, [r3, #24]
 800a0fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a9f      	ldr	r2, [pc, #636]	@ (800a384 <UART_SetConfig+0x2dc>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d004      	beq.n	800a114 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	6a1b      	ldr	r3, [r3, #32]
 800a10e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a110:	4313      	orrs	r3, r2
 800a112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800a11e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	6812      	ldr	r2, [r2, #0]
 800a126:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a128:	430b      	orrs	r3, r1
 800a12a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a132:	f023 010f 	bic.w	r1, r3, #15
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	4a90      	ldr	r2, [pc, #576]	@ (800a388 <UART_SetConfig+0x2e0>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d125      	bne.n	800a198 <UART_SetConfig+0xf0>
 800a14c:	4b8f      	ldr	r3, [pc, #572]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a152:	f003 0303 	and.w	r3, r3, #3
 800a156:	2b03      	cmp	r3, #3
 800a158:	d81a      	bhi.n	800a190 <UART_SetConfig+0xe8>
 800a15a:	a201      	add	r2, pc, #4	@ (adr r2, 800a160 <UART_SetConfig+0xb8>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a171 	.word	0x0800a171
 800a164:	0800a181 	.word	0x0800a181
 800a168:	0800a179 	.word	0x0800a179
 800a16c:	0800a189 	.word	0x0800a189
 800a170:	2301      	movs	r3, #1
 800a172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a176:	e116      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a178:	2302      	movs	r3, #2
 800a17a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a17e:	e112      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a180:	2304      	movs	r3, #4
 800a182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a186:	e10e      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a188:	2308      	movs	r3, #8
 800a18a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a18e:	e10a      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a190:	2310      	movs	r3, #16
 800a192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a196:	e106      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a7c      	ldr	r2, [pc, #496]	@ (800a390 <UART_SetConfig+0x2e8>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d138      	bne.n	800a214 <UART_SetConfig+0x16c>
 800a1a2:	4b7a      	ldr	r3, [pc, #488]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a1a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a1a8:	f003 030c 	and.w	r3, r3, #12
 800a1ac:	2b0c      	cmp	r3, #12
 800a1ae:	d82d      	bhi.n	800a20c <UART_SetConfig+0x164>
 800a1b0:	a201      	add	r2, pc, #4	@ (adr r2, 800a1b8 <UART_SetConfig+0x110>)
 800a1b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1b6:	bf00      	nop
 800a1b8:	0800a1ed 	.word	0x0800a1ed
 800a1bc:	0800a20d 	.word	0x0800a20d
 800a1c0:	0800a20d 	.word	0x0800a20d
 800a1c4:	0800a20d 	.word	0x0800a20d
 800a1c8:	0800a1fd 	.word	0x0800a1fd
 800a1cc:	0800a20d 	.word	0x0800a20d
 800a1d0:	0800a20d 	.word	0x0800a20d
 800a1d4:	0800a20d 	.word	0x0800a20d
 800a1d8:	0800a1f5 	.word	0x0800a1f5
 800a1dc:	0800a20d 	.word	0x0800a20d
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	0800a20d 	.word	0x0800a20d
 800a1e8:	0800a205 	.word	0x0800a205
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1f2:	e0d8      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a1f4:	2302      	movs	r3, #2
 800a1f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a1fa:	e0d4      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a1fc:	2304      	movs	r3, #4
 800a1fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a202:	e0d0      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a204:	2308      	movs	r3, #8
 800a206:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a20a:	e0cc      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a20c:	2310      	movs	r3, #16
 800a20e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a212:	e0c8      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a5e      	ldr	r2, [pc, #376]	@ (800a394 <UART_SetConfig+0x2ec>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d125      	bne.n	800a26a <UART_SetConfig+0x1c2>
 800a21e:	4b5b      	ldr	r3, [pc, #364]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a224:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800a228:	2b30      	cmp	r3, #48	@ 0x30
 800a22a:	d016      	beq.n	800a25a <UART_SetConfig+0x1b2>
 800a22c:	2b30      	cmp	r3, #48	@ 0x30
 800a22e:	d818      	bhi.n	800a262 <UART_SetConfig+0x1ba>
 800a230:	2b20      	cmp	r3, #32
 800a232:	d00a      	beq.n	800a24a <UART_SetConfig+0x1a2>
 800a234:	2b20      	cmp	r3, #32
 800a236:	d814      	bhi.n	800a262 <UART_SetConfig+0x1ba>
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <UART_SetConfig+0x19a>
 800a23c:	2b10      	cmp	r3, #16
 800a23e:	d008      	beq.n	800a252 <UART_SetConfig+0x1aa>
 800a240:	e00f      	b.n	800a262 <UART_SetConfig+0x1ba>
 800a242:	2300      	movs	r3, #0
 800a244:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a248:	e0ad      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a24a:	2302      	movs	r3, #2
 800a24c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a250:	e0a9      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a252:	2304      	movs	r3, #4
 800a254:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a258:	e0a5      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a25a:	2308      	movs	r3, #8
 800a25c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a260:	e0a1      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a262:	2310      	movs	r3, #16
 800a264:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a268:	e09d      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	4a4a      	ldr	r2, [pc, #296]	@ (800a398 <UART_SetConfig+0x2f0>)
 800a270:	4293      	cmp	r3, r2
 800a272:	d125      	bne.n	800a2c0 <UART_SetConfig+0x218>
 800a274:	4b45      	ldr	r3, [pc, #276]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a276:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a27a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a27e:	2bc0      	cmp	r3, #192	@ 0xc0
 800a280:	d016      	beq.n	800a2b0 <UART_SetConfig+0x208>
 800a282:	2bc0      	cmp	r3, #192	@ 0xc0
 800a284:	d818      	bhi.n	800a2b8 <UART_SetConfig+0x210>
 800a286:	2b80      	cmp	r3, #128	@ 0x80
 800a288:	d00a      	beq.n	800a2a0 <UART_SetConfig+0x1f8>
 800a28a:	2b80      	cmp	r3, #128	@ 0x80
 800a28c:	d814      	bhi.n	800a2b8 <UART_SetConfig+0x210>
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d002      	beq.n	800a298 <UART_SetConfig+0x1f0>
 800a292:	2b40      	cmp	r3, #64	@ 0x40
 800a294:	d008      	beq.n	800a2a8 <UART_SetConfig+0x200>
 800a296:	e00f      	b.n	800a2b8 <UART_SetConfig+0x210>
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a29e:	e082      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2a6:	e07e      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a2a8:	2304      	movs	r3, #4
 800a2aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2ae:	e07a      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a2b0:	2308      	movs	r3, #8
 800a2b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2b6:	e076      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a2b8:	2310      	movs	r3, #16
 800a2ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2be:	e072      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a35      	ldr	r2, [pc, #212]	@ (800a39c <UART_SetConfig+0x2f4>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d12a      	bne.n	800a320 <UART_SetConfig+0x278>
 800a2ca:	4b30      	ldr	r3, [pc, #192]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a2cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a2d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2d8:	d01a      	beq.n	800a310 <UART_SetConfig+0x268>
 800a2da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a2de:	d81b      	bhi.n	800a318 <UART_SetConfig+0x270>
 800a2e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2e4:	d00c      	beq.n	800a300 <UART_SetConfig+0x258>
 800a2e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2ea:	d815      	bhi.n	800a318 <UART_SetConfig+0x270>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d003      	beq.n	800a2f8 <UART_SetConfig+0x250>
 800a2f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a2f4:	d008      	beq.n	800a308 <UART_SetConfig+0x260>
 800a2f6:	e00f      	b.n	800a318 <UART_SetConfig+0x270>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a2fe:	e052      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a300:	2302      	movs	r3, #2
 800a302:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a306:	e04e      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a308:	2304      	movs	r3, #4
 800a30a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a30e:	e04a      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a310:	2308      	movs	r3, #8
 800a312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a316:	e046      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a318:	2310      	movs	r3, #16
 800a31a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a31e:	e042      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a320:	697b      	ldr	r3, [r7, #20]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a17      	ldr	r2, [pc, #92]	@ (800a384 <UART_SetConfig+0x2dc>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d13a      	bne.n	800a3a0 <UART_SetConfig+0x2f8>
 800a32a:	4b18      	ldr	r3, [pc, #96]	@ (800a38c <UART_SetConfig+0x2e4>)
 800a32c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a330:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800a334:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a338:	d01a      	beq.n	800a370 <UART_SetConfig+0x2c8>
 800a33a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a33e:	d81b      	bhi.n	800a378 <UART_SetConfig+0x2d0>
 800a340:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a344:	d00c      	beq.n	800a360 <UART_SetConfig+0x2b8>
 800a346:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a34a:	d815      	bhi.n	800a378 <UART_SetConfig+0x2d0>
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d003      	beq.n	800a358 <UART_SetConfig+0x2b0>
 800a350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a354:	d008      	beq.n	800a368 <UART_SetConfig+0x2c0>
 800a356:	e00f      	b.n	800a378 <UART_SetConfig+0x2d0>
 800a358:	2300      	movs	r3, #0
 800a35a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a35e:	e022      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a360:	2302      	movs	r3, #2
 800a362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a366:	e01e      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a368:	2304      	movs	r3, #4
 800a36a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a36e:	e01a      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a370:	2308      	movs	r3, #8
 800a372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a376:	e016      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a378:	2310      	movs	r3, #16
 800a37a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a37e:	e012      	b.n	800a3a6 <UART_SetConfig+0x2fe>
 800a380:	cfff69f3 	.word	0xcfff69f3
 800a384:	40008000 	.word	0x40008000
 800a388:	40013800 	.word	0x40013800
 800a38c:	40021000 	.word	0x40021000
 800a390:	40004400 	.word	0x40004400
 800a394:	40004800 	.word	0x40004800
 800a398:	40004c00 	.word	0x40004c00
 800a39c:	40005000 	.word	0x40005000
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3a6:	697b      	ldr	r3, [r7, #20]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	4aae      	ldr	r2, [pc, #696]	@ (800a664 <UART_SetConfig+0x5bc>)
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	f040 8097 	bne.w	800a4e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3b6:	2b08      	cmp	r3, #8
 800a3b8:	d823      	bhi.n	800a402 <UART_SetConfig+0x35a>
 800a3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c0 <UART_SetConfig+0x318>)
 800a3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c0:	0800a3e5 	.word	0x0800a3e5
 800a3c4:	0800a403 	.word	0x0800a403
 800a3c8:	0800a3ed 	.word	0x0800a3ed
 800a3cc:	0800a403 	.word	0x0800a403
 800a3d0:	0800a3f3 	.word	0x0800a3f3
 800a3d4:	0800a403 	.word	0x0800a403
 800a3d8:	0800a403 	.word	0x0800a403
 800a3dc:	0800a403 	.word	0x0800a403
 800a3e0:	0800a3fb 	.word	0x0800a3fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3e4:	f7fe f922 	bl	800862c <HAL_RCC_GetPCLK1Freq>
 800a3e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3ea:	e010      	b.n	800a40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a3ec:	4b9e      	ldr	r3, [pc, #632]	@ (800a668 <UART_SetConfig+0x5c0>)
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a3f0:	e00d      	b.n	800a40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3f2:	f7fe f8af 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 800a3f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a3f8:	e009      	b.n	800a40e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a3fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a400:	e005      	b.n	800a40e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800a402:	2300      	movs	r3, #0
 800a404:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a40c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a40e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 8130 	beq.w	800a676 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a416:	697b      	ldr	r3, [r7, #20]
 800a418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a41a:	4a94      	ldr	r2, [pc, #592]	@ (800a66c <UART_SetConfig+0x5c4>)
 800a41c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a420:	461a      	mov	r2, r3
 800a422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a424:	fbb3 f3f2 	udiv	r3, r3, r2
 800a428:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	4613      	mov	r3, r2
 800a430:	005b      	lsls	r3, r3, #1
 800a432:	4413      	add	r3, r2
 800a434:	69ba      	ldr	r2, [r7, #24]
 800a436:	429a      	cmp	r2, r3
 800a438:	d305      	bcc.n	800a446 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a440:	69ba      	ldr	r2, [r7, #24]
 800a442:	429a      	cmp	r2, r3
 800a444:	d903      	bls.n	800a44e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800a446:	2301      	movs	r3, #1
 800a448:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a44c:	e113      	b.n	800a676 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a44e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a450:	2200      	movs	r2, #0
 800a452:	60bb      	str	r3, [r7, #8]
 800a454:	60fa      	str	r2, [r7, #12]
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a45a:	4a84      	ldr	r2, [pc, #528]	@ (800a66c <UART_SetConfig+0x5c4>)
 800a45c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a460:	b29b      	uxth	r3, r3
 800a462:	2200      	movs	r2, #0
 800a464:	603b      	str	r3, [r7, #0]
 800a466:	607a      	str	r2, [r7, #4]
 800a468:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a46c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a470:	f7f6 fa90 	bl	8000994 <__aeabi_uldivmod>
 800a474:	4602      	mov	r2, r0
 800a476:	460b      	mov	r3, r1
 800a478:	4610      	mov	r0, r2
 800a47a:	4619      	mov	r1, r3
 800a47c:	f04f 0200 	mov.w	r2, #0
 800a480:	f04f 0300 	mov.w	r3, #0
 800a484:	020b      	lsls	r3, r1, #8
 800a486:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a48a:	0202      	lsls	r2, r0, #8
 800a48c:	6979      	ldr	r1, [r7, #20]
 800a48e:	6849      	ldr	r1, [r1, #4]
 800a490:	0849      	lsrs	r1, r1, #1
 800a492:	2000      	movs	r0, #0
 800a494:	460c      	mov	r4, r1
 800a496:	4605      	mov	r5, r0
 800a498:	eb12 0804 	adds.w	r8, r2, r4
 800a49c:	eb43 0905 	adc.w	r9, r3, r5
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	685b      	ldr	r3, [r3, #4]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	469a      	mov	sl, r3
 800a4a8:	4693      	mov	fp, r2
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	465b      	mov	r3, fp
 800a4ae:	4640      	mov	r0, r8
 800a4b0:	4649      	mov	r1, r9
 800a4b2:	f7f6 fa6f 	bl	8000994 <__aeabi_uldivmod>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4be:	6a3b      	ldr	r3, [r7, #32]
 800a4c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a4c4:	d308      	bcc.n	800a4d8 <UART_SetConfig+0x430>
 800a4c6:	6a3b      	ldr	r3, [r7, #32]
 800a4c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a4cc:	d204      	bcs.n	800a4d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	6a3a      	ldr	r2, [r7, #32]
 800a4d4:	60da      	str	r2, [r3, #12]
 800a4d6:	e0ce      	b.n	800a676 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800a4d8:	2301      	movs	r3, #1
 800a4da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4de:	e0ca      	b.n	800a676 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4e0:	697b      	ldr	r3, [r7, #20]
 800a4e2:	69db      	ldr	r3, [r3, #28]
 800a4e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a4e8:	d166      	bne.n	800a5b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800a4ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a4ee:	2b08      	cmp	r3, #8
 800a4f0:	d827      	bhi.n	800a542 <UART_SetConfig+0x49a>
 800a4f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4f8 <UART_SetConfig+0x450>)
 800a4f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f8:	0800a51d 	.word	0x0800a51d
 800a4fc:	0800a525 	.word	0x0800a525
 800a500:	0800a52d 	.word	0x0800a52d
 800a504:	0800a543 	.word	0x0800a543
 800a508:	0800a533 	.word	0x0800a533
 800a50c:	0800a543 	.word	0x0800a543
 800a510:	0800a543 	.word	0x0800a543
 800a514:	0800a543 	.word	0x0800a543
 800a518:	0800a53b 	.word	0x0800a53b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a51c:	f7fe f886 	bl	800862c <HAL_RCC_GetPCLK1Freq>
 800a520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a522:	e014      	b.n	800a54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a524:	f7fe f898 	bl	8008658 <HAL_RCC_GetPCLK2Freq>
 800a528:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a52a:	e010      	b.n	800a54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a52c:	4b4e      	ldr	r3, [pc, #312]	@ (800a668 <UART_SetConfig+0x5c0>)
 800a52e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a530:	e00d      	b.n	800a54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a532:	f7fe f80f 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 800a536:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a538:	e009      	b.n	800a54e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a53a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a53e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a540:	e005      	b.n	800a54e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800a542:	2300      	movs	r3, #0
 800a544:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a546:	2301      	movs	r3, #1
 800a548:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a54c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a54e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a550:	2b00      	cmp	r3, #0
 800a552:	f000 8090 	beq.w	800a676 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a55a:	4a44      	ldr	r2, [pc, #272]	@ (800a66c <UART_SetConfig+0x5c4>)
 800a55c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a560:	461a      	mov	r2, r3
 800a562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a564:	fbb3 f3f2 	udiv	r3, r3, r2
 800a568:	005a      	lsls	r2, r3, #1
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	441a      	add	r2, r3
 800a572:	697b      	ldr	r3, [r7, #20]
 800a574:	685b      	ldr	r3, [r3, #4]
 800a576:	fbb2 f3f3 	udiv	r3, r2, r3
 800a57a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a57c:	6a3b      	ldr	r3, [r7, #32]
 800a57e:	2b0f      	cmp	r3, #15
 800a580:	d916      	bls.n	800a5b0 <UART_SetConfig+0x508>
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a588:	d212      	bcs.n	800a5b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a58a:	6a3b      	ldr	r3, [r7, #32]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	f023 030f 	bic.w	r3, r3, #15
 800a592:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a594:	6a3b      	ldr	r3, [r7, #32]
 800a596:	085b      	lsrs	r3, r3, #1
 800a598:	b29b      	uxth	r3, r3
 800a59a:	f003 0307 	and.w	r3, r3, #7
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	8bfb      	ldrh	r3, [r7, #30]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	8bfa      	ldrh	r2, [r7, #30]
 800a5ac:	60da      	str	r2, [r3, #12]
 800a5ae:	e062      	b.n	800a676 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5b6:	e05e      	b.n	800a676 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a5b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a5bc:	2b08      	cmp	r3, #8
 800a5be:	d828      	bhi.n	800a612 <UART_SetConfig+0x56a>
 800a5c0:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c8 <UART_SetConfig+0x520>)
 800a5c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c6:	bf00      	nop
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	0800a613 	.word	0x0800a613
 800a5d8:	0800a603 	.word	0x0800a603
 800a5dc:	0800a613 	.word	0x0800a613
 800a5e0:	0800a613 	.word	0x0800a613
 800a5e4:	0800a613 	.word	0x0800a613
 800a5e8:	0800a60b 	.word	0x0800a60b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5ec:	f7fe f81e 	bl	800862c <HAL_RCC_GetPCLK1Freq>
 800a5f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5f2:	e014      	b.n	800a61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f4:	f7fe f830 	bl	8008658 <HAL_RCC_GetPCLK2Freq>
 800a5f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a5fa:	e010      	b.n	800a61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800a668 <UART_SetConfig+0x5c0>)
 800a5fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a600:	e00d      	b.n	800a61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a602:	f7fd ffa7 	bl	8008554 <HAL_RCC_GetSysClockFreq>
 800a606:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800a608:	e009      	b.n	800a61e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a60e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800a610:	e005      	b.n	800a61e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800a612:	2300      	movs	r3, #0
 800a614:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800a616:	2301      	movs	r3, #1
 800a618:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800a61c:	bf00      	nop
    }

    if (pclk != 0U)
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d028      	beq.n	800a676 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a628:	4a10      	ldr	r2, [pc, #64]	@ (800a66c <UART_SetConfig+0x5c4>)
 800a62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62e:	461a      	mov	r2, r3
 800a630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a632:	fbb3 f2f2 	udiv	r2, r3, r2
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	085b      	lsrs	r3, r3, #1
 800a63c:	441a      	add	r2, r3
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	fbb2 f3f3 	udiv	r3, r2, r3
 800a646:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a648:	6a3b      	ldr	r3, [r7, #32]
 800a64a:	2b0f      	cmp	r3, #15
 800a64c:	d910      	bls.n	800a670 <UART_SetConfig+0x5c8>
 800a64e:	6a3b      	ldr	r3, [r7, #32]
 800a650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a654:	d20c      	bcs.n	800a670 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a656:	6a3b      	ldr	r3, [r7, #32]
 800a658:	b29a      	uxth	r2, r3
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	60da      	str	r2, [r3, #12]
 800a660:	e009      	b.n	800a676 <UART_SetConfig+0x5ce>
 800a662:	bf00      	nop
 800a664:	40008000 	.word	0x40008000
 800a668:	00f42400 	.word	0x00f42400
 800a66c:	0800ad88 	.word	0x0800ad88
      }
      else
      {
        ret = HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2201      	movs	r2, #1
 800a67a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	2201      	movs	r2, #1
 800a682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	2200      	movs	r2, #0
 800a68a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2200      	movs	r2, #0
 800a690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a692:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800a696:	4618      	mov	r0, r3
 800a698:	3730      	adds	r7, #48	@ 0x30
 800a69a:	46bd      	mov	sp, r7
 800a69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800a6a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ac:	f003 0308 	and.w	r3, r3, #8
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d00a      	beq.n	800a6ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6ce:	f003 0301 	and.w	r3, r3, #1
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d00a      	beq.n	800a6ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	685b      	ldr	r3, [r3, #4]
 800a6dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	430a      	orrs	r2, r1
 800a6ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6f0:	f003 0302 	and.w	r3, r3, #2
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00a      	beq.n	800a70e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	430a      	orrs	r2, r1
 800a70c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a712:	f003 0304 	and.w	r3, r3, #4
 800a716:	2b00      	cmp	r3, #0
 800a718:	d00a      	beq.n	800a730 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	430a      	orrs	r2, r1
 800a72e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a734:	f003 0310 	and.w	r3, r3, #16
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00a      	beq.n	800a752 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	689b      	ldr	r3, [r3, #8]
 800a742:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	430a      	orrs	r2, r1
 800a750:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a756:	f003 0320 	and.w	r3, r3, #32
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d00a      	beq.n	800a774 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	689b      	ldr	r3, [r3, #8]
 800a764:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	430a      	orrs	r2, r1
 800a772:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a778:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d01a      	beq.n	800a7b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	430a      	orrs	r2, r1
 800a794:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a79a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a79e:	d10a      	bne.n	800a7b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	430a      	orrs	r2, r1
 800a7b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a7ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d00a      	beq.n	800a7d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	430a      	orrs	r2, r1
 800a7d6:	605a      	str	r2, [r3, #4]
  }
}
 800a7d8:	bf00      	nop
 800a7da:	370c      	adds	r7, #12
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b098      	sub	sp, #96	@ 0x60
 800a7e8:	af02      	add	r7, sp, #8
 800a7ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7f4:	f7f8 fcc6 	bl	8003184 <HAL_GetTick>
 800a7f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 0308 	and.w	r3, r3, #8
 800a804:	2b08      	cmp	r3, #8
 800a806:	d12f      	bne.n	800a868 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a808:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a810:	2200      	movs	r2, #0
 800a812:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 f88e 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a81c:	4603      	mov	r3, r0
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d022      	beq.n	800a868 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82a:	e853 3f00 	ldrex	r3, [r3]
 800a82e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a832:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a836:	653b      	str	r3, [r7, #80]	@ 0x50
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a840:	647b      	str	r3, [r7, #68]	@ 0x44
 800a842:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a844:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a846:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a848:	e841 2300 	strex	r3, r2, [r1]
 800a84c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a84e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e6      	bne.n	800a822 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2220      	movs	r2, #32
 800a858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a864:	2303      	movs	r3, #3
 800a866:	e063      	b.n	800a930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0304 	and.w	r3, r3, #4
 800a872:	2b04      	cmp	r3, #4
 800a874:	d149      	bne.n	800a90a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a876:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a87a:	9300      	str	r3, [sp, #0]
 800a87c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a87e:	2200      	movs	r2, #0
 800a880:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a884:	6878      	ldr	r0, [r7, #4]
 800a886:	f000 f857 	bl	800a938 <UART_WaitOnFlagUntilTimeout>
 800a88a:	4603      	mov	r3, r0
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d03c      	beq.n	800a90a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	623b      	str	r3, [r7, #32]
   return(result);
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	461a      	mov	r2, r3
 800a8ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a8ae:	633b      	str	r3, [r7, #48]	@ 0x30
 800a8b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a8b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a8b6:	e841 2300 	strex	r3, r2, [r1]
 800a8ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d1e6      	bne.n	800a890 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	3308      	adds	r3, #8
 800a8c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	e853 3f00 	ldrex	r3, [r3]
 800a8d0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f023 0301 	bic.w	r3, r3, #1
 800a8d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	3308      	adds	r3, #8
 800a8e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a8e2:	61fa      	str	r2, [r7, #28]
 800a8e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e6:	69b9      	ldr	r1, [r7, #24]
 800a8e8:	69fa      	ldr	r2, [r7, #28]
 800a8ea:	e841 2300 	strex	r3, r2, [r1]
 800a8ee:	617b      	str	r3, [r7, #20]
   return(result);
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d1e5      	bne.n	800a8c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e012      	b.n	800a930 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2220      	movs	r2, #32
 800a90e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2220      	movs	r2, #32
 800a916:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2200      	movs	r2, #0
 800a91e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2200      	movs	r2, #0
 800a92a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a92e:	2300      	movs	r3, #0
}
 800a930:	4618      	mov	r0, r3
 800a932:	3758      	adds	r7, #88	@ 0x58
 800a934:	46bd      	mov	sp, r7
 800a936:	bd80      	pop	{r7, pc}

0800a938 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b084      	sub	sp, #16
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	603b      	str	r3, [r7, #0]
 800a944:	4613      	mov	r3, r2
 800a946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a948:	e04f      	b.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a950:	d04b      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a952:	f7f8 fc17 	bl	8003184 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	69ba      	ldr	r2, [r7, #24]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d302      	bcc.n	800a968 <UART_WaitOnFlagUntilTimeout+0x30>
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d101      	bne.n	800a96c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a968:	2303      	movs	r3, #3
 800a96a:	e04e      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0304 	and.w	r3, r3, #4
 800a976:	2b00      	cmp	r3, #0
 800a978:	d037      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	2b80      	cmp	r3, #128	@ 0x80
 800a97e:	d034      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	2b40      	cmp	r3, #64	@ 0x40
 800a984:	d031      	beq.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d110      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	2208      	movs	r2, #8
 800a99a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f838 	bl	800aa12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	2208      	movs	r2, #8
 800a9a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e029      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	69db      	ldr	r3, [r3, #28]
 800a9bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a9c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a9c4:	d111      	bne.n	800a9ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a9ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a9d0:	68f8      	ldr	r0, [r7, #12]
 800a9d2:	f000 f81e 	bl	800aa12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2220      	movs	r2, #32
 800a9da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e00f      	b.n	800aa0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	69da      	ldr	r2, [r3, #28]
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	68ba      	ldr	r2, [r7, #8]
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	bf0c      	ite	eq
 800a9fa:	2301      	moveq	r3, #1
 800a9fc:	2300      	movne	r3, #0
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	461a      	mov	r2, r3
 800aa02:	79fb      	ldrb	r3, [r7, #7]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d0a0      	beq.n	800a94a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa08:	2300      	movs	r3, #0
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}

0800aa12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aa12:	b480      	push	{r7}
 800aa14:	b095      	sub	sp, #84	@ 0x54
 800aa16:	af00      	add	r7, sp, #0
 800aa18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa22:	e853 3f00 	ldrex	r3, [r3]
 800aa26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aa28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aa2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	461a      	mov	r2, r3
 800aa36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aa38:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aa3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aa40:	e841 2300 	strex	r3, r2, [r1]
 800aa44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aa46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d1e6      	bne.n	800aa1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	3308      	adds	r3, #8
 800aa52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800aa62:	f023 0301 	bic.w	r3, r3, #1
 800aa66:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	3308      	adds	r3, #8
 800aa6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aa70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800aa78:	e841 2300 	strex	r3, r2, [r1]
 800aa7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800aa7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d1e3      	bne.n	800aa4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aa88:	2b01      	cmp	r3, #1
 800aa8a:	d118      	bne.n	800aabe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	e853 3f00 	ldrex	r3, [r3]
 800aa98:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	f023 0310 	bic.w	r3, r3, #16
 800aaa0:	647b      	str	r3, [r7, #68]	@ 0x44
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aaaa:	61bb      	str	r3, [r7, #24]
 800aaac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaae:	6979      	ldr	r1, [r7, #20]
 800aab0:	69ba      	ldr	r2, [r7, #24]
 800aab2:	e841 2300 	strex	r3, r2, [r1]
 800aab6:	613b      	str	r3, [r7, #16]
   return(result);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1e6      	bne.n	800aa8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2200      	movs	r2, #0
 800aad0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aad2:	bf00      	nop
 800aad4:	3754      	adds	r7, #84	@ 0x54
 800aad6:	46bd      	mov	sp, r7
 800aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aadc:	4770      	bx	lr

0800aade <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aade:	b480      	push	{r7}
 800aae0:	b085      	sub	sp, #20
 800aae2:	af00      	add	r7, sp, #0
 800aae4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_UARTEx_DisableFifoMode+0x16>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e027      	b.n	800ab44 <HAL_UARTEx_DisableFifoMode+0x66>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	@ 0x24
 800ab00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800ab22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	2200      	movs	r2, #0
 800ab28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2220      	movs	r2, #32
 800ab36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ab42:	2300      	movs	r3, #0
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3714      	adds	r7, #20
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b084      	sub	sp, #16
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e02d      	b.n	800abc4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2224      	movs	r2, #36	@ 0x24
 800ab74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681a      	ldr	r2, [r3, #0]
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f022 0201 	bic.w	r2, r2, #1
 800ab8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	683a      	ldr	r2, [r7, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f000 f84f 	bl	800ac48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abc2:	2300      	movs	r3, #0
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
 800abd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800abdc:	2b01      	cmp	r3, #1
 800abde:	d101      	bne.n	800abe4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abe0:	2302      	movs	r3, #2
 800abe2:	e02d      	b.n	800ac40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2224      	movs	r2, #36	@ 0x24
 800abf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f022 0201 	bic.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	689b      	ldr	r3, [r3, #8]
 800ac12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	430a      	orrs	r2, r1
 800ac1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 f811 	bl	800ac48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	68fa      	ldr	r2, [r7, #12]
 800ac2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2220      	movs	r2, #32
 800ac32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3710      	adds	r7, #16
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}

0800ac48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac48:	b480      	push	{r7}
 800ac4a:	b085      	sub	sp, #20
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d108      	bne.n	800ac6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2201      	movs	r2, #1
 800ac5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac68:	e031      	b.n	800acce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac6a:	2308      	movs	r3, #8
 800ac6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac6e:	2308      	movs	r3, #8
 800ac70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	0e5b      	lsrs	r3, r3, #25
 800ac7a:	b2db      	uxtb	r3, r3
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	0f5b      	lsrs	r3, r3, #29
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	f003 0307 	and.w	r3, r3, #7
 800ac90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	7b3a      	ldrb	r2, [r7, #12]
 800ac96:	4911      	ldr	r1, [pc, #68]	@ (800acdc <UARTEx_SetNbDataToProcess+0x94>)
 800ac98:	5c8a      	ldrb	r2, [r1, r2]
 800ac9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac9e:	7b3a      	ldrb	r2, [r7, #12]
 800aca0:	490f      	ldr	r1, [pc, #60]	@ (800ace0 <UARTEx_SetNbDataToProcess+0x98>)
 800aca2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aca4:	fb93 f3f2 	sdiv	r3, r3, r2
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	7b7a      	ldrb	r2, [r7, #13]
 800acb4:	4909      	ldr	r1, [pc, #36]	@ (800acdc <UARTEx_SetNbDataToProcess+0x94>)
 800acb6:	5c8a      	ldrb	r2, [r1, r2]
 800acb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acbc:	7b7a      	ldrb	r2, [r7, #13]
 800acbe:	4908      	ldr	r1, [pc, #32]	@ (800ace0 <UARTEx_SetNbDataToProcess+0x98>)
 800acc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acc2:	fb93 f3f2 	sdiv	r3, r3, r2
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800acce:	bf00      	nop
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	0800ada0 	.word	0x0800ada0
 800ace0:	0800ada8 	.word	0x0800ada8

0800ace4 <memset>:
 800ace4:	4402      	add	r2, r0
 800ace6:	4603      	mov	r3, r0
 800ace8:	4293      	cmp	r3, r2
 800acea:	d100      	bne.n	800acee <memset+0xa>
 800acec:	4770      	bx	lr
 800acee:	f803 1b01 	strb.w	r1, [r3], #1
 800acf2:	e7f9      	b.n	800ace8 <memset+0x4>

0800acf4 <__libc_init_array>:
 800acf4:	b570      	push	{r4, r5, r6, lr}
 800acf6:	4d0d      	ldr	r5, [pc, #52]	@ (800ad2c <__libc_init_array+0x38>)
 800acf8:	4c0d      	ldr	r4, [pc, #52]	@ (800ad30 <__libc_init_array+0x3c>)
 800acfa:	1b64      	subs	r4, r4, r5
 800acfc:	10a4      	asrs	r4, r4, #2
 800acfe:	2600      	movs	r6, #0
 800ad00:	42a6      	cmp	r6, r4
 800ad02:	d109      	bne.n	800ad18 <__libc_init_array+0x24>
 800ad04:	4d0b      	ldr	r5, [pc, #44]	@ (800ad34 <__libc_init_array+0x40>)
 800ad06:	4c0c      	ldr	r4, [pc, #48]	@ (800ad38 <__libc_init_array+0x44>)
 800ad08:	f000 f826 	bl	800ad58 <_init>
 800ad0c:	1b64      	subs	r4, r4, r5
 800ad0e:	10a4      	asrs	r4, r4, #2
 800ad10:	2600      	movs	r6, #0
 800ad12:	42a6      	cmp	r6, r4
 800ad14:	d105      	bne.n	800ad22 <__libc_init_array+0x2e>
 800ad16:	bd70      	pop	{r4, r5, r6, pc}
 800ad18:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad1c:	4798      	blx	r3
 800ad1e:	3601      	adds	r6, #1
 800ad20:	e7ee      	b.n	800ad00 <__libc_init_array+0xc>
 800ad22:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad26:	4798      	blx	r3
 800ad28:	3601      	adds	r6, #1
 800ad2a:	e7f2      	b.n	800ad12 <__libc_init_array+0x1e>
 800ad2c:	0800adb8 	.word	0x0800adb8
 800ad30:	0800adb8 	.word	0x0800adb8
 800ad34:	0800adb8 	.word	0x0800adb8
 800ad38:	0800adbc 	.word	0x0800adbc

0800ad3c <memcpy>:
 800ad3c:	440a      	add	r2, r1
 800ad3e:	4291      	cmp	r1, r2
 800ad40:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ad44:	d100      	bne.n	800ad48 <memcpy+0xc>
 800ad46:	4770      	bx	lr
 800ad48:	b510      	push	{r4, lr}
 800ad4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ad52:	4291      	cmp	r1, r2
 800ad54:	d1f9      	bne.n	800ad4a <memcpy+0xe>
 800ad56:	bd10      	pop	{r4, pc}

0800ad58 <_init>:
 800ad58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad5a:	bf00      	nop
 800ad5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad5e:	bc08      	pop	{r3}
 800ad60:	469e      	mov	lr, r3
 800ad62:	4770      	bx	lr

0800ad64 <_fini>:
 800ad64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad66:	bf00      	nop
 800ad68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6a:	bc08      	pop	{r3}
 800ad6c:	469e      	mov	lr, r3
 800ad6e:	4770      	bx	lr
