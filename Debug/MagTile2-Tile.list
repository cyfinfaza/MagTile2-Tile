
MagTile2-Tile.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008d90  08008d90  00009d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008dd0  08008dd0  0000a018  2**0
                  CONTENTS
  4 .ARM          00000008  08008dd0  08008dd0  00009dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dd8  08008dd8  0000a018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dd8  08008dd8  00009dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ddc  08008ddc  00009ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08008de0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000700  20000018  08008df8  0000a018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000718  08008df8  0000a718  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c5bf  00000000  00000000  0000a048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  00026607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001948  00000000  00000000  00029400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000013df  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f27  00000000  00000000  0002c127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cbd2  00000000  00000000  0005504e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00117647  00000000  00000000  00071c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00189267  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000714c  00000000  00000000  001892ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  001903f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008d78 	.word	0x08008d78

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008d78 	.word	0x08008d78

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009a8:	f000 b96a 	b.w	8000c80 <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	460c      	mov	r4, r1
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d14e      	bne.n	8000a6e <__udivmoddi4+0xaa>
 80009d0:	4694      	mov	ip, r2
 80009d2:	458c      	cmp	ip, r1
 80009d4:	4686      	mov	lr, r0
 80009d6:	fab2 f282 	clz	r2, r2
 80009da:	d962      	bls.n	8000aa2 <__udivmoddi4+0xde>
 80009dc:	b14a      	cbz	r2, 80009f2 <__udivmoddi4+0x2e>
 80009de:	f1c2 0320 	rsb	r3, r2, #32
 80009e2:	4091      	lsls	r1, r2
 80009e4:	fa20 f303 	lsr.w	r3, r0, r3
 80009e8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009ec:	4319      	orrs	r1, r3
 80009ee:	fa00 fe02 	lsl.w	lr, r0, r2
 80009f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009f6:	fa1f f68c 	uxth.w	r6, ip
 80009fa:	fbb1 f4f7 	udiv	r4, r1, r7
 80009fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a02:	fb07 1114 	mls	r1, r7, r4, r1
 8000a06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a0a:	fb04 f106 	mul.w	r1, r4, r6
 8000a0e:	4299      	cmp	r1, r3
 8000a10:	d90a      	bls.n	8000a28 <__udivmoddi4+0x64>
 8000a12:	eb1c 0303 	adds.w	r3, ip, r3
 8000a16:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a1a:	f080 8112 	bcs.w	8000c42 <__udivmoddi4+0x27e>
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	f240 810f 	bls.w	8000c42 <__udivmoddi4+0x27e>
 8000a24:	3c02      	subs	r4, #2
 8000a26:	4463      	add	r3, ip
 8000a28:	1a59      	subs	r1, r3, r1
 8000a2a:	fa1f f38e 	uxth.w	r3, lr
 8000a2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a32:	fb07 1110 	mls	r1, r7, r0, r1
 8000a36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a3a:	fb00 f606 	mul.w	r6, r0, r6
 8000a3e:	429e      	cmp	r6, r3
 8000a40:	d90a      	bls.n	8000a58 <__udivmoddi4+0x94>
 8000a42:	eb1c 0303 	adds.w	r3, ip, r3
 8000a46:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a4a:	f080 80fc 	bcs.w	8000c46 <__udivmoddi4+0x282>
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	f240 80f9 	bls.w	8000c46 <__udivmoddi4+0x282>
 8000a54:	4463      	add	r3, ip
 8000a56:	3802      	subs	r0, #2
 8000a58:	1b9b      	subs	r3, r3, r6
 8000a5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a5e:	2100      	movs	r1, #0
 8000a60:	b11d      	cbz	r5, 8000a6a <__udivmoddi4+0xa6>
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	2200      	movs	r2, #0
 8000a66:	e9c5 3200 	strd	r3, r2, [r5]
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	d905      	bls.n	8000a7e <__udivmoddi4+0xba>
 8000a72:	b10d      	cbz	r5, 8000a78 <__udivmoddi4+0xb4>
 8000a74:	e9c5 0100 	strd	r0, r1, [r5]
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4608      	mov	r0, r1
 8000a7c:	e7f5      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000a7e:	fab3 f183 	clz	r1, r3
 8000a82:	2900      	cmp	r1, #0
 8000a84:	d146      	bne.n	8000b14 <__udivmoddi4+0x150>
 8000a86:	42a3      	cmp	r3, r4
 8000a88:	d302      	bcc.n	8000a90 <__udivmoddi4+0xcc>
 8000a8a:	4290      	cmp	r0, r2
 8000a8c:	f0c0 80f0 	bcc.w	8000c70 <__udivmoddi4+0x2ac>
 8000a90:	1a86      	subs	r6, r0, r2
 8000a92:	eb64 0303 	sbc.w	r3, r4, r3
 8000a96:	2001      	movs	r0, #1
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d0e6      	beq.n	8000a6a <__udivmoddi4+0xa6>
 8000a9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000aa0:	e7e3      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000aa2:	2a00      	cmp	r2, #0
 8000aa4:	f040 8090 	bne.w	8000bc8 <__udivmoddi4+0x204>
 8000aa8:	eba1 040c 	sub.w	r4, r1, ip
 8000aac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ab0:	fa1f f78c 	uxth.w	r7, ip
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000abe:	fb08 4416 	mls	r4, r8, r6, r4
 8000ac2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ac6:	fb07 f006 	mul.w	r0, r7, r6
 8000aca:	4298      	cmp	r0, r3
 8000acc:	d908      	bls.n	8000ae0 <__udivmoddi4+0x11c>
 8000ace:	eb1c 0303 	adds.w	r3, ip, r3
 8000ad2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x11a>
 8000ad8:	4298      	cmp	r0, r3
 8000ada:	f200 80cd 	bhi.w	8000c78 <__udivmoddi4+0x2b4>
 8000ade:	4626      	mov	r6, r4
 8000ae0:	1a1c      	subs	r4, r3, r0
 8000ae2:	fa1f f38e 	uxth.w	r3, lr
 8000ae6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000aea:	fb08 4410 	mls	r4, r8, r0, r4
 8000aee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000af2:	fb00 f707 	mul.w	r7, r0, r7
 8000af6:	429f      	cmp	r7, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x148>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b02:	d202      	bcs.n	8000b0a <__udivmoddi4+0x146>
 8000b04:	429f      	cmp	r7, r3
 8000b06:	f200 80b0 	bhi.w	8000c6a <__udivmoddi4+0x2a6>
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	1bdb      	subs	r3, r3, r7
 8000b0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b12:	e7a5      	b.n	8000a60 <__udivmoddi4+0x9c>
 8000b14:	f1c1 0620 	rsb	r6, r1, #32
 8000b18:	408b      	lsls	r3, r1
 8000b1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1e:	431f      	orrs	r7, r3
 8000b20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b24:	fa04 f301 	lsl.w	r3, r4, r1
 8000b28:	ea43 030c 	orr.w	r3, r3, ip
 8000b2c:	40f4      	lsrs	r4, r6
 8000b2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b32:	0c38      	lsrs	r0, r7, #16
 8000b34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b38:	fbb4 fef0 	udiv	lr, r4, r0
 8000b3c:	fa1f fc87 	uxth.w	ip, r7
 8000b40:	fb00 441e 	mls	r4, r0, lr, r4
 8000b44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b48:	fb0e f90c 	mul.w	r9, lr, ip
 8000b4c:	45a1      	cmp	r9, r4
 8000b4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b52:	d90a      	bls.n	8000b6a <__udivmoddi4+0x1a6>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b5a:	f080 8084 	bcs.w	8000c66 <__udivmoddi4+0x2a2>
 8000b5e:	45a1      	cmp	r9, r4
 8000b60:	f240 8081 	bls.w	8000c66 <__udivmoddi4+0x2a2>
 8000b64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b68:	443c      	add	r4, r7
 8000b6a:	eba4 0409 	sub.w	r4, r4, r9
 8000b6e:	fa1f f983 	uxth.w	r9, r3
 8000b72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b76:	fb00 4413 	mls	r4, r0, r3, r4
 8000b7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b82:	45a4      	cmp	ip, r4
 8000b84:	d907      	bls.n	8000b96 <__udivmoddi4+0x1d2>
 8000b86:	193c      	adds	r4, r7, r4
 8000b88:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000b8c:	d267      	bcs.n	8000c5e <__udivmoddi4+0x29a>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	d965      	bls.n	8000c5e <__udivmoddi4+0x29a>
 8000b92:	3b02      	subs	r3, #2
 8000b94:	443c      	add	r4, r7
 8000b96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000b9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000b9e:	eba4 040c 	sub.w	r4, r4, ip
 8000ba2:	429c      	cmp	r4, r3
 8000ba4:	46ce      	mov	lr, r9
 8000ba6:	469c      	mov	ip, r3
 8000ba8:	d351      	bcc.n	8000c4e <__udivmoddi4+0x28a>
 8000baa:	d04e      	beq.n	8000c4a <__udivmoddi4+0x286>
 8000bac:	b155      	cbz	r5, 8000bc4 <__udivmoddi4+0x200>
 8000bae:	ebb8 030e 	subs.w	r3, r8, lr
 8000bb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bba:	40cb      	lsrs	r3, r1
 8000bbc:	431e      	orrs	r6, r3
 8000bbe:	40cc      	lsrs	r4, r1
 8000bc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	e750      	b.n	8000a6a <__udivmoddi4+0xa6>
 8000bc8:	f1c2 0320 	rsb	r3, r2, #32
 8000bcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000bd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000bd8:	4094      	lsls	r4, r2
 8000bda:	430c      	orrs	r4, r1
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000be4:	fa1f f78c 	uxth.w	r7, ip
 8000be8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bec:	fb08 3110 	mls	r1, r8, r0, r3
 8000bf0:	0c23      	lsrs	r3, r4, #16
 8000bf2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf6:	fb00 f107 	mul.w	r1, r0, r7
 8000bfa:	4299      	cmp	r1, r3
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x24c>
 8000bfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000c02:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c06:	d22c      	bcs.n	8000c62 <__udivmoddi4+0x29e>
 8000c08:	4299      	cmp	r1, r3
 8000c0a:	d92a      	bls.n	8000c62 <__udivmoddi4+0x29e>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c18:	fb08 3311 	mls	r3, r8, r1, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb01 f307 	mul.w	r3, r1, r7
 8000c24:	42a3      	cmp	r3, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x276>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c30:	d213      	bcs.n	8000c5a <__udivmoddi4+0x296>
 8000c32:	42a3      	cmp	r3, r4
 8000c34:	d911      	bls.n	8000c5a <__udivmoddi4+0x296>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4464      	add	r4, ip
 8000c3a:	1ae4      	subs	r4, r4, r3
 8000c3c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c40:	e739      	b.n	8000ab6 <__udivmoddi4+0xf2>
 8000c42:	4604      	mov	r4, r0
 8000c44:	e6f0      	b.n	8000a28 <__udivmoddi4+0x64>
 8000c46:	4608      	mov	r0, r1
 8000c48:	e706      	b.n	8000a58 <__udivmoddi4+0x94>
 8000c4a:	45c8      	cmp	r8, r9
 8000c4c:	d2ae      	bcs.n	8000bac <__udivmoddi4+0x1e8>
 8000c4e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c52:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c56:	3801      	subs	r0, #1
 8000c58:	e7a8      	b.n	8000bac <__udivmoddi4+0x1e8>
 8000c5a:	4631      	mov	r1, r6
 8000c5c:	e7ed      	b.n	8000c3a <__udivmoddi4+0x276>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	e799      	b.n	8000b96 <__udivmoddi4+0x1d2>
 8000c62:	4630      	mov	r0, r6
 8000c64:	e7d4      	b.n	8000c10 <__udivmoddi4+0x24c>
 8000c66:	46d6      	mov	lr, sl
 8000c68:	e77f      	b.n	8000b6a <__udivmoddi4+0x1a6>
 8000c6a:	4463      	add	r3, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	e74d      	b.n	8000b0c <__udivmoddi4+0x148>
 8000c70:	4606      	mov	r6, r0
 8000c72:	4623      	mov	r3, r4
 8000c74:	4608      	mov	r0, r1
 8000c76:	e70f      	b.n	8000a98 <__udivmoddi4+0xd4>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	e730      	b.n	8000ae0 <__udivmoddi4+0x11c>
 8000c7e:	bf00      	nop

08000c80 <__aeabi_idiv0>:
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	0000      	movs	r0, r0
	...

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8c:	f002 f83f 	bl	8002d0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f900 	bl	8000e94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f001 f86e 	bl	8001d74 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000c98:	f000 f946 	bl	8000f28 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c9c:	f000 f9e6 	bl	800106c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000ca0:	f000 fa48 	bl	8001134 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000ca4:	f000 facc 	bl	8001240 <MX_ADC4_Init>
  MX_ADC5_Init();
 8000ca8:	f000 fb2e 	bl	8001308 <MX_ADC5_Init>
  MX_TIM1_Init();
 8000cac:	f000 fc16 	bl	80014dc <MX_TIM1_Init>
  MX_TIM8_Init();
 8000cb0:	f000 fda0 	bl	80017f4 <MX_TIM8_Init>
  MX_TIM20_Init();
 8000cb4:	f000 fe66 	bl	8001984 <MX_TIM20_Init>
  MX_FDCAN1_Init();
 8000cb8:	f000 fb8a 	bl	80013d0 <MX_FDCAN1_Init>
  MX_I2C1_Init();
 8000cbc:	f000 fbce 	bl	800145c <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cc0:	f000 fcd4 	bl	800166c <MX_TIM3_Init>
  MX_UART4_Init();
 8000cc4:	f000 ff26 	bl	8001b14 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000cc8:	f000 ff70 	bl	8001bac <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ccc:	f000 ffba 	bl	8001c44 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000cd0:	f001 f804 	bl	8001cdc <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000cd4:	f000 fd58 	bl	8001788 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

	// 1: green; 2: red; 3: blue
	// set LED to red
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000cd8:	4b5d      	ldr	r3, [pc, #372]	@ (8000e50 <main+0x1c8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 8000ce0:	4b5b      	ldr	r3, [pc, #364]	@ (8000e50 <main+0x1c8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2264      	movs	r2, #100	@ 0x64
 8000ce6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000ce8:	4b59      	ldr	r3, [pc, #356]	@ (8000e50 <main+0x1c8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	2200      	movs	r2, #0
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c

	// turn on LED pwm
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4857      	ldr	r0, [pc, #348]	@ (8000e50 <main+0x1c8>)
 8000cf4:	f006 f8a0 	bl	8006e38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	4855      	ldr	r0, [pc, #340]	@ (8000e50 <main+0x1c8>)
 8000cfc:	f006 f89c 	bl	8006e38 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000d00:	2108      	movs	r1, #8
 8000d02:	4853      	ldr	r0, [pc, #332]	@ (8000e50 <main+0x1c8>)
 8000d04:	f006 f898 	bl	8006e38 <HAL_TIM_PWM_Start>

	HAL_Delay(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d0c:	f002 f870 	bl	8002df0 <HAL_Delay>

	// calibrate the ADCs
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000d10:	217f      	movs	r1, #127	@ 0x7f
 8000d12:	4850      	ldr	r0, [pc, #320]	@ (8000e54 <main+0x1cc>)
 8000d14:	f003 fffc 	bl	8004d10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000d18:	217f      	movs	r1, #127	@ 0x7f
 8000d1a:	484f      	ldr	r0, [pc, #316]	@ (8000e58 <main+0x1d0>)
 8000d1c:	f003 fff8 	bl	8004d10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8000d20:	217f      	movs	r1, #127	@ 0x7f
 8000d22:	484e      	ldr	r0, [pc, #312]	@ (8000e5c <main+0x1d4>)
 8000d24:	f003 fff4 	bl	8004d10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8000d28:	217f      	movs	r1, #127	@ 0x7f
 8000d2a:	484d      	ldr	r0, [pc, #308]	@ (8000e60 <main+0x1d8>)
 8000d2c:	f003 fff0 	bl	8004d10 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc5, ADC_SINGLE_ENDED);
 8000d30:	217f      	movs	r1, #127	@ 0x7f
 8000d32:	484c      	ldr	r0, [pc, #304]	@ (8000e64 <main+0x1dc>)
 8000d34:	f003 ffec 	bl	8004d10 <HAL_ADCEx_Calibration_Start>

	// start the ADCs
	HAL_ADC_Start_IT(&hadc3);
 8000d38:	4848      	ldr	r0, [pc, #288]	@ (8000e5c <main+0x1d4>)
 8000d3a:	f002 fe87 	bl	8003a4c <HAL_ADC_Start_IT>

	// start the timer
	HAL_TIM_Base_Start(&htim6);
 8000d3e:	484a      	ldr	r0, [pc, #296]	@ (8000e68 <main+0x1e0>)
 8000d40:	f005 ffa8 	bl	8006c94 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d44:	2100      	movs	r1, #0
 8000d46:	4849      	ldr	r0, [pc, #292]	@ (8000e6c <main+0x1e4>)
 8000d48:	f006 f876 	bl	8006e38 <HAL_TIM_PWM_Start>

	// set LED to yellow
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 100);
 8000d4c:	4b40      	ldr	r3, [pc, #256]	@ (8000e50 <main+0x1c8>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2264      	movs	r2, #100	@ 0x64
 8000d52:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 100);
 8000d54:	4b3e      	ldr	r3, [pc, #248]	@ (8000e50 <main+0x1c8>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2264      	movs	r2, #100	@ 0x64
 8000d5a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000d5c:	4b3c      	ldr	r3, [pc, #240]	@ (8000e50 <main+0x1c8>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2200      	movs	r2, #0
 8000d62:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// read digital inputs
		BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 8000d64:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000d68:	4841      	ldr	r0, [pc, #260]	@ (8000e70 <main+0x1e8>)
 8000d6a:	f004 fdc5 	bl	80058f8 <HAL_GPIO_ReadPin>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b40      	ldr	r3, [pc, #256]	@ (8000e74 <main+0x1ec>)
 8000d74:	701a      	strb	r2, [r3, #0]

		// read analog inputs
		HAL_ADC_Start(&hadc1);
 8000d76:	4837      	ldr	r0, [pc, #220]	@ (8000e54 <main+0x1cc>)
 8000d78:	f002 fc7e 	bl	8003678 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000d7c:	2164      	movs	r1, #100	@ 0x64
 8000d7e:	4835      	ldr	r0, [pc, #212]	@ (8000e54 <main+0x1cc>)
 8000d80:	f002 fd5e 	bl	8003840 <HAL_ADC_PollForConversion>
		V_SENSE_HV = HAL_ADC_GetValue(&hadc1);
 8000d84:	4833      	ldr	r0, [pc, #204]	@ (8000e54 <main+0x1cc>)
 8000d86:	f002 ffb9 	bl	8003cfc <HAL_ADC_GetValue>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	4a3a      	ldr	r2, [pc, #232]	@ (8000e78 <main+0x1f0>)
 8000d8e:	6013      	str	r3, [r2, #0]
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000d90:	2164      	movs	r1, #100	@ 0x64
 8000d92:	4830      	ldr	r0, [pc, #192]	@ (8000e54 <main+0x1cc>)
 8000d94:	f002 fd54 	bl	8003840 <HAL_ADC_PollForConversion>
		V_SENSE_12 = HAL_ADC_GetValue(&hadc1);
 8000d98:	482e      	ldr	r0, [pc, #184]	@ (8000e54 <main+0x1cc>)
 8000d9a:	f002 ffaf 	bl	8003cfc <HAL_ADC_GetValue>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a36      	ldr	r2, [pc, #216]	@ (8000e7c <main+0x1f4>)
 8000da2:	6013      	str	r3, [r2, #0]
		HAL_ADC_PollForConversion(&hadc1, 100);
 8000da4:	2164      	movs	r1, #100	@ 0x64
 8000da6:	482b      	ldr	r0, [pc, #172]	@ (8000e54 <main+0x1cc>)
 8000da8:	f002 fd4a 	bl	8003840 <HAL_ADC_PollForConversion>
		V_SENSE_5 = HAL_ADC_GetValue(&hadc1);
 8000dac:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <main+0x1cc>)
 8000dae:	f002 ffa5 	bl	8003cfc <HAL_ADC_GetValue>
 8000db2:	4603      	mov	r3, r0
 8000db4:	4a32      	ldr	r2, [pc, #200]	@ (8000e80 <main+0x1f8>)
 8000db6:	6013      	str	r3, [r2, #0]

		// calculate analog values
		voltage_in_12 = V_SENSE_12 * 0.0080566406;
 8000db8:	4b30      	ldr	r3, [pc, #192]	@ (8000e7c <main+0x1f4>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff fc97 	bl	80006f0 <__aeabi_ui2d>
 8000dc2:	a31d      	add	r3, pc, #116	@ (adr r3, 8000e38 <main+0x1b0>)
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f7ff fa26 	bl	8000218 <__aeabi_dmul>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	460b      	mov	r3, r1
 8000dd0:	4610      	mov	r0, r2
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	f7ff fd8e 	bl	80008f4 <__aeabi_d2f>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a2a      	ldr	r2, [pc, #168]	@ (8000e84 <main+0x1fc>)
 8000ddc:	6013      	str	r3, [r2, #0]
		voltage_in_5 = V_SENSE_5 * 0.0014648438;
 8000dde:	4b28      	ldr	r3, [pc, #160]	@ (8000e80 <main+0x1f8>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fc84 	bl	80006f0 <__aeabi_ui2d>
 8000de8:	a315      	add	r3, pc, #84	@ (adr r3, 8000e40 <main+0x1b8>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fa13 	bl	8000218 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fd7b 	bl	80008f4 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a21      	ldr	r2, [pc, #132]	@ (8000e88 <main+0x200>)
 8000e02:	6013      	str	r3, [r2, #0]
		voltage_in_HV = V_SENSE_HV * 0.0194091797;
 8000e04:	4b1c      	ldr	r3, [pc, #112]	@ (8000e78 <main+0x1f0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fc71 	bl	80006f0 <__aeabi_ui2d>
 8000e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8000e48 <main+0x1c0>)
 8000e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e14:	f7ff fa00 	bl	8000218 <__aeabi_dmul>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	460b      	mov	r3, r1
 8000e1c:	4610      	mov	r0, r2
 8000e1e:	4619      	mov	r1, r3
 8000e20:	f7ff fd68 	bl	80008f4 <__aeabi_d2f>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a19      	ldr	r2, [pc, #100]	@ (8000e8c <main+0x204>)
 8000e28:	6013      	str	r3, [r2, #0]

		// set timer output
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coil_pwm_ccr_1);
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <main+0x208>)
 8000e2c:	881a      	ldrh	r2, [r3, #0]
 8000e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <main+0x1e4>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	635a      	str	r2, [r3, #52]	@ 0x34
		BOOT0_SENSE = HAL_GPIO_ReadPin(BOOT0_SENSE_GPIO_Port, BOOT0_SENSE_Pin);
 8000e34:	bf00      	nop
 8000e36:	e795      	b.n	8000d64 <main+0xdc>
 8000e38:	ff241901 	.word	0xff241901
 8000e3c:	3f807fff 	.word	0x3f807fff
 8000e40:	0dbe6fed 	.word	0x0dbe6fed
 8000e44:	3f580000 	.word	0x3f580000
 8000e48:	0036f9c0 	.word	0x0036f9c0
 8000e4c:	3f93e000 	.word	0x3f93e000
 8000e50:	20000354 	.word	0x20000354
 8000e54:	20000034 	.word	0x20000034
 8000e58:	200000a0 	.word	0x200000a0
 8000e5c:	2000010c 	.word	0x2000010c
 8000e60:	20000178 	.word	0x20000178
 8000e64:	200001e4 	.word	0x200001e4
 8000e68:	200003a0 	.word	0x200003a0
 8000e6c:	20000308 	.word	0x20000308
 8000e70:	48000400 	.word	0x48000400
 8000e74:	200006d4 	.word	0x200006d4
 8000e78:	200006d8 	.word	0x200006d8
 8000e7c:	200006dc 	.word	0x200006dc
 8000e80:	200006e0 	.word	0x200006e0
 8000e84:	200006ec 	.word	0x200006ec
 8000e88:	200006f0 	.word	0x200006f0
 8000e8c:	200006e8 	.word	0x200006e8
 8000e90:	200006f8 	.word	0x200006f8

08000e94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b094      	sub	sp, #80	@ 0x50
 8000e98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	2238      	movs	r2, #56	@ 0x38
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f007 ff3c 	bl	8008d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	601a      	str	r2, [r3, #0]
 8000eae:	605a      	str	r2, [r3, #4]
 8000eb0:	609a      	str	r2, [r3, #8]
 8000eb2:	60da      	str	r2, [r3, #12]
 8000eb4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f004 fe68 	bl	8005b8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ec0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ec4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec6:	2302      	movs	r3, #2
 8000ec8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eca:	2303      	movs	r3, #3
 8000ecc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ece:	2304      	movs	r3, #4
 8000ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ed2:	2354      	movs	r3, #84	@ 0x54
 8000ed4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 0318 	add.w	r3, r7, #24
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f004 ff04 	bl	8005cf4 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ef2:	f001 f89d 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000efa:	2303      	movs	r3, #3
 8000efc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	2104      	movs	r1, #4
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f005 fa02 	bl	8006318 <HAL_RCC_ClockConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000f1a:	f001 f889 	bl	8002030 <Error_Handler>
  }
}
 8000f1e:	bf00      	nop
 8000f20:	3750      	adds	r7, #80	@ 0x50
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
	...

08000f28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08c      	sub	sp, #48	@ 0x30
 8000f2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f007 feed 	bl	8008d20 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f46:	4b45      	ldr	r3, [pc, #276]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000f4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f4e:	4b43      	ldr	r3, [pc, #268]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f54:	4b41      	ldr	r3, [pc, #260]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f5a:	4b40      	ldr	r3, [pc, #256]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f60:	4b3e      	ldr	r3, [pc, #248]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f66:	4b3d      	ldr	r3, [pc, #244]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f6e:	2204      	movs	r2, #4
 8000f70:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f72:	4b3a      	ldr	r3, [pc, #232]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f78:	4b38      	ldr	r3, [pc, #224]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000f7e:	4b37      	ldr	r3, [pc, #220]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f80:	2203      	movs	r2, #3
 8000f82:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f84:	4b35      	ldr	r3, [pc, #212]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b33      	ldr	r3, [pc, #204]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f92:	4b32      	ldr	r3, [pc, #200]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <MX_ADC1_Init+0x134>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000fa6:	4b2d      	ldr	r3, [pc, #180]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_64;
 8000fae:	4b2b      	ldr	r3, [pc, #172]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fb0:	2214      	movs	r2, #20
 8000fb2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_6;
 8000fb4:	4b29      	ldr	r3, [pc, #164]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fb6:	22c0      	movs	r2, #192	@ 0xc0
 8000fb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fc0:	4b26      	ldr	r3, [pc, #152]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fc6:	4825      	ldr	r0, [pc, #148]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fc8:	f002 f99a 	bl	8003300 <HAL_ADC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000fd2:	f001 f82d 	bl	8002030 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481e      	ldr	r0, [pc, #120]	@ (800105c <MX_ADC1_Init+0x134>)
 8000fe2:	f003 ff29 	bl	8004e38 <HAL_ADCEx_MultiModeConfigChannel>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fec:	f001 f820 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <MX_ADC1_Init+0x138>)
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ff4:	2306      	movs	r3, #6
 8000ff6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ffc:	237f      	movs	r3, #127	@ 0x7f
 8000ffe:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001000:	2304      	movs	r3, #4
 8001002:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	4619      	mov	r1, r3
 800100c:	4813      	ldr	r0, [pc, #76]	@ (800105c <MX_ADC1_Init+0x134>)
 800100e:	f003 f8f7 	bl	8004200 <HAL_ADC_ConfigChannel>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 8001018:	f001 f80a 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_ADC1_Init+0x13c>)
 800101e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001020:	230c      	movs	r3, #12
 8001022:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	4619      	mov	r1, r3
 8001028:	480c      	ldr	r0, [pc, #48]	@ (800105c <MX_ADC1_Init+0x134>)
 800102a:	f003 f8e9 	bl	8004200 <HAL_ADC_ConfigChannel>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_ADC1_Init+0x110>
  {
    Error_Handler();
 8001034:	f000 fffc 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <MX_ADC1_Init+0x140>)
 800103a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800103c:	2312      	movs	r3, #18
 800103e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	@ (800105c <MX_ADC1_Init+0x134>)
 8001046:	f003 f8db 	bl	8004200 <HAL_ADC_ConfigChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 8001050:	f000 ffee 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	20000034 	.word	0x20000034
 8001060:	0c900008 	.word	0x0c900008
 8001064:	10c00010 	.word	0x10c00010
 8001068:	14f00020 	.word	0x14f00020

0800106c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b088      	sub	sp, #32
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001072:	463b      	mov	r3, r7
 8001074:	2220      	movs	r2, #32
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f007 fe51 	bl	8008d20 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800107e:	4b2a      	ldr	r3, [pc, #168]	@ (8001128 <MX_ADC2_Init+0xbc>)
 8001080:	4a2a      	ldr	r2, [pc, #168]	@ (800112c <MX_ADC2_Init+0xc0>)
 8001082:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001084:	4b28      	ldr	r3, [pc, #160]	@ (8001128 <MX_ADC2_Init+0xbc>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800108a:	4b27      	ldr	r3, [pc, #156]	@ (8001128 <MX_ADC2_Init+0xbc>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001090:	4b25      	ldr	r3, [pc, #148]	@ (8001128 <MX_ADC2_Init+0xbc>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001096:	4b24      	ldr	r3, [pc, #144]	@ (8001128 <MX_ADC2_Init+0xbc>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800109c:	4b22      	ldr	r3, [pc, #136]	@ (8001128 <MX_ADC2_Init+0xbc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010a4:	2204      	movs	r2, #4
 80010a6:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010b6:	2201      	movs	r2, #1
 80010b8:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010c2:	4b19      	ldr	r3, [pc, #100]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010c8:	4b17      	ldr	r3, [pc, #92]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80010ce:	4b16      	ldr	r3, [pc, #88]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010d6:	4b14      	ldr	r3, [pc, #80]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010d8:	2200      	movs	r2, #0
 80010da:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80010dc:	4b12      	ldr	r3, [pc, #72]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010de:	2200      	movs	r2, #0
 80010e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010e4:	4810      	ldr	r0, [pc, #64]	@ (8001128 <MX_ADC2_Init+0xbc>)
 80010e6:	f002 f90b 	bl	8003300 <HAL_ADC_Init>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80010f0:	f000 ff9e 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_ADC2_Init+0xc4>)
 80010f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001100:	237f      	movs	r3, #127	@ 0x7f
 8001102:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001104:	2304      	movs	r3, #4
 8001106:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800110c:	463b      	mov	r3, r7
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	@ (8001128 <MX_ADC2_Init+0xbc>)
 8001112:	f003 f875 	bl	8004200 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 ff88 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3720      	adds	r7, #32
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	200000a0 	.word	0x200000a0
 800112c:	50000100 	.word	0x50000100
 8001130:	04300002 	.word	0x04300002

08001134 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	@ 0x30
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800113a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2220      	movs	r2, #32
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f007 fde7 	bl	8008d20 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001152:	4b38      	ldr	r3, [pc, #224]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001154:	4a38      	ldr	r2, [pc, #224]	@ (8001238 <MX_ADC3_Init+0x104>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001158:	4b36      	ldr	r3, [pc, #216]	@ (8001234 <MX_ADC3_Init+0x100>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800115e:	4b35      	ldr	r3, [pc, #212]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b33      	ldr	r3, [pc, #204]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800116a:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <MX_ADC3_Init+0x100>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001170:	4b30      	ldr	r3, [pc, #192]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001176:	4b2f      	ldr	r3, [pc, #188]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001178:	2204      	movs	r2, #4
 800117a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800117c:	4b2d      	ldr	r3, [pc, #180]	@ (8001234 <MX_ADC3_Init+0x100>)
 800117e:	2200      	movs	r2, #0
 8001180:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001182:	4b2c      	ldr	r3, [pc, #176]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001184:	2200      	movs	r2, #0
 8001186:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001188:	4b2a      	ldr	r3, [pc, #168]	@ (8001234 <MX_ADC3_Init+0x100>)
 800118a:	2201      	movs	r2, #1
 800118c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800118e:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 8001196:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <MX_ADC3_Init+0x100>)
 8001198:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 800119c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80011b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_256;
 80011be:	4b1d      	ldr	r3, [pc, #116]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011c0:	221c      	movs	r2, #28
 80011c2:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_4;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	651a      	str	r2, [r3, #80]	@ 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80011d6:	4817      	ldr	r0, [pc, #92]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011d8:	f002 f892 	bl	8003300 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80011e2:	f000 ff25 	bl	8002030 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011e6:	2300      	movs	r3, #0
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4810      	ldr	r0, [pc, #64]	@ (8001234 <MX_ADC3_Init+0x100>)
 80011f2:	f003 fe21 	bl	8004e38 <HAL_ADCEx_MultiModeConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 80011fc:	f000 ff18 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_ADC3_Init+0x108>)
 8001202:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001204:	2306      	movs	r3, #6
 8001206:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001208:	2304      	movs	r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800120c:	237f      	movs	r3, #127	@ 0x7f
 800120e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001210:	2304      	movs	r3, #4
 8001212:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_ADC3_Init+0x100>)
 800121e:	f002 ffef 	bl	8004200 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC3_Init+0xf8>
  {
    Error_Handler();
 8001228:	f000 ff02 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3730      	adds	r7, #48	@ 0x30
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	2000010c 	.word	0x2000010c
 8001238:	50000400 	.word	0x50000400
 800123c:	04300002 	.word	0x04300002

08001240 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2220      	movs	r2, #32
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f007 fd67 	bl	8008d20 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001252:	4b2a      	ldr	r3, [pc, #168]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001254:	4a2a      	ldr	r2, [pc, #168]	@ (8001300 <MX_ADC4_Init+0xc0>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001258:	4b28      	ldr	r3, [pc, #160]	@ (80012fc <MX_ADC4_Init+0xbc>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800125e:	4b27      	ldr	r3, [pc, #156]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001264:	4b25      	ldr	r3, [pc, #148]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800126a:	4b24      	ldr	r3, [pc, #144]	@ (80012fc <MX_ADC4_Init+0xbc>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001270:	4b22      	ldr	r3, [pc, #136]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001272:	2200      	movs	r2, #0
 8001274:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001276:	4b21      	ldr	r3, [pc, #132]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001278:	2204      	movs	r2, #4
 800127a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800127c:	4b1f      	ldr	r3, [pc, #124]	@ (80012fc <MX_ADC4_Init+0xbc>)
 800127e:	2200      	movs	r2, #0
 8001280:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001282:	4b1e      	ldr	r3, [pc, #120]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001284:	2200      	movs	r2, #0
 8001286:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001288:	4b1c      	ldr	r3, [pc, #112]	@ (80012fc <MX_ADC4_Init+0xbc>)
 800128a:	2201      	movs	r2, #1
 800128c:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800128e:	4b1b      	ldr	r3, [pc, #108]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001290:	2200      	movs	r2, #0
 8001292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001296:	4b19      	ldr	r3, [pc, #100]	@ (80012fc <MX_ADC4_Init+0xbc>)
 8001298:	2200      	movs	r2, #0
 800129a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <MX_ADC4_Init+0xbc>)
 800129e:	2200      	movs	r2, #0
 80012a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <MX_ADC4_Init+0xbc>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <MX_ADC4_Init+0xbc>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80012b0:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <MX_ADC4_Init+0xbc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80012b8:	4810      	ldr	r0, [pc, #64]	@ (80012fc <MX_ADC4_Init+0xbc>)
 80012ba:	f002 f821 	bl	8003300 <HAL_ADC_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_ADC4_Init+0x88>
  {
    Error_Handler();
 80012c4:	f000 feb4 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_ADC4_Init+0xc4>)
 80012ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012cc:	2306      	movs	r3, #6
 80012ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012d4:	237f      	movs	r3, #127	@ 0x7f
 80012d6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012d8:	2304      	movs	r3, #4
 80012da:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <MX_ADC4_Init+0xbc>)
 80012e6:	f002 ff8b 	bl	8004200 <HAL_ADC_ConfigChannel>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_ADC4_Init+0xb4>
  {
    Error_Handler();
 80012f0:	f000 fe9e 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012f4:	bf00      	nop
 80012f6:	3720      	adds	r7, #32
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000178 	.word	0x20000178
 8001300:	50000500 	.word	0x50000500
 8001304:	04300002 	.word	0x04300002

08001308 <MX_ADC5_Init>:
  * @brief ADC5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC5_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC5_Init 0 */

  /* USER CODE END ADC5_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2220      	movs	r2, #32
 8001312:	2100      	movs	r1, #0
 8001314:	4618      	mov	r0, r3
 8001316:	f007 fd03 	bl	8008d20 <memset>

  /* USER CODE END ADC5_Init 1 */

  /** Common config
  */
  hadc5.Instance = ADC5;
 800131a:	4b2a      	ldr	r3, [pc, #168]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800131c:	4a2a      	ldr	r2, [pc, #168]	@ (80013c8 <MX_ADC5_Init+0xc0>)
 800131e:	601a      	str	r2, [r3, #0]
  hadc5.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001320:	4b28      	ldr	r3, [pc, #160]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc5.Init.Resolution = ADC_RESOLUTION_12B;
 8001326:	4b27      	ldr	r3, [pc, #156]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hadc5.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	4b25      	ldr	r3, [pc, #148]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hadc5.Init.GainCompensation = 0;
 8001332:	4b24      	ldr	r3, [pc, #144]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  hadc5.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001338:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hadc5.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800133e:	4b21      	ldr	r3, [pc, #132]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001340:	2204      	movs	r2, #4
 8001342:	619a      	str	r2, [r3, #24]
  hadc5.Init.LowPowerAutoWait = DISABLE;
 8001344:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	771a      	strb	r2, [r3, #28]
  hadc5.Init.ContinuousConvMode = DISABLE;
 800134a:	4b1e      	ldr	r3, [pc, #120]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800134c:	2200      	movs	r2, #0
 800134e:	775a      	strb	r2, [r3, #29]
  hadc5.Init.NbrOfConversion = 1;
 8001350:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001352:	2201      	movs	r2, #1
 8001354:	621a      	str	r2, [r3, #32]
  hadc5.Init.DiscontinuousConvMode = DISABLE;
 8001356:	4b1b      	ldr	r3, [pc, #108]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc5.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc5.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001364:	4b17      	ldr	r3, [pc, #92]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001366:	2200      	movs	r2, #0
 8001368:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc5.Init.DMAContinuousRequests = DISABLE;
 800136a:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc5.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001372:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc5.Init.OversamplingMode = DISABLE;
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc5) != HAL_OK)
 8001380:	4810      	ldr	r0, [pc, #64]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 8001382:	f001 ffbd 	bl	8003300 <HAL_ADC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_ADC5_Init+0x88>
  {
    Error_Handler();
 800138c:	f000 fe50 	bl	8002030 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001390:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <MX_ADC5_Init+0xc4>)
 8001392:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001394:	2306      	movs	r3, #6
 8001396:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800139c:	237f      	movs	r3, #127	@ 0x7f
 800139e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80013a0:	2304      	movs	r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc5, &sConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	@ (80013c4 <MX_ADC5_Init+0xbc>)
 80013ae:	f002 ff27 	bl	8004200 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC5_Init+0xb4>
  {
    Error_Handler();
 80013b8:	f000 fe3a 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN ADC5_Init 2 */

  /* USER CODE END ADC5_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3720      	adds	r7, #32
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001e4 	.word	0x200001e4
 80013c8:	50000600 	.word	0x50000600
 80013cc:	19200040 	.word	0x19200040

080013d0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013d6:	4a20      	ldr	r2, [pc, #128]	@ (8001458 <MX_FDCAN1_Init+0x88>)
 80013d8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80013da:	4b1e      	ldr	r3, [pc, #120]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013dc:	2200      	movs	r2, #0
 80013de:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80013e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80013e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 80013fe:	4b15      	ldr	r3, [pc, #84]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001400:	2210      	movs	r2, #16
 8001402:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001404:	4b13      	ldr	r3, [pc, #76]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001406:	2201      	movs	r2, #1
 8001408:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 1;
 800140a:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 800140c:	2201      	movs	r2, #1
 800140e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 1;
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001412:	2201      	movs	r2, #1
 8001414:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001418:	2201      	movs	r2, #1
 800141a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800141c:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 800141e:	2201      	movs	r2, #1
 8001420:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001422:	4b0c      	ldr	r3, [pc, #48]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001424:	2201      	movs	r2, #1
 8001426:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001428:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 800142a:	2201      	movs	r2, #1
 800142c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800142e:	4b09      	ldr	r3, [pc, #36]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001430:	2200      	movs	r2, #0
 8001432:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001434:	4b07      	ldr	r3, [pc, #28]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001436:	2200      	movs	r2, #0
 8001438:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800143a:	4b06      	ldr	r3, [pc, #24]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 800143c:	2200      	movs	r2, #0
 800143e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	@ (8001454 <MX_FDCAN1_Init+0x84>)
 8001442:	f003 ff11 	bl	8005268 <HAL_FDCAN_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 800144c:	f000 fdf0 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000250 	.word	0x20000250
 8001458:	40006400 	.word	0x40006400

0800145c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001460:	4b1b      	ldr	r3, [pc, #108]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001462:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <MX_I2C1_Init+0x78>)
 8001464:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x50916E9F;
 8001466:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001468:	4a1b      	ldr	r2, [pc, #108]	@ (80014d8 <MX_I2C1_Init+0x7c>)
 800146a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001474:	2201      	movs	r2, #1
 8001476:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <MX_I2C1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800147e:	4b14      	ldr	r3, [pc, #80]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001484:	4b12      	ldr	r3, [pc, #72]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800148a:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <MX_I2C1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001496:	480e      	ldr	r0, [pc, #56]	@ (80014d0 <MX_I2C1_Init+0x74>)
 8001498:	f004 fa46 	bl	8005928 <HAL_I2C_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014a2:	f000 fdc5 	bl	8002030 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a6:	2100      	movs	r1, #0
 80014a8:	4809      	ldr	r0, [pc, #36]	@ (80014d0 <MX_I2C1_Init+0x74>)
 80014aa:	f004 fad8 	bl	8005a5e <HAL_I2CEx_ConfigAnalogFilter>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014b4:	f000 fdbc 	bl	8002030 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014b8:	2100      	movs	r1, #0
 80014ba:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_I2C1_Init+0x74>)
 80014bc:	f004 fb1a 	bl	8005af4 <HAL_I2CEx_ConfigDigitalFilter>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014c6:	f000 fdb3 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200002b4 	.word	0x200002b4
 80014d4:	40005400 	.word	0x40005400
 80014d8:	50916e9f 	.word	0x50916e9f

080014dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09c      	sub	sp, #112	@ 0x70
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2234      	movs	r2, #52	@ 0x34
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f007 fc02 	bl	8008d20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800151c:	4b51      	ldr	r3, [pc, #324]	@ (8001664 <MX_TIM1_Init+0x188>)
 800151e:	4a52      	ldr	r2, [pc, #328]	@ (8001668 <MX_TIM1_Init+0x18c>)
 8001520:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001522:	4b50      	ldr	r3, [pc, #320]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b4e      	ldr	r3, [pc, #312]	@ (8001664 <MX_TIM1_Init+0x188>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1600;
 800152e:	4b4d      	ldr	r3, [pc, #308]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001530:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 8001534:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800153c:	4b49      	ldr	r3, [pc, #292]	@ (8001664 <MX_TIM1_Init+0x188>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001548:	4846      	ldr	r0, [pc, #280]	@ (8001664 <MX_TIM1_Init+0x188>)
 800154a:	f005 fb4b 	bl	8006be4 <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fd6c 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001562:	4619      	mov	r1, r3
 8001564:	483f      	ldr	r0, [pc, #252]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001566:	f005 fe8d 	bl	8007284 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fd5e 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001574:	483b      	ldr	r0, [pc, #236]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001576:	f005 fbfd 	bl	8006d74 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fd56 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001590:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001594:	4619      	mov	r1, r3
 8001596:	4833      	ldr	r0, [pc, #204]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001598:	f006 fc2a 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fd45 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	@ 0x60
 80015a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015b2:	2300      	movs	r3, #0
 80015b4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80015b6:	2304      	movs	r3, #4
 80015b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4826      	ldr	r0, [pc, #152]	@ (8001664 <MX_TIM1_Init+0x188>)
 80015cc:	f005 fd46 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015d6:	f000 fd2b 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015de:	2204      	movs	r2, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4820      	ldr	r0, [pc, #128]	@ (8001664 <MX_TIM1_Init+0x188>)
 80015e4:	f005 fd3a 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80015ee:	f000 fd1f 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015f6:	2208      	movs	r2, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	481a      	ldr	r0, [pc, #104]	@ (8001664 <MX_TIM1_Init+0x188>)
 80015fc:	f005 fd2e 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001606:	f000 fd13 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001622:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001624:	2300      	movs	r3, #0
 8001626:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001630:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001634:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001636:	2300      	movs	r3, #0
 8001638:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800163a:	2300      	movs	r3, #0
 800163c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163e:	2300      	movs	r3, #0
 8001640:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	4619      	mov	r1, r3
 8001646:	4807      	ldr	r0, [pc, #28]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001648:	f006 fc68 	bl	8007f1c <HAL_TIMEx_ConfigBreakDeadTime>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 8001652:	f000 fced 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001656:	4803      	ldr	r0, [pc, #12]	@ (8001664 <MX_TIM1_Init+0x188>)
 8001658:	f001 f884 	bl	8002764 <HAL_TIM_MspPostInit>

}
 800165c:	bf00      	nop
 800165e:	3770      	adds	r7, #112	@ 0x70
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000308 	.word	0x20000308
 8001668:	40012c00 	.word	0x40012c00

0800166c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08e      	sub	sp, #56	@ 0x38
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001672:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]
 800167a:	605a      	str	r2, [r3, #4]
 800167c:	609a      	str	r2, [r3, #8]
 800167e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001680:	f107 031c 	add.w	r3, r7, #28
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]
 800169a:	615a      	str	r2, [r3, #20]
 800169c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800169e:	4b38      	ldr	r3, [pc, #224]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016a0:	4a38      	ldr	r2, [pc, #224]	@ (8001784 <MX_TIM3_Init+0x118>)
 80016a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80016a4:	4b36      	ldr	r3, [pc, #216]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016aa:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 80016b0:	4b33      	ldr	r3, [pc, #204]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016b2:	2264      	movs	r2, #100	@ 0x64
 80016b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b6:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016bc:	4b30      	ldr	r3, [pc, #192]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80016c2:	482f      	ldr	r0, [pc, #188]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016c4:	f005 fa8e 	bl	8006be4 <HAL_TIM_Base_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80016ce:	f000 fcaf 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80016d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016dc:	4619      	mov	r1, r3
 80016de:	4828      	ldr	r0, [pc, #160]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016e0:	f005 fdd0 	bl	8007284 <HAL_TIM_ConfigClockSource>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80016ea:	f000 fca1 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80016ee:	4824      	ldr	r0, [pc, #144]	@ (8001780 <MX_TIM3_Init+0x114>)
 80016f0:	f005 fb40 	bl	8006d74 <HAL_TIM_PWM_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80016fa:	f000 fc99 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001706:	f107 031c 	add.w	r3, r7, #28
 800170a:	4619      	mov	r1, r3
 800170c:	481c      	ldr	r0, [pc, #112]	@ (8001780 <MX_TIM3_Init+0x114>)
 800170e:	f006 fb6f 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001718:	f000 fc8a 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800171c:	2360      	movs	r3, #96	@ 0x60
 800171e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8001720:	2332      	movs	r3, #50	@ 0x32
 8001722:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001728:	2300      	movs	r3, #0
 800172a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800172c:	463b      	mov	r3, r7
 800172e:	2200      	movs	r2, #0
 8001730:	4619      	mov	r1, r3
 8001732:	4813      	ldr	r0, [pc, #76]	@ (8001780 <MX_TIM3_Init+0x114>)
 8001734:	f005 fc92 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800173e:	f000 fc77 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	2204      	movs	r2, #4
 8001746:	4619      	mov	r1, r3
 8001748:	480d      	ldr	r0, [pc, #52]	@ (8001780 <MX_TIM3_Init+0x114>)
 800174a:	f005 fc87 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001754:	f000 fc6c 	bl	8002030 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	2208      	movs	r2, #8
 8001760:	4619      	mov	r1, r3
 8001762:	4807      	ldr	r0, [pc, #28]	@ (8001780 <MX_TIM3_Init+0x114>)
 8001764:	f005 fc7a 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800176e:	f000 fc5f 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001772:	4803      	ldr	r0, [pc, #12]	@ (8001780 <MX_TIM3_Init+0x114>)
 8001774:	f000 fff6 	bl	8002764 <HAL_TIM_MspPostInit>

}
 8001778:	bf00      	nop
 800177a:	3738      	adds	r7, #56	@ 0x38
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000354 	.word	0x20000354
 8001784:	40000400 	.word	0x40000400

08001788 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800178e:	1d3b      	adds	r3, r7, #4
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001798:	4b14      	ldr	r3, [pc, #80]	@ (80017ec <MX_TIM6_Init+0x64>)
 800179a:	4a15      	ldr	r2, [pc, #84]	@ (80017f0 <MX_TIM6_Init+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168;
 800179e:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017a0:	22a8      	movs	r2, #168	@ 0xa8
 80017a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 100;
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017ac:	2264      	movs	r2, #100	@ 0x64
 80017ae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80017b6:	480d      	ldr	r0, [pc, #52]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017b8:	f005 fa14 	bl	8006be4 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80017c2:	f000 fc35 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80017c6:	2320      	movs	r3, #32
 80017c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4806      	ldr	r0, [pc, #24]	@ (80017ec <MX_TIM6_Init+0x64>)
 80017d4:	f006 fb0c 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80017de:	f000 fc27 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200003a0 	.word	0x200003a0
 80017f0:	40001000 	.word	0x40001000

080017f4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b09c      	sub	sp, #112	@ 0x70
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001814:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001818:	2200      	movs	r2, #0
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	605a      	str	r2, [r3, #4]
 800181e:	609a      	str	r2, [r3, #8]
 8001820:	60da      	str	r2, [r3, #12]
 8001822:	611a      	str	r2, [r3, #16]
 8001824:	615a      	str	r2, [r3, #20]
 8001826:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2234      	movs	r2, #52	@ 0x34
 800182c:	2100      	movs	r1, #0
 800182e:	4618      	mov	r0, r3
 8001830:	f007 fa76 	bl	8008d20 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001834:	4b51      	ldr	r3, [pc, #324]	@ (800197c <MX_TIM8_Init+0x188>)
 8001836:	4a52      	ldr	r2, [pc, #328]	@ (8001980 <MX_TIM8_Init+0x18c>)
 8001838:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800183a:	4b50      	ldr	r3, [pc, #320]	@ (800197c <MX_TIM8_Init+0x188>)
 800183c:	2200      	movs	r2, #0
 800183e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b4e      	ldr	r3, [pc, #312]	@ (800197c <MX_TIM8_Init+0x188>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001846:	4b4d      	ldr	r3, [pc, #308]	@ (800197c <MX_TIM8_Init+0x188>)
 8001848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800184c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b4b      	ldr	r3, [pc, #300]	@ (800197c <MX_TIM8_Init+0x188>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001854:	4b49      	ldr	r3, [pc, #292]	@ (800197c <MX_TIM8_Init+0x188>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185a:	4b48      	ldr	r3, [pc, #288]	@ (800197c <MX_TIM8_Init+0x188>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001860:	4846      	ldr	r0, [pc, #280]	@ (800197c <MX_TIM8_Init+0x188>)
 8001862:	f005 f9bf 	bl	8006be4 <HAL_TIM_Base_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800186c:	f000 fbe0 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001870:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001874:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001876:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800187a:	4619      	mov	r1, r3
 800187c:	483f      	ldr	r0, [pc, #252]	@ (800197c <MX_TIM8_Init+0x188>)
 800187e:	f005 fd01 	bl	8007284 <HAL_TIM_ConfigClockSource>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001888:	f000 fbd2 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800188c:	483b      	ldr	r0, [pc, #236]	@ (800197c <MX_TIM8_Init+0x188>)
 800188e:	f005 fa71 	bl	8006d74 <HAL_TIM_PWM_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001898:	f000 fbca 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800189c:	2300      	movs	r3, #0
 800189e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018a0:	2300      	movs	r3, #0
 80018a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80018a8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018ac:	4619      	mov	r1, r3
 80018ae:	4833      	ldr	r0, [pc, #204]	@ (800197c <MX_TIM8_Init+0x188>)
 80018b0:	f006 fa9e 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80018ba:	f000 fbb9 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018be:	2360      	movs	r3, #96	@ 0x60
 80018c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018c6:	2300      	movs	r3, #0
 80018c8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018ca:	2300      	movs	r3, #0
 80018cc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018da:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4826      	ldr	r0, [pc, #152]	@ (800197c <MX_TIM8_Init+0x188>)
 80018e4:	f005 fbba 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 80018ee:	f000 fb9f 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80018f6:	2204      	movs	r2, #4
 80018f8:	4619      	mov	r1, r3
 80018fa:	4820      	ldr	r0, [pc, #128]	@ (800197c <MX_TIM8_Init+0x188>)
 80018fc:	f005 fbae 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_TIM8_Init+0x116>
  {
    Error_Handler();
 8001906:	f000 fb93 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800190a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800190e:	2208      	movs	r2, #8
 8001910:	4619      	mov	r1, r3
 8001912:	481a      	ldr	r0, [pc, #104]	@ (800197c <MX_TIM8_Init+0x188>)
 8001914:	f005 fba2 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM8_Init+0x12e>
  {
    Error_Handler();
 800191e:	f000 fb87 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001936:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800193a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001948:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	4807      	ldr	r0, [pc, #28]	@ (800197c <MX_TIM8_Init+0x188>)
 8001960:	f006 fadc 	bl	8007f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM8_Init+0x17a>
  {
    Error_Handler();
 800196a:	f000 fb61 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800196e:	4803      	ldr	r0, [pc, #12]	@ (800197c <MX_TIM8_Init+0x188>)
 8001970:	f000 fef8 	bl	8002764 <HAL_TIM_MspPostInit>

}
 8001974:	bf00      	nop
 8001976:	3770      	adds	r7, #112	@ 0x70
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	200003ec 	.word	0x200003ec
 8001980:	40013400 	.word	0x40013400

08001984 <MX_TIM20_Init>:
  * @brief TIM20 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM20_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b09c      	sub	sp, #112	@ 0x70
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM20_Init 0 */

  /* USER CODE END TIM20_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800198a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001998:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019a4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
 80019ae:	609a      	str	r2, [r3, #8]
 80019b0:	60da      	str	r2, [r3, #12]
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	615a      	str	r2, [r3, #20]
 80019b6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2234      	movs	r2, #52	@ 0x34
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f007 f9ae 	bl	8008d20 <memset>

  /* USER CODE BEGIN TIM20_Init 1 */

  /* USER CODE END TIM20_Init 1 */
  htim20.Instance = TIM20;
 80019c4:	4b51      	ldr	r3, [pc, #324]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019c6:	4a52      	ldr	r2, [pc, #328]	@ (8001b10 <MX_TIM20_Init+0x18c>)
 80019c8:	601a      	str	r2, [r3, #0]
  htim20.Init.Prescaler = 0;
 80019ca:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	605a      	str	r2, [r3, #4]
  htim20.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d0:	4b4e      	ldr	r3, [pc, #312]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	609a      	str	r2, [r3, #8]
  htim20.Init.Period = 65535;
 80019d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019dc:	60da      	str	r2, [r3, #12]
  htim20.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019de:	4b4b      	ldr	r3, [pc, #300]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  htim20.Init.RepetitionCounter = 0;
 80019e4:	4b49      	ldr	r3, [pc, #292]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  htim20.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ea:	4b48      	ldr	r3, [pc, #288]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim20) != HAL_OK)
 80019f0:	4846      	ldr	r0, [pc, #280]	@ (8001b0c <MX_TIM20_Init+0x188>)
 80019f2:	f005 f8f7 	bl	8006be4 <HAL_TIM_Base_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_TIM20_Init+0x7c>
  {
    Error_Handler();
 80019fc:	f000 fb18 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a00:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a04:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim20, &sClockSourceConfig) != HAL_OK)
 8001a06:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	483f      	ldr	r0, [pc, #252]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001a0e:	f005 fc39 	bl	8007284 <HAL_TIM_ConfigClockSource>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM20_Init+0x98>
  {
    Error_Handler();
 8001a18:	f000 fb0a 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim20) != HAL_OK)
 8001a1c:	483b      	ldr	r0, [pc, #236]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001a1e:	f005 f9a9 	bl	8006d74 <HAL_TIM_PWM_Init>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM20_Init+0xa8>
  {
    Error_Handler();
 8001a28:	f000 fb02 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim20, &sMasterConfig) != HAL_OK)
 8001a38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4833      	ldr	r0, [pc, #204]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001a40:	f006 f9d6 	bl	8007df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM20_Init+0xca>
  {
    Error_Handler();
 8001a4a:	f000 faf1 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	@ 0x60
 8001a50:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a6e:	2200      	movs	r2, #0
 8001a70:	4619      	mov	r1, r3
 8001a72:	4826      	ldr	r0, [pc, #152]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001a74:	f005 faf2 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM20_Init+0xfe>
  {
    Error_Handler();
 8001a7e:	f000 fad7 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a82:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a86:	2204      	movs	r2, #4
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4820      	ldr	r0, [pc, #128]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001a8c:	f005 fae6 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM20_Init+0x116>
  {
    Error_Handler();
 8001a96:	f000 facb 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim20, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a9a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	481a      	ldr	r0, [pc, #104]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001aa4:	f005 fada 	bl	800705c <HAL_TIM_PWM_ConfigChannel>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM20_Init+0x12e>
  {
    Error_Handler();
 8001aae:	f000 fabf 	bl	8002030 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aca:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ad8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim20, &sBreakDeadTimeConfig) != HAL_OK)
 8001aea:	1d3b      	adds	r3, r7, #4
 8001aec:	4619      	mov	r1, r3
 8001aee:	4807      	ldr	r0, [pc, #28]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001af0:	f006 fa14 	bl	8007f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM20_Init+0x17a>
  {
    Error_Handler();
 8001afa:	f000 fa99 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM20_Init 2 */

  /* USER CODE END TIM20_Init 2 */
  HAL_TIM_MspPostInit(&htim20);
 8001afe:	4803      	ldr	r0, [pc, #12]	@ (8001b0c <MX_TIM20_Init+0x188>)
 8001b00:	f000 fe30 	bl	8002764 <HAL_TIM_MspPostInit>

}
 8001b04:	bf00      	nop
 8001b06:	3770      	adds	r7, #112	@ 0x70
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000438 	.word	0x20000438
 8001b10:	40015000 	.word	0x40015000

08001b14 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b18:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b1a:	4a23      	ldr	r2, [pc, #140]	@ (8001ba8 <MX_UART4_Init+0x94>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b1e:	4b21      	ldr	r3, [pc, #132]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b19      	ldr	r3, [pc, #100]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b17      	ldr	r3, [pc, #92]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b4a:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b50:	4b14      	ldr	r3, [pc, #80]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b56:	4b13      	ldr	r3, [pc, #76]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b5c:	4811      	ldr	r0, [pc, #68]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b5e:	f006 fa71 	bl	8008044 <HAL_UART_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001b68:	f000 fa62 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	480d      	ldr	r0, [pc, #52]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b70:	f007 f80c 	bl	8008b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001b7a:	f000 fa59 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4808      	ldr	r0, [pc, #32]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b82:	f007 f841 	bl	8008c08 <HAL_UARTEx_SetRxFifoThreshold>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b8c:	f000 fa50 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	@ (8001ba4 <MX_UART4_Init+0x90>)
 8001b92:	f006 ffc2 	bl	8008b1a <HAL_UARTEx_DisableFifoMode>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b9c:	f000 fa48 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000484 	.word	0x20000484
 8001ba8:	40004c00 	.word	0x40004c00

08001bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bb0:	4b22      	ldr	r3, [pc, #136]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bb2:	4a23      	ldr	r2, [pc, #140]	@ (8001c40 <MX_USART1_UART_Init+0x94>)
 8001bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bb6:	4b21      	ldr	r3, [pc, #132]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bc4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bdc:	4b17      	ldr	r3, [pc, #92]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be2:	4b16      	ldr	r3, [pc, #88]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001be8:	4b14      	ldr	r3, [pc, #80]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bee:	4b13      	ldr	r3, [pc, #76]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bf4:	4811      	ldr	r0, [pc, #68]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001bf6:	f006 fa25 	bl	8008044 <HAL_UART_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c00:	f000 fa16 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c04:	2100      	movs	r1, #0
 8001c06:	480d      	ldr	r0, [pc, #52]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001c08:	f006 ffc0 	bl	8008b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c12:	f000 fa0d 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c16:	2100      	movs	r1, #0
 8001c18:	4808      	ldr	r0, [pc, #32]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001c1a:	f006 fff5 	bl	8008c08 <HAL_UARTEx_SetRxFifoThreshold>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c24:	f000 fa04 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001c28:	4804      	ldr	r0, [pc, #16]	@ (8001c3c <MX_USART1_UART_Init+0x90>)
 8001c2a:	f006 ff76 	bl	8008b1a <HAL_UARTEx_DisableFifoMode>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c34:	f000 f9fc 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c38:	bf00      	nop
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000518 	.word	0x20000518
 8001c40:	40013800 	.word	0x40013800

08001c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c48:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c4a:	4a23      	ldr	r2, [pc, #140]	@ (8001cd8 <MX_USART2_UART_Init+0x94>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c62:	4b1c      	ldr	r3, [pc, #112]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c68:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c6e:	4b19      	ldr	r3, [pc, #100]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c74:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7a:	4b16      	ldr	r3, [pc, #88]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c80:	4b14      	ldr	r3, [pc, #80]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c86:	4b13      	ldr	r3, [pc, #76]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c8c:	4811      	ldr	r0, [pc, #68]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001c8e:	f006 f9d9 	bl	8008044 <HAL_UART_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001c98:	f000 f9ca 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	480d      	ldr	r0, [pc, #52]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001ca0:	f006 ff74 	bl	8008b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001caa:	f000 f9c1 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4808      	ldr	r0, [pc, #32]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001cb2:	f006 ffa9 	bl	8008c08 <HAL_UARTEx_SetRxFifoThreshold>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cbc:	f000 f9b8 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001cc0:	4804      	ldr	r0, [pc, #16]	@ (8001cd4 <MX_USART2_UART_Init+0x90>)
 8001cc2:	f006 ff2a 	bl	8008b1a <HAL_UARTEx_DisableFifoMode>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ccc:	f000 f9b0 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cd0:	bf00      	nop
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	200005ac 	.word	0x200005ac
 8001cd8:	40004400 	.word	0x40004400

08001cdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ce0:	4b22      	ldr	r3, [pc, #136]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001ce2:	4a23      	ldr	r2, [pc, #140]	@ (8001d70 <MX_USART3_UART_Init+0x94>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001ce6:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d18:	4b14      	ldr	r3, [pc, #80]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d1e:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d24:	4811      	ldr	r0, [pc, #68]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d26:	f006 f98d 	bl	8008044 <HAL_UART_Init>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001d30:	f000 f97e 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d34:	2100      	movs	r1, #0
 8001d36:	480d      	ldr	r0, [pc, #52]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d38:	f006 ff28 	bl	8008b8c <HAL_UARTEx_SetTxFifoThreshold>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001d42:	f000 f975 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d46:	2100      	movs	r1, #0
 8001d48:	4808      	ldr	r0, [pc, #32]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d4a:	f006 ff5d 	bl	8008c08 <HAL_UARTEx_SetRxFifoThreshold>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001d54:	f000 f96c 	bl	8002030 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001d58:	4804      	ldr	r0, [pc, #16]	@ (8001d6c <MX_USART3_UART_Init+0x90>)
 8001d5a:	f006 fede 	bl	8008b1a <HAL_UARTEx_DisableFifoMode>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001d64:	f000 f964 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000640 	.word	0x20000640
 8001d70:	40004800 	.word	0x40004800

08001d74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08c      	sub	sp, #48	@ 0x30
 8001d78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7a:	f107 031c 	add.w	r3, r7, #28
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d8a:	4b2c      	ldr	r3, [pc, #176]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d8e:	4a2b      	ldr	r2, [pc, #172]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001d90:	f043 0310 	orr.w	r3, r3, #16
 8001d94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d96:	4b29      	ldr	r3, [pc, #164]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d9a:	f003 0310 	and.w	r3, r3, #16
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001da2:	4b26      	ldr	r3, [pc, #152]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001da6:	4a25      	ldr	r2, [pc, #148]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dae:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dba:	4b20      	ldr	r3, [pc, #128]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dbe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dd6:	4a19      	ldr	r2, [pc, #100]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001dde:	4b17      	ldr	r3, [pc, #92]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60fb      	str	r3, [r7, #12]
 8001de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001dec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dee:	4a13      	ldr	r2, [pc, #76]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001df0:	f043 0304 	orr.w	r3, r3, #4
 8001df4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df6:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dfa:	f003 0304 	and.w	r3, r3, #4
 8001dfe:	60bb      	str	r3, [r7, #8]
 8001e00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e06:	4a0d      	ldr	r2, [pc, #52]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001e08:	f043 0320 	orr.w	r3, r3, #32
 8001e0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <MX_GPIO_Init+0xc8>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e12:	f003 0320 	and.w	r3, r3, #32
 8001e16:	607b      	str	r3, [r7, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : BOOT0_SENSE_Pin */
  GPIO_InitStruct.Pin = BOOT0_SENSE_Pin;
 8001e1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT0_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4804      	ldr	r0, [pc, #16]	@ (8001e40 <MX_GPIO_Init+0xcc>)
 8001e30:	f003 fbe0 	bl	80055f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e34:	bf00      	nop
 8001e36:	3730      	adds	r7, #48	@ 0x30
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	00000000 	.word	0x00000000

08001e48 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc3) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a61      	ldr	r2, [pc, #388]	@ (8001fd8 <HAL_ADC_ConvCpltCallback+0x190>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	f040 80b8 	bne.w	8001fca <HAL_ADC_ConvCpltCallback+0x182>
		EA_SENSE_1 = HAL_ADC_GetValue(hadc);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f001 ff4e 	bl	8003cfc <HAL_ADC_GetValue>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a5e      	ldr	r2, [pc, #376]	@ (8001fdc <HAL_ADC_ConvCpltCallback+0x194>)
 8001e64:	6013      	str	r3, [r2, #0]
		coil_current_1 = (float) EA_SENSE_1 / 65535.0f * 3.0f / 0.12f;
 8001e66:	4b5d      	ldr	r3, [pc, #372]	@ (8001fdc <HAL_ADC_ConvCpltCallback+0x194>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	ee07 3a90 	vmov	s15, r3
 8001e6e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e72:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 8001fe0 <HAL_ADC_ConvCpltCallback+0x198>
 8001e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e7a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001e7e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e82:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8001fe4 <HAL_ADC_ConvCpltCallback+0x19c>
 8001e86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e8a:	4b57      	ldr	r3, [pc, #348]	@ (8001fe8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001e8c:	edc3 7a00 	vstr	s15, [r3]
		if (current_setpoint > 3 || coil_current_1 > 3.2) {
 8001e90:	4b56      	ldr	r3, [pc, #344]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001e92:	edd3 7a00 	vldr	s15, [r3]
 8001e96:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	dc0c      	bgt.n	8001ebe <HAL_ADC_ConvCpltCallback+0x76>
 8001ea4:	4b50      	ldr	r3, [pc, #320]	@ (8001fe8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fc43 	bl	8000734 <__aeabi_f2d>
 8001eae:	a348      	add	r3, pc, #288	@ (adr r3, 8001fd0 <HAL_ADC_ConvCpltCallback+0x188>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fd14 	bl	80008e0 <__aeabi_dcmpgt>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_ADC_ConvCpltCallback+0x86>
			TIM1->CCR1 = 0;
 8001ebe:	4b4c      	ldr	r3, [pc, #304]	@ (8001ff0 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34
			current_setpoint = 0;
 8001ec4:	4b49      	ldr	r3, [pc, #292]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
			return;
 8001ecc:	e07d      	b.n	8001fca <HAL_ADC_ConvCpltCallback+0x182>
		}
		pid_error = current_setpoint - coil_current_1;
 8001ece:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <HAL_ADC_ConvCpltCallback+0x1a4>)
 8001ed0:	ed93 7a00 	vldr	s14, [r3]
 8001ed4:	4b44      	ldr	r3, [pc, #272]	@ (8001fe8 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ede:	4b45      	ldr	r3, [pc, #276]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001ee0:	edc3 7a00 	vstr	s15, [r3]
		pid_error_integral += pid_error;
 8001ee4:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001ee6:	ed93 7a00 	vldr	s14, [r3]
 8001eea:	4b42      	ldr	r3, [pc, #264]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001eec:	edd3 7a00 	vldr	s15, [r3]
 8001ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef4:	4b40      	ldr	r3, [pc, #256]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
		// clamp integral to +- 10
		if (pid_error_integral > PID_I_CLAMP) {
 8001efa:	4b3f      	ldr	r3, [pc, #252]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8001ffc <HAL_ADC_ConvCpltCallback+0x1b4>
 8001f04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f0c:	dd03      	ble.n	8001f16 <HAL_ADC_ConvCpltCallback+0xce>
			pid_error_integral = PID_I_CLAMP;
 8001f0e:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001f10:	4a3b      	ldr	r2, [pc, #236]	@ (8002000 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	e00c      	b.n	8001f30 <HAL_ADC_ConvCpltCallback+0xe8>
		} else if (pid_error_integral < -PID_I_CLAMP) {
 8001f16:	4b38      	ldr	r3, [pc, #224]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001f18:	edd3 7a00 	vldr	s15, [r3]
 8001f1c:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8002004 <HAL_ADC_ConvCpltCallback+0x1bc>
 8001f20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f28:	d502      	bpl.n	8001f30 <HAL_ADC_ConvCpltCallback+0xe8>
			pid_error_integral = -PID_I_CLAMP;
 8001f2a:	4b33      	ldr	r3, [pc, #204]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001f2c:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001f2e:	601a      	str	r2, [r3, #0]
		}
		pid_pwm_change = Kp * pid_error + Ki * pid_error_integral;
 8001f30:	4b36      	ldr	r3, [pc, #216]	@ (800200c <HAL_ADC_ConvCpltCallback+0x1c4>)
 8001f32:	ed93 7a00 	vldr	s14, [r3]
 8001f36:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff4 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f40:	4b33      	ldr	r3, [pc, #204]	@ (8002010 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001f42:	edd3 6a00 	vldr	s13, [r3]
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <HAL_ADC_ConvCpltCallback+0x1b0>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f54:	4b2f      	ldr	r3, [pc, #188]	@ (8002014 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001f56:	edc3 7a00 	vstr	s15, [r3]
		pid_pwm_output += pid_pwm_change;
 8001f5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f5c:	ed93 7a00 	vldr	s14, [r3]
 8001f60:	4b2c      	ldr	r3, [pc, #176]	@ (8002014 <HAL_ADC_ConvCpltCallback+0x1cc>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6a:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
		if (pid_pwm_output >= 0.98f) {
 8001f70:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f72:	edd3 7a00 	vldr	s15, [r3]
 8001f76:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800201c <HAL_ADC_ConvCpltCallback+0x1d4>
 8001f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f82:	db03      	blt.n	8001f8c <HAL_ADC_ConvCpltCallback+0x144>
			pid_pwm_output = 0.98f;
 8001f84:	4b24      	ldr	r3, [pc, #144]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f86:	4a26      	ldr	r2, [pc, #152]	@ (8002020 <HAL_ADC_ConvCpltCallback+0x1d8>)
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	e00b      	b.n	8001fa4 <HAL_ADC_ConvCpltCallback+0x15c>
		} else if (pid_pwm_output < 0.0f) {
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f8e:	edd3 7a00 	vldr	s15, [r3]
 8001f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f9a:	d503      	bpl.n	8001fa4 <HAL_ADC_ConvCpltCallback+0x15c>
			pid_pwm_output = 0.0f;
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
		}
		coil_pwm_ccr_1 = pid_pwm_output * 1600.0f;
 8001fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <HAL_ADC_ConvCpltCallback+0x1d0>)
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8002024 <HAL_ADC_ConvCpltCallback+0x1dc>
 8001fae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fb6:	ee17 3a90 	vmov	r3, s15
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8002028 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001fbe:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, coil_pwm_ccr_1);
 8001fc0:	4b19      	ldr	r3, [pc, #100]	@ (8002028 <HAL_ADC_ConvCpltCallback+0x1e0>)
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	4b19      	ldr	r3, [pc, #100]	@ (800202c <HAL_ADC_ConvCpltCallback+0x1e4>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	635a      	str	r2, [r3, #52]	@ 0x34
	}
}
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	9999999a 	.word	0x9999999a
 8001fd4:	40099999 	.word	0x40099999
 8001fd8:	2000010c 	.word	0x2000010c
 8001fdc:	200006e4 	.word	0x200006e4
 8001fe0:	477fff00 	.word	0x477fff00
 8001fe4:	3df5c28f 	.word	0x3df5c28f
 8001fe8:	200006f4 	.word	0x200006f4
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	40012c00 	.word	0x40012c00
 8001ff4:	200006fc 	.word	0x200006fc
 8001ff8:	20000700 	.word	0x20000700
 8001ffc:	3dcccccd 	.word	0x3dcccccd
 8002000:	3dcccccd 	.word	0x3dcccccd
 8002004:	bdcccccd 	.word	0xbdcccccd
 8002008:	bdcccccd 	.word	0xbdcccccd
 800200c:	20000004 	.word	0x20000004
 8002010:	20000008 	.word	0x20000008
 8002014:	20000704 	.word	0x20000704
 8002018:	20000708 	.word	0x20000708
 800201c:	3f7ae148 	.word	0x3f7ae148
 8002020:	3f7ae148 	.word	0x3f7ae148
 8002024:	44c80000 	.word	0x44c80000
 8002028:	200006f8 	.word	0x200006f8
 800202c:	20000308 	.word	0x20000308

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <Error_Handler+0x8>

0800203c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002042:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <HAL_MspInit+0x44>)
 8002044:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002046:	4a0e      	ldr	r2, [pc, #56]	@ (8002080 <HAL_MspInit+0x44>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6613      	str	r3, [r2, #96]	@ 0x60
 800204e:	4b0c      	ldr	r3, [pc, #48]	@ (8002080 <HAL_MspInit+0x44>)
 8002050:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <HAL_MspInit+0x44>)
 800205c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800205e:	4a08      	ldr	r2, [pc, #32]	@ (8002080 <HAL_MspInit+0x44>)
 8002060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002064:	6593      	str	r3, [r2, #88]	@ 0x58
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_MspInit+0x44>)
 8002068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800206e:	603b      	str	r3, [r7, #0]
 8002070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002072:	f003 fe2f 	bl	8005cd4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40021000 	.word	0x40021000

08002084 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b0ac      	sub	sp, #176	@ 0xb0
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800209c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020a0:	2254      	movs	r2, #84	@ 0x54
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f006 fe3b 	bl	8008d20 <memset>
  if(hadc->Instance==ADC1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b2:	d15e      	bne.n	8002172 <HAL_ADC_MspInit+0xee>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020b4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80020ba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80020be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020c2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020c6:	4618      	mov	r0, r3
 80020c8:	f004 fb3e 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80020d2:	f7ff ffad 	bl	8002030 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	3301      	adds	r3, #1
 80020dc:	4a8c      	ldr	r2, [pc, #560]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80020de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020e0:	4b8b      	ldr	r3, [pc, #556]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d10b      	bne.n	8002100 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020e8:	4b8a      	ldr	r3, [pc, #552]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80020ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ec:	4a89      	ldr	r2, [pc, #548]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80020ee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80020f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f4:	4b87      	ldr	r3, [pc, #540]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80020f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020f8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80020fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002100:	4b84      	ldr	r3, [pc, #528]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002104:	4a83      	ldr	r2, [pc, #524]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210c:	4b81      	ldr	r3, [pc, #516]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 800210e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	643b      	str	r3, [r7, #64]	@ 0x40
 8002116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002118:	4b7e      	ldr	r3, [pc, #504]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 800211a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211c:	4a7d      	ldr	r2, [pc, #500]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 800211e:	f043 0302 	orr.w	r3, r3, #2
 8002122:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002124:	4b7b      	ldr	r3, [pc, #492]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002128:	f003 0302 	and.w	r3, r3, #2
 800212c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800212e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = VS_HV_Pin|VS_12_Pin;
 8002130:	230c      	movs	r3, #12
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002136:	2303      	movs	r3, #3
 8002138:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002142:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002146:	4619      	mov	r1, r3
 8002148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800214c:	f003 fa52 	bl	80055f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VS_5_Pin;
 8002150:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002154:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002158:	2303      	movs	r3, #3
 800215a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(VS_5_GPIO_Port, &GPIO_InitStruct);
 8002164:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002168:	4619      	mov	r1, r3
 800216a:	486b      	ldr	r0, [pc, #428]	@ (8002318 <HAL_ADC_MspInit+0x294>)
 800216c:	f003 fa42 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC5_MspInit 1 */

  /* USER CODE END ADC5_MspInit 1 */
  }

}
 8002170:	e1a5      	b.n	80024be <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC2)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a69      	ldr	r2, [pc, #420]	@ (800231c <HAL_ADC_MspInit+0x298>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d15d      	bne.n	8002238 <HAL_ADC_MspInit+0x1b4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800217c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002180:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002182:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8002186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800218a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800218e:	4618      	mov	r0, r3
 8002190:	f004 fada 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 800219a:	f7ff ff49 	bl	8002030 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800219e:	4b5c      	ldr	r3, [pc, #368]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	3301      	adds	r3, #1
 80021a4:	4a5a      	ldr	r2, [pc, #360]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80021a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_ADC_MspInit+0x28c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d10b      	bne.n	80021c8 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021b0:	4b58      	ldr	r3, [pc, #352]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021b4:	4a57      	ldr	r2, [pc, #348]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021bc:	4b55      	ldr	r3, [pc, #340]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	4b52      	ldr	r3, [pc, #328]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021cc:	4a51      	ldr	r2, [pc, #324]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021ce:	f043 0304 	orr.w	r3, r3, #4
 80021d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021d8:	f003 0304 	and.w	r3, r3, #4
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80021de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021ec:	4b49      	ldr	r3, [pc, #292]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80021ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f0:	f003 0301 	and.w	r3, r3, #1
 80021f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = TEMP8_Pin|TEMP6_Pin|TEMP7_Pin|TEMP9_Pin
 80021f8:	231f      	movs	r3, #31
 80021fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fe:	2303      	movs	r3, #3
 8002200:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800220e:	4619      	mov	r1, r3
 8002210:	4843      	ldr	r0, [pc, #268]	@ (8002320 <HAL_ADC_MspInit+0x29c>)
 8002212:	f003 f9ef 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TEMP2_Pin|TEMP1_Pin|TEMP3_Pin|TEMP4_Pin;
 8002216:	23c3      	movs	r3, #195	@ 0xc3
 8002218:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221c:	2303      	movs	r3, #3
 800221e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002222:	2300      	movs	r3, #0
 8002224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002228:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800222c:	4619      	mov	r1, r3
 800222e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002232:	f003 f9df 	bl	80055f4 <HAL_GPIO_Init>
}
 8002236:	e142      	b.n	80024be <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC3)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a39      	ldr	r2, [pc, #228]	@ (8002324 <HAL_ADC_MspInit+0x2a0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d176      	bne.n	8002330 <HAL_ADC_MspInit+0x2ac>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002242:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002246:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002248:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800224c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002250:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002254:	4618      	mov	r0, r3
 8002256:	f004 fa77 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <HAL_ADC_MspInit+0x1e0>
      Error_Handler();
 8002260:	f7ff fee6 	bl	8002030 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002264:	4b30      	ldr	r3, [pc, #192]	@ (8002328 <HAL_ADC_MspInit+0x2a4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	4a2f      	ldr	r2, [pc, #188]	@ (8002328 <HAL_ADC_MspInit+0x2a4>)
 800226c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800226e:	4b2e      	ldr	r3, [pc, #184]	@ (8002328 <HAL_ADC_MspInit+0x2a4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d10b      	bne.n	800228e <HAL_ADC_MspInit+0x20a>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002276:	4b27      	ldr	r3, [pc, #156]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800227a:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002280:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002282:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800228c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800228e:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002292:	4a20      	ldr	r2, [pc, #128]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 8002294:	f043 0310 	orr.w	r3, r3, #16
 8002298:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800229a:	4b1e      	ldr	r3, [pc, #120]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 800229c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800229e:	f003 0310 	and.w	r3, r3, #16
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80022ac:	f043 0302 	orr.w	r3, r3, #2
 80022b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b2:	4b18      	ldr	r3, [pc, #96]	@ (8002314 <HAL_ADC_MspInit+0x290>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80022bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pin = EA2_Pin|EA3_Pin;
 80022be:	f44f 5308 	mov.w	r3, #8704	@ 0x2200
 80022c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022c6:	2303      	movs	r3, #3
 80022c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022cc:	2300      	movs	r3, #0
 80022ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022d2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022d6:	4619      	mov	r1, r3
 80022d8:	4814      	ldr	r0, [pc, #80]	@ (800232c <HAL_ADC_MspInit+0x2a8>)
 80022da:	f003 f98b 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA1_Pin;
 80022de:	2302      	movs	r3, #2
 80022e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022e4:	2303      	movs	r3, #3
 80022e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA1_GPIO_Port, &GPIO_InitStruct);
 80022f0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80022f4:	4619      	mov	r1, r3
 80022f6:	4808      	ldr	r0, [pc, #32]	@ (8002318 <HAL_ADC_MspInit+0x294>)
 80022f8:	f003 f97c 	bl	80055f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80022fc:	2200      	movs	r2, #0
 80022fe:	2100      	movs	r1, #0
 8002300:	202f      	movs	r0, #47	@ 0x2f
 8002302:	f002 ff7c 	bl	80051fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8002306:	202f      	movs	r0, #47	@ 0x2f
 8002308:	f002 ff93 	bl	8005232 <HAL_NVIC_EnableIRQ>
}
 800230c:	e0d7      	b.n	80024be <HAL_ADC_MspInit+0x43a>
 800230e:	bf00      	nop
 8002310:	2000070c 	.word	0x2000070c
 8002314:	40021000 	.word	0x40021000
 8002318:	48000400 	.word	0x48000400
 800231c:	50000100 	.word	0x50000100
 8002320:	48000800 	.word	0x48000800
 8002324:	50000400 	.word	0x50000400
 8002328:	20000710 	.word	0x20000710
 800232c:	48001000 	.word	0x48001000
  else if(hadc->Instance==ADC4)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a64      	ldr	r2, [pc, #400]	@ (80024c8 <HAL_ADC_MspInit+0x444>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d15e      	bne.n	80023f8 <HAL_ADC_MspInit+0x374>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 800233a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002340:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002344:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002348:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800234c:	4618      	mov	r0, r3
 800234e:	f004 f9fb 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_ADC_MspInit+0x2d8>
      Error_Handler();
 8002358:	f7ff fe6a 	bl	8002030 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800235c:	4b5b      	ldr	r3, [pc, #364]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	3301      	adds	r3, #1
 8002362:	4a5a      	ldr	r2, [pc, #360]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 8002364:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8002366:	4b59      	ldr	r3, [pc, #356]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10b      	bne.n	8002386 <HAL_ADC_MspInit+0x302>
      __HAL_RCC_ADC345_CLK_ENABLE();
 800236e:	4b58      	ldr	r3, [pc, #352]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002372:	4a57      	ldr	r2, [pc, #348]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237a:	4b55      	ldr	r3, [pc, #340]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 800237c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002382:	623b      	str	r3, [r7, #32]
 8002384:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002386:	4b52      	ldr	r3, [pc, #328]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238a:	4a51      	ldr	r2, [pc, #324]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 800238c:	f043 0310 	orr.w	r3, r3, #16
 8002390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002392:	4b4f      	ldr	r3, [pc, #316]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002396:	f003 0310 	and.w	r3, r3, #16
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b4c      	ldr	r3, [pc, #304]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a2:	4a4b      	ldr	r2, [pc, #300]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80023aa:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = EA5_Pin|EA4_Pin;
 80023b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80023ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023be:	2303      	movs	r3, #3
 80023c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023ce:	4619      	mov	r1, r3
 80023d0:	4840      	ldr	r0, [pc, #256]	@ (80024d4 <HAL_ADC_MspInit+0x450>)
 80023d2:	f003 f90f 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA6_Pin;
 80023d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023de:	2303      	movs	r3, #3
 80023e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e4:	2300      	movs	r3, #0
 80023e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA6_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023ee:	4619      	mov	r1, r3
 80023f0:	4839      	ldr	r0, [pc, #228]	@ (80024d8 <HAL_ADC_MspInit+0x454>)
 80023f2:	f003 f8ff 	bl	80055f4 <HAL_GPIO_Init>
}
 80023f6:	e062      	b.n	80024be <HAL_ADC_MspInit+0x43a>
  else if(hadc->Instance==ADC5)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a37      	ldr	r2, [pc, #220]	@ (80024dc <HAL_ADC_MspInit+0x458>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d15d      	bne.n	80024be <HAL_ADC_MspInit+0x43a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002402:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002408:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800240c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002410:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f997 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <HAL_ADC_MspInit+0x3a0>
      Error_Handler();
 8002420:	f7ff fe06 	bl	8002030 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002424:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a28      	ldr	r2, [pc, #160]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 800242c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800242e:	4b27      	ldr	r3, [pc, #156]	@ (80024cc <HAL_ADC_MspInit+0x448>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10b      	bne.n	800244e <HAL_ADC_MspInit+0x3ca>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002436:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002438:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243a:	4a25      	ldr	r2, [pc, #148]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 800243c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002440:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002442:	4b23      	ldr	r3, [pc, #140]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002444:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002446:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244e:	4b20      	ldr	r3, [pc, #128]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002450:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002452:	4a1f      	ldr	r2, [pc, #124]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800245a:	4b1d      	ldr	r3, [pc, #116]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 800245c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245e:	f003 0308 	and.w	r3, r3, #8
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002466:	4b1a      	ldr	r3, [pc, #104]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246a:	4a19      	ldr	r2, [pc, #100]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 800246c:	f043 0310 	orr.w	r3, r3, #16
 8002470:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002472:	4b17      	ldr	r3, [pc, #92]	@ (80024d0 <HAL_ADC_MspInit+0x44c>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002476:	f003 0310 	and.w	r3, r3, #16
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EA8_Pin|EA9_Pin;
 800247e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002482:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002486:	2303      	movs	r3, #3
 8002488:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002492:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002496:	4619      	mov	r1, r3
 8002498:	4811      	ldr	r0, [pc, #68]	@ (80024e0 <HAL_ADC_MspInit+0x45c>)
 800249a:	f003 f8ab 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = EA7_Pin;
 800249e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024a6:	2303      	movs	r3, #3
 80024a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(EA7_GPIO_Port, &GPIO_InitStruct);
 80024b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80024b6:	4619      	mov	r1, r3
 80024b8:	4806      	ldr	r0, [pc, #24]	@ (80024d4 <HAL_ADC_MspInit+0x450>)
 80024ba:	f003 f89b 	bl	80055f4 <HAL_GPIO_Init>
}
 80024be:	bf00      	nop
 80024c0:	37b0      	adds	r7, #176	@ 0xb0
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	50000500 	.word	0x50000500
 80024cc:	20000710 	.word	0x20000710
 80024d0:	40021000 	.word	0x40021000
 80024d4:	48001000 	.word	0x48001000
 80024d8:	48000400 	.word	0x48000400
 80024dc:	50000600 	.word	0x50000600
 80024e0:	48000c00 	.word	0x48000c00

080024e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b09e      	sub	sp, #120	@ 0x78
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]
 80024f8:	60da      	str	r2, [r3, #12]
 80024fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	2254      	movs	r2, #84	@ 0x54
 8002502:	2100      	movs	r1, #0
 8002504:	4618      	mov	r0, r3
 8002506:	f006 fc0b 	bl	8008d20 <memset>
  if(hfdcan->Instance==FDCAN1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1f      	ldr	r2, [pc, #124]	@ (800258c <HAL_FDCAN_MspInit+0xa8>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d137      	bne.n	8002584 <HAL_FDCAN_MspInit+0xa0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002514:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002518:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800251a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800251e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002520:	f107 0310 	add.w	r3, r7, #16
 8002524:	4618      	mov	r0, r3
 8002526:	f004 f90f 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002530:	f7ff fd7e 	bl	8002030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002534:	4b16      	ldr	r3, [pc, #88]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 8002536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002538:	4a15      	ldr	r2, [pc, #84]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 800253a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800253e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002540:	4b13      	ldr	r3, [pc, #76]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 8002542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002544:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800254c:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 800254e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002550:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 8002552:	f043 0308 	orr.w	r3, r3, #8
 8002556:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002558:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <HAL_FDCAN_MspInit+0xac>)
 800255a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800255c:	f003 0308 	and.w	r3, r3, #8
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD1     ------> FDCAN1_TX
    PD0     ------> FDCAN1_RX
    */
    GPIO_InitStruct.Pin = CAN_TX_Pin|CAN_RX_Pin;
 8002564:	2303      	movs	r3, #3
 8002566:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002568:	2302      	movs	r3, #2
 800256a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256c:	2300      	movs	r3, #0
 800256e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	2300      	movs	r3, #0
 8002572:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002574:	2309      	movs	r3, #9
 8002576:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002578:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800257c:	4619      	mov	r1, r3
 800257e:	4805      	ldr	r0, [pc, #20]	@ (8002594 <HAL_FDCAN_MspInit+0xb0>)
 8002580:	f003 f838 	bl	80055f4 <HAL_GPIO_Init>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8002584:	bf00      	nop
 8002586:	3778      	adds	r7, #120	@ 0x78
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40006400 	.word	0x40006400
 8002590:	40021000 	.word	0x40021000
 8002594:	48000c00 	.word	0x48000c00

08002598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a0      	sub	sp, #128	@ 0x80
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	2254      	movs	r2, #84	@ 0x54
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f006 fbb1 	bl	8008d20 <memset>
  if(hi2c->Instance==I2C1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002678 <HAL_I2C_MspInit+0xe0>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d153      	bne.n	8002670 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025c8:	2340      	movs	r3, #64	@ 0x40
 80025ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f004 f8b7 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025e0:	f7ff fd26 	bl	8002030 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 80025e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025e8:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 80025f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b1f      	ldr	r3, [pc, #124]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002600:	4a1e      	ldr	r2, [pc, #120]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002608:	4b1c      	ldr	r3, [pc, #112]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PA15     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C_SDA_Pin;
 8002614:	2380      	movs	r3, #128	@ 0x80
 8002616:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002618:	2312      	movs	r3, #18
 800261a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002624:	2304      	movs	r3, #4
 8002626:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(I2C_SDA_GPIO_Port, &GPIO_InitStruct);
 8002628:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800262c:	4619      	mov	r1, r3
 800262e:	4814      	ldr	r0, [pc, #80]	@ (8002680 <HAL_I2C_MspInit+0xe8>)
 8002630:	f002 ffe0 	bl	80055f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002634:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002638:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800263a:	2312      	movs	r3, #18
 800263c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002642:	2300      	movs	r3, #0
 8002644:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002646:	2304      	movs	r3, #4
 8002648:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800264a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800264e:	4619      	mov	r1, r3
 8002650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002654:	f002 ffce 	bl	80055f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265c:	4a07      	ldr	r2, [pc, #28]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 800265e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002662:	6593      	str	r3, [r2, #88]	@ 0x58
 8002664:	4b05      	ldr	r3, [pc, #20]	@ (800267c <HAL_I2C_MspInit+0xe4>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002668:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002670:	bf00      	nop
 8002672:	3780      	adds	r7, #128	@ 0x80
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40005400 	.word	0x40005400
 800267c:	40021000 	.word	0x40021000
 8002680:	48000400 	.word	0x48000400

08002684 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a2e      	ldr	r2, [pc, #184]	@ (800274c <HAL_TIM_Base_MspInit+0xc8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10c      	bne.n	80026b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002696:	4b2e      	ldr	r3, [pc, #184]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002698:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800269a:	4a2d      	ldr	r2, [pc, #180]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 800269c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80026a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM20_MspInit 1 */

  /* USER CODE END TIM20_MspInit 1 */
  }

}
 80026ae:	e046      	b.n	800273e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a27      	ldr	r2, [pc, #156]	@ (8002754 <HAL_TIM_Base_MspInit+0xd0>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d10c      	bne.n	80026d4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ba:	4b25      	ldr	r3, [pc, #148]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026be:	4a24      	ldr	r2, [pc, #144]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026c0:	f043 0302 	orr.w	r3, r3, #2
 80026c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ca:	f003 0302 	and.w	r3, r3, #2
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	69bb      	ldr	r3, [r7, #24]
}
 80026d2:	e034      	b.n	800273e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM6)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002758 <HAL_TIM_Base_MspInit+0xd4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d10c      	bne.n	80026f8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80026de:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026e4:	f043 0310 	orr.w	r3, r3, #16
 80026e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 80026ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026ee:	f003 0310 	and.w	r3, r3, #16
 80026f2:	617b      	str	r3, [r7, #20]
 80026f4:	697b      	ldr	r3, [r7, #20]
}
 80026f6:	e022      	b.n	800273e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a17      	ldr	r2, [pc, #92]	@ (800275c <HAL_TIM_Base_MspInit+0xd8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d10c      	bne.n	800271c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002702:	4b13      	ldr	r3, [pc, #76]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002708:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800270c:	6613      	str	r3, [r2, #96]	@ 0x60
 800270e:	4b10      	ldr	r3, [pc, #64]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002710:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]
}
 800271a:	e010      	b.n	800273e <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM20)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0f      	ldr	r2, [pc, #60]	@ (8002760 <HAL_TIM_Base_MspInit+0xdc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10b      	bne.n	800273e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM20_CLK_ENABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002730:	6613      	str	r3, [r2, #96]	@ 0x60
 8002732:	4b07      	ldr	r3, [pc, #28]	@ (8002750 <HAL_TIM_Base_MspInit+0xcc>)
 8002734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	@ 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40012c00 	.word	0x40012c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40000400 	.word	0x40000400
 8002758:	40001000 	.word	0x40001000
 800275c:	40013400 	.word	0x40013400
 8002760:	40015000 	.word	0x40015000

08002764 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	@ 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a78      	ldr	r2, [pc, #480]	@ (8002964 <HAL_TIM_MspPostInit+0x200>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d11e      	bne.n	80027c4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002786:	4b78      	ldr	r3, [pc, #480]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278a:	4a77      	ldr	r2, [pc, #476]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002792:	4b75      	ldr	r3, [pc, #468]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002794:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	623b      	str	r3, [r7, #32]
 800279c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GD3_Pin|GD2_Pin|GD1_Pin;
 800279e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80027a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a4:	2302      	movs	r3, #2
 80027a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ac:	2300      	movs	r3, #0
 80027ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027b0:	2306      	movs	r3, #6
 80027b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027b8:	4619      	mov	r1, r3
 80027ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027be:	f002 ff19 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM20_MspPostInit 1 */

  /* USER CODE END TIM20_MspPostInit 1 */
  }

}
 80027c2:	e0ca      	b.n	800295a <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM3)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a68      	ldr	r2, [pc, #416]	@ (800296c <HAL_TIM_MspPostInit+0x208>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d138      	bne.n	8002840 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ce:	4b66      	ldr	r3, [pc, #408]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027d2:	4a65      	ldr	r2, [pc, #404]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027da:	4b63      	ldr	r3, [pc, #396]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	61fb      	str	r3, [r7, #28]
 80027e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e6:	4b60      	ldr	r3, [pc, #384]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027ea:	4a5f      	ldr	r2, [pc, #380]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027f2:	4b5d      	ldr	r3, [pc, #372]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = IND_B_Pin;
 80027fe:	2310      	movs	r3, #16
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800280e:	2302      	movs	r3, #2
 8002810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(IND_B_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002816:	4619      	mov	r1, r3
 8002818:	4855      	ldr	r0, [pc, #340]	@ (8002970 <HAL_TIM_MspPostInit+0x20c>)
 800281a:	f002 feeb 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = IND_G_Pin|IND_R_Pin;
 800281e:	2330      	movs	r3, #48	@ 0x30
 8002820:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800282a:	2300      	movs	r3, #0
 800282c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800282e:	2302      	movs	r3, #2
 8002830:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002836:	4619      	mov	r1, r3
 8002838:	484e      	ldr	r0, [pc, #312]	@ (8002974 <HAL_TIM_MspPostInit+0x210>)
 800283a:	f002 fedb 	bl	80055f4 <HAL_GPIO_Init>
}
 800283e:	e08c      	b.n	800295a <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM8)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4c      	ldr	r2, [pc, #304]	@ (8002978 <HAL_TIM_MspPostInit+0x214>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d149      	bne.n	80028de <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284a:	4b47      	ldr	r3, [pc, #284]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 800284c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800284e:	4a46      	ldr	r2, [pc, #280]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002856:	4b44      	ldr	r3, [pc, #272]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002862:	4b41      	ldr	r3, [pc, #260]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002866:	4a40      	ldr	r2, [pc, #256]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002868:	f043 0304 	orr.w	r3, r3, #4
 800286c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800286e:	4b3e      	ldr	r3, [pc, #248]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002872:	f003 0304 	and.w	r3, r3, #4
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GD6_Pin;
 800287a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800287e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800288c:	230a      	movs	r3, #10
 800288e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD6_GPIO_Port, &GPIO_InitStruct);
 8002890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002894:	4619      	mov	r1, r3
 8002896:	4837      	ldr	r0, [pc, #220]	@ (8002974 <HAL_TIM_MspPostInit+0x210>)
 8002898:	f002 feac 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD4_Pin;
 800289c:	2340      	movs	r3, #64	@ 0x40
 800289e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80028ac:	2305      	movs	r3, #5
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD4_GPIO_Port, &GPIO_InitStruct);
 80028b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b4:	4619      	mov	r1, r3
 80028b6:	482f      	ldr	r0, [pc, #188]	@ (8002974 <HAL_TIM_MspPostInit+0x210>)
 80028b8:	f002 fe9c 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD5_Pin;
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80028cc:	2304      	movs	r3, #4
 80028ce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD5_GPIO_Port, &GPIO_InitStruct);
 80028d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028d4:	4619      	mov	r1, r3
 80028d6:	4829      	ldr	r0, [pc, #164]	@ (800297c <HAL_TIM_MspPostInit+0x218>)
 80028d8:	f002 fe8c 	bl	80055f4 <HAL_GPIO_Init>
}
 80028dc:	e03d      	b.n	800295a <HAL_TIM_MspPostInit+0x1f6>
  else if(htim->Instance==TIM20)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <HAL_TIM_MspPostInit+0x21c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d138      	bne.n	800295a <HAL_TIM_MspPostInit+0x1f6>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80028ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80028ee:	f043 0310 	orr.w	r3, r3, #16
 80028f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80028f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 80028f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028f8:	f003 0310 	and.w	r3, r3, #16
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002900:	4b19      	ldr	r3, [pc, #100]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	4a18      	ldr	r2, [pc, #96]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800290c:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_TIM_MspPostInit+0x204>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GD8_Pin|GD7_Pin;
 8002918:	230c      	movs	r3, #12
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291c:	2302      	movs	r3, #2
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002920:	2300      	movs	r3, #0
 8002922:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002924:	2300      	movs	r3, #0
 8002926:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 8002928:	2306      	movs	r3, #6
 800292a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800292c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002930:	4619      	mov	r1, r3
 8002932:	480f      	ldr	r0, [pc, #60]	@ (8002970 <HAL_TIM_MspPostInit+0x20c>)
 8002934:	f002 fe5e 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GD9_Pin;
 8002938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800293c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM20;
 800294a:	2306      	movs	r3, #6
 800294c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GD9_GPIO_Port, &GPIO_InitStruct);
 800294e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002952:	4619      	mov	r1, r3
 8002954:	4809      	ldr	r0, [pc, #36]	@ (800297c <HAL_TIM_MspPostInit+0x218>)
 8002956:	f002 fe4d 	bl	80055f4 <HAL_GPIO_Init>
}
 800295a:	bf00      	nop
 800295c:	3738      	adds	r7, #56	@ 0x38
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00
 8002968:	40021000 	.word	0x40021000
 800296c:	40000400 	.word	0x40000400
 8002970:	48001000 	.word	0x48001000
 8002974:	48000400 	.word	0x48000400
 8002978:	40013400 	.word	0x40013400
 800297c:	48000800 	.word	0x48000800
 8002980:	40015000 	.word	0x40015000

08002984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b0a6      	sub	sp, #152	@ 0x98
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800298c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
 8002996:	609a      	str	r2, [r3, #8]
 8002998:	60da      	str	r2, [r3, #12]
 800299a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800299c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029a0:	2254      	movs	r2, #84	@ 0x54
 80029a2:	2100      	movs	r1, #0
 80029a4:	4618      	mov	r0, r3
 80029a6:	f006 f9bb 	bl	8008d20 <memset>
  if(huart->Instance==UART4)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a94      	ldr	r2, [pc, #592]	@ (8002c00 <HAL_UART_MspInit+0x27c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d13c      	bne.n	8002a2e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80029b4:	2308      	movs	r3, #8
 80029b6:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80029b8:	2300      	movs	r3, #0
 80029ba:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fec1 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80029cc:	f7ff fb30 	bl	8002030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	4a8b      	ldr	r2, [pc, #556]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029d6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80029da:	6593      	str	r3, [r2, #88]	@ 0x58
 80029dc:	4b89      	ldr	r3, [pc, #548]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e8:	4b86      	ldr	r3, [pc, #536]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ec:	4a85      	ldr	r2, [pc, #532]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029f4:	4b83      	ldr	r3, [pc, #524]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 80029f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = RX_E_Pin|TX_E_Pin;
 8002a00:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a14:	2300      	movs	r3, #0
 8002a16:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8002a1a:	2305      	movs	r3, #5
 8002a1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a20:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002a24:	4619      	mov	r1, r3
 8002a26:	4878      	ldr	r0, [pc, #480]	@ (8002c08 <HAL_UART_MspInit+0x284>)
 8002a28:	f002 fde4 	bl	80055f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a2c:	e0e4      	b.n	8002bf8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a76      	ldr	r2, [pc, #472]	@ (8002c0c <HAL_UART_MspInit+0x288>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d13b      	bne.n	8002ab0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002a44:	4618      	mov	r0, r3
 8002a46:	f003 fe7f 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002a50:	f7ff faee 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a54:	4b6b      	ldr	r3, [pc, #428]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a58:	4a6a      	ldr	r2, [pc, #424]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a5e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a60:	4b68      	ldr	r3, [pc, #416]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a68:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a6c:	4b65      	ldr	r3, [pc, #404]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a70:	4a64      	ldr	r2, [pc, #400]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a78:	4b62      	ldr	r3, [pc, #392]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7c:	f003 0310 	and.w	r3, r3, #16
 8002a80:	623b      	str	r3, [r7, #32]
 8002a82:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = RX_W_Pin|TX_W_Pin;
 8002a84:	2303      	movs	r3, #3
 8002a86:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a96:	2300      	movs	r3, #0
 8002a98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a9c:	2307      	movs	r3, #7
 8002a9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002aa2:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4859      	ldr	r0, [pc, #356]	@ (8002c10 <HAL_UART_MspInit+0x28c>)
 8002aaa:	f002 fda3 	bl	80055f4 <HAL_GPIO_Init>
}
 8002aae:	e0a3      	b.n	8002bf8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a57      	ldr	r2, [pc, #348]	@ (8002c14 <HAL_UART_MspInit+0x290>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d13b      	bne.n	8002b32 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002aba:	2302      	movs	r3, #2
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ac2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fe3e 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002ad2:	f7ff faad 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ad6:	4b4b      	ldr	r3, [pc, #300]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ada:	4a4a      	ldr	r2, [pc, #296]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ae2:	4b48      	ldr	r3, [pc, #288]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aea:	61fb      	str	r3, [r7, #28]
 8002aec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aee:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af2:	4a44      	ldr	r2, [pc, #272]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002afa:	4b42      	ldr	r3, [pc, #264]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002afe:	f003 0308 	and.w	r3, r3, #8
 8002b02:	61bb      	str	r3, [r7, #24]
 8002b04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = RX_N_Pin|TX_N_Pin;
 8002b06:	2360      	movs	r3, #96	@ 0x60
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b1e:	2307      	movs	r3, #7
 8002b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b24:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002b28:	4619      	mov	r1, r3
 8002b2a:	483b      	ldr	r0, [pc, #236]	@ (8002c18 <HAL_UART_MspInit+0x294>)
 8002b2c:	f002 fd62 	bl	80055f4 <HAL_GPIO_Init>
}
 8002b30:	e062      	b.n	8002bf8 <HAL_UART_MspInit+0x274>
  else if(huart->Instance==USART3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a39      	ldr	r2, [pc, #228]	@ (8002c1c <HAL_UART_MspInit+0x298>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d15d      	bne.n	8002bf8 <HAL_UART_MspInit+0x274>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b3c:	2304      	movs	r3, #4
 8002b3e:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002b40:	2300      	movs	r3, #0
 8002b42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b44:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f003 fdfd 	bl	8006748 <HAL_RCCEx_PeriphCLKConfig>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002b54:	f7ff fa6c 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b58:	4b2a      	ldr	r3, [pc, #168]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5c:	4a29      	ldr	r2, [pc, #164]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b62:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b64:	4b27      	ldr	r3, [pc, #156]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6c:	617b      	str	r3, [r7, #20]
 8002b6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b70:	4b24      	ldr	r3, [pc, #144]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b74:	4a23      	ldr	r2, [pc, #140]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b76:	f043 0308 	orr.w	r3, r3, #8
 8002b7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b7c:	4b21      	ldr	r3, [pc, #132]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b88:	4b1e      	ldr	r3, [pc, #120]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b8e:	f043 0302 	orr.w	r3, r3, #2
 8002b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b94:	4b1b      	ldr	r3, [pc, #108]	@ (8002c04 <HAL_UART_MspInit+0x280>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RX_S_Pin;
 8002ba0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002bba:	2307      	movs	r3, #7
 8002bbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(RX_S_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4814      	ldr	r0, [pc, #80]	@ (8002c18 <HAL_UART_MspInit+0x294>)
 8002bc8:	f002 fd14 	bl	80055f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TX_S_Pin;
 8002bcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be0:	2300      	movs	r3, #0
 8002be2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002be6:	2307      	movs	r3, #7
 8002be8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    HAL_GPIO_Init(TX_S_GPIO_Port, &GPIO_InitStruct);
 8002bec:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480b      	ldr	r0, [pc, #44]	@ (8002c20 <HAL_UART_MspInit+0x29c>)
 8002bf4:	f002 fcfe 	bl	80055f4 <HAL_GPIO_Init>
}
 8002bf8:	bf00      	nop
 8002bfa:	3798      	adds	r7, #152	@ 0x98
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40004c00 	.word	0x40004c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	48000800 	.word	0x48000800
 8002c0c:	40013800 	.word	0x40013800
 8002c10:	48001000 	.word	0x48001000
 8002c14:	40004400 	.word	0x40004400
 8002c18:	48000c00 	.word	0x48000c00
 8002c1c:	40004800 	.word	0x40004800
 8002c20:	48000400 	.word	0x48000400

08002c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <NMI_Handler+0x4>

08002c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <HardFault_Handler+0x4>

08002c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <MemManage_Handler+0x4>

08002c3c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c40:	bf00      	nop
 8002c42:	e7fd      	b.n	8002c40 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	bf00      	nop
 8002c4a:	e7fd      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c7a:	f000 f89b 	bl	8002db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <ADC3_IRQHandler+0x10>)
 8002c8a:	f001 f845 	bl	8003d18 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	2000010c 	.word	0x2000010c

08002c98 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <SystemInit+0x20>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <SystemInit+0x20>)
 8002ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cbc:	480d      	ldr	r0, [pc, #52]	@ (8002cf4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002cc0:	f7ff ffea 	bl	8002c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002cc6:	490d      	ldr	r1, [pc, #52]	@ (8002cfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <LoopForever+0xe>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ccc:	e002      	b.n	8002cd4 <LoopCopyDataInit>

08002cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd2:	3304      	adds	r3, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd8:	d3f9      	bcc.n	8002cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cda:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d08 <LoopForever+0x16>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce0:	e001      	b.n	8002ce6 <LoopFillZerobss>

08002ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce4:	3204      	adds	r2, #4

08002ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce8:	d3fb      	bcc.n	8002ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cea:	f006 f821 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002cee:	f7fd ffcb 	bl	8000c88 <main>

08002cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8002cf2:	e7fe      	b.n	8002cf2 <LoopForever>
  ldr   r0, =_estack
 8002cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cfc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002d00:	08008de0 	.word	0x08008de0
  ldr r2, =_sbss
 8002d04:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002d08:	20000718 	.word	0x20000718

08002d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC1_2_IRQHandler>

08002d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b082      	sub	sp, #8
 8002d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d18:	2003      	movs	r0, #3
 8002d1a:	f002 fa65 	bl	80051e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d1e:	200f      	movs	r0, #15
 8002d20:	f000 f80e 	bl	8002d40 <HAL_InitTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d002      	beq.n	8002d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	71fb      	strb	r3, [r7, #7]
 8002d2e:	e001      	b.n	8002d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d30:	f7ff f984 	bl	800203c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d34:	79fb      	ldrb	r3, [r7, #7]

}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <HAL_InitTick+0x68>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d54:	4b15      	ldr	r3, [pc, #84]	@ (8002dac <HAL_InitTick+0x6c>)
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	4b13      	ldr	r3, [pc, #76]	@ (8002da8 <HAL_InitTick+0x68>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f002 fa70 	bl	800524e <HAL_SYSTICK_Config>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d10f      	bne.n	8002d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b0f      	cmp	r3, #15
 8002d78:	d809      	bhi.n	8002d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d82:	f002 fa3c 	bl	80051fe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_InitTick+0x70>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	e007      	b.n	8002d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	73fb      	strb	r3, [r7, #15]
 8002d92:	e004      	b.n	8002d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	73fb      	strb	r3, [r7, #15]
 8002d98:	e001      	b.n	8002d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3710      	adds	r7, #16
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000014 	.word	0x20000014
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	20000010 	.word	0x20000010

08002db4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <HAL_IncTick+0x1c>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <HAL_IncTick+0x20>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	4a03      	ldr	r2, [pc, #12]	@ (8002dd0 <HAL_IncTick+0x1c>)
 8002dc4:	6013      	str	r3, [r2, #0]
}
 8002dc6:	bf00      	nop
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	20000714 	.word	0x20000714
 8002dd4:	20000014 	.word	0x20000014

08002dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return uwTick;
 8002ddc:	4b03      	ldr	r3, [pc, #12]	@ (8002dec <HAL_GetTick+0x14>)
 8002dde:	681b      	ldr	r3, [r3, #0]
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	20000714 	.word	0x20000714

08002df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002df8:	f7ff ffee 	bl	8002dd8 <HAL_GetTick>
 8002dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e08:	d004      	beq.n	8002e14 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <HAL_Delay+0x40>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	4413      	add	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e14:	bf00      	nop
 8002e16:	f7ff ffdf 	bl	8002dd8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d8f7      	bhi.n	8002e16 <HAL_Delay+0x26>
  {
  }
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000014 	.word	0x20000014

08002e34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	431a      	orrs	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	609a      	str	r2, [r3, #8]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	3360      	adds	r3, #96	@ 0x60
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <LL_ADC_SetOffset+0x44>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	03fff000 	.word	0x03fff000

08002ee4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3360      	adds	r3, #96	@ 0x60
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b087      	sub	sp, #28
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3360      	adds	r3, #96	@ 0x60
 8002f20:	461a      	mov	r2, r3
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	431a      	orrs	r2, r3
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3360      	adds	r3, #96	@ 0x60
 8002f56:	461a      	mov	r2, r3
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002f70:	bf00      	nop
 8002f72:	371c      	adds	r7, #28
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	3360      	adds	r3, #96	@ 0x60
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	b083      	sub	sp, #12
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
 8002fba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	615a      	str	r2, [r3, #20]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr

08002ffe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b087      	sub	sp, #28
 8003002:	af00      	add	r7, sp, #0
 8003004:	60f8      	str	r0, [r7, #12]
 8003006:	60b9      	str	r1, [r7, #8]
 8003008:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3330      	adds	r3, #48	@ 0x30
 800300e:	461a      	mov	r2, r3
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	4413      	add	r3, r2
 800301c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	211f      	movs	r1, #31
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	401a      	ands	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	f003 011f 	and.w	r1, r3, #31
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	431a      	orrs	r2, r3
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800304a:	bf00      	nop
 800304c:	371c      	adds	r7, #28
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800306e:	2300      	movs	r3, #0
}
 8003070:	4618      	mov	r0, r3
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3314      	adds	r3, #20
 800308c:	461a      	mov	r2, r3
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	0e5b      	lsrs	r3, r3, #25
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	4413      	add	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	0d1b      	lsrs	r3, r3, #20
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2107      	movs	r1, #7
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	401a      	ands	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	0d1b      	lsrs	r3, r3, #20
 80030b6:	f003 031f 	and.w	r3, r3, #31
 80030ba:	6879      	ldr	r1, [r7, #4]
 80030bc:	fa01 f303 	lsl.w	r3, r1, r3
 80030c0:	431a      	orrs	r2, r3
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80030c6:	bf00      	nop
 80030c8:	371c      	adds	r7, #28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	43db      	mvns	r3, r3
 80030ee:	401a      	ands	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f003 0318 	and.w	r3, r3, #24
 80030f6:	4908      	ldr	r1, [pc, #32]	@ (8003118 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030f8:	40d9      	lsrs	r1, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	400b      	ands	r3, r1
 80030fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003102:	431a      	orrs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800310a:	bf00      	nop
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	0007ffff 	.word	0x0007ffff

0800311c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	f003 031f 	and.w	r3, r3, #31
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003164:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6093      	str	r3, [r2, #8]
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800318c:	d101      	bne.n	8003192 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80031b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80031b4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b083      	sub	sp, #12
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031dc:	d101      	bne.n	80031e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003200:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003204:	f043 0201 	orr.w	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003228:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800322c:	f043 0202 	orr.w	r2, r3, #2
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <LL_ADC_IsEnabled+0x18>
 8003254:	2301      	movs	r3, #1
 8003256:	e000      	b.n	800325a <LL_ADC_IsEnabled+0x1a>
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	2b02      	cmp	r3, #2
 8003278:	d101      	bne.n	800327e <LL_ADC_IsDisableOngoing+0x18>
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <LL_ADC_IsDisableOngoing+0x1a>
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800329c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80032a0:	f043 0204 	orr.w	r2, r3, #4
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d101      	bne.n	80032cc <LL_ADC_REG_IsConversionOngoing+0x18>
 80032c8:	2301      	movs	r3, #1
 80032ca:	e000      	b.n	80032ce <LL_ADC_REG_IsConversionOngoing+0x1a>
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d101      	bne.n	80032f2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b089      	sub	sp, #36	@ 0x24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800330c:	2300      	movs	r3, #0
 800330e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e1a9      	b.n	800366e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d109      	bne.n	800333c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7fe feab 	bl	8002084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff ff19 	bl	8003178 <LL_ADC_IsDeepPowerDownEnabled>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff feff 	bl	8003154 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff ff34 	bl	80031c8 <LL_ADC_IsInternalRegulatorEnabled>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d115      	bne.n	8003392 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7ff ff18 	bl	80031a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003370:	4b9c      	ldr	r3, [pc, #624]	@ (80035e4 <HAL_ADC_Init+0x2e4>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	099b      	lsrs	r3, r3, #6
 8003376:	4a9c      	ldr	r2, [pc, #624]	@ (80035e8 <HAL_ADC_Init+0x2e8>)
 8003378:	fba2 2303 	umull	r2, r3, r2, r3
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003384:	e002      	b.n	800338c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	3b01      	subs	r3, #1
 800338a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f9      	bne.n	8003386 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff ff16 	bl	80031c8 <LL_ADC_IsInternalRegulatorEnabled>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d10d      	bne.n	80033be <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033a6:	f043 0210 	orr.w	r2, r3, #16
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80033b2:	f043 0201 	orr.w	r2, r3, #1
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7ff ff76 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 80033c8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	f003 0310 	and.w	r3, r3, #16
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 8142 	bne.w	800365c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 813e 	bne.w	800365c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80033e8:	f043 0202 	orr.w	r2, r3, #2
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff ff23 	bl	8003240 <LL_ADC_IsEnabled>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d141      	bne.n	8003484 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003408:	d004      	beq.n	8003414 <HAL_ADC_Init+0x114>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a77      	ldr	r2, [pc, #476]	@ (80035ec <HAL_ADC_Init+0x2ec>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d10f      	bne.n	8003434 <HAL_ADC_Init+0x134>
 8003414:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003418:	f7ff ff12 	bl	8003240 <LL_ADC_IsEnabled>
 800341c:	4604      	mov	r4, r0
 800341e:	4873      	ldr	r0, [pc, #460]	@ (80035ec <HAL_ADC_Init+0x2ec>)
 8003420:	f7ff ff0e 	bl	8003240 <LL_ADC_IsEnabled>
 8003424:	4603      	mov	r3, r0
 8003426:	4323      	orrs	r3, r4
 8003428:	2b00      	cmp	r3, #0
 800342a:	bf0c      	ite	eq
 800342c:	2301      	moveq	r3, #1
 800342e:	2300      	movne	r3, #0
 8003430:	b2db      	uxtb	r3, r3
 8003432:	e012      	b.n	800345a <HAL_ADC_Init+0x15a>
 8003434:	486e      	ldr	r0, [pc, #440]	@ (80035f0 <HAL_ADC_Init+0x2f0>)
 8003436:	f7ff ff03 	bl	8003240 <LL_ADC_IsEnabled>
 800343a:	4604      	mov	r4, r0
 800343c:	486d      	ldr	r0, [pc, #436]	@ (80035f4 <HAL_ADC_Init+0x2f4>)
 800343e:	f7ff feff 	bl	8003240 <LL_ADC_IsEnabled>
 8003442:	4603      	mov	r3, r0
 8003444:	431c      	orrs	r4, r3
 8003446:	486c      	ldr	r0, [pc, #432]	@ (80035f8 <HAL_ADC_Init+0x2f8>)
 8003448:	f7ff fefa 	bl	8003240 <LL_ADC_IsEnabled>
 800344c:	4603      	mov	r3, r0
 800344e:	4323      	orrs	r3, r4
 8003450:	2b00      	cmp	r3, #0
 8003452:	bf0c      	ite	eq
 8003454:	2301      	moveq	r3, #1
 8003456:	2300      	movne	r3, #0
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d012      	beq.n	8003484 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003466:	d004      	beq.n	8003472 <HAL_ADC_Init+0x172>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a5f      	ldr	r2, [pc, #380]	@ (80035ec <HAL_ADC_Init+0x2ec>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d101      	bne.n	8003476 <HAL_ADC_Init+0x176>
 8003472:	4a62      	ldr	r2, [pc, #392]	@ (80035fc <HAL_ADC_Init+0x2fc>)
 8003474:	e000      	b.n	8003478 <HAL_ADC_Init+0x178>
 8003476:	4a62      	ldr	r2, [pc, #392]	@ (8003600 <HAL_ADC_Init+0x300>)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4619      	mov	r1, r3
 800347e:	4610      	mov	r0, r2
 8003480:	f7ff fcd8 	bl	8002e34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7f5b      	ldrb	r3, [r3, #29]
 8003488:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800348e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003494:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800349a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d106      	bne.n	80034c0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b6:	3b01      	subs	r3, #1
 80034b8:	045b      	lsls	r3, r3, #17
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4313      	orrs	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d009      	beq.n	80034dc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4313      	orrs	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	4b48      	ldr	r3, [pc, #288]	@ (8003604 <HAL_ADC_Init+0x304>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	6812      	ldr	r2, [r2, #0]
 80034ea:	69b9      	ldr	r1, [r7, #24]
 80034ec:	430b      	orrs	r3, r1
 80034ee:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fee5 	bl	80032da <LL_ADC_INJ_IsConversionOngoing>
 8003510:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d17f      	bne.n	8003618 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d17c      	bne.n	8003618 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003522:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800352a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800353a:	f023 0302 	bic.w	r3, r3, #2
 800353e:	687a      	ldr	r2, [r7, #4]
 8003540:	6812      	ldr	r2, [r2, #0]
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	430b      	orrs	r3, r1
 8003546:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d017      	beq.n	8003580 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800355e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003568:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800356c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	6911      	ldr	r1, [r2, #16]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800357e:	e013      	b.n	80035a8 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800358e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80035a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80035a4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d12a      	bne.n	8003608 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80035bc:	f023 0304 	bic.w	r3, r3, #4
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035c8:	4311      	orrs	r1, r2
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80035ce:	4311      	orrs	r1, r2
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80035d4:	430a      	orrs	r2, r1
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	611a      	str	r2, [r3, #16]
 80035e2:	e019      	b.n	8003618 <HAL_ADC_Init+0x318>
 80035e4:	2000000c 	.word	0x2000000c
 80035e8:	053e2d63 	.word	0x053e2d63
 80035ec:	50000100 	.word	0x50000100
 80035f0:	50000400 	.word	0x50000400
 80035f4:	50000500 	.word	0x50000500
 80035f8:	50000600 	.word	0x50000600
 80035fc:	50000300 	.word	0x50000300
 8003600:	50000700 	.word	0x50000700
 8003604:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0201 	bic.w	r2, r2, #1
 8003616:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10c      	bne.n	800363a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f023 010f 	bic.w	r1, r3, #15
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	1e5a      	subs	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
 8003638:	e007      	b.n	800364a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 020f 	bic.w	r2, r2, #15
 8003648:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	f043 0201 	orr.w	r2, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	65da      	str	r2, [r3, #92]	@ 0x5c
 800365a:	e007      	b.n	800366c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	f043 0210 	orr.w	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800366c:	7ffb      	ldrb	r3, [r7, #31]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3724      	adds	r7, #36	@ 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd90      	pop	{r4, r7, pc}
 8003676:	bf00      	nop

08003678 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b086      	sub	sp, #24
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003688:	d004      	beq.n	8003694 <HAL_ADC_Start+0x1c>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a67      	ldr	r2, [pc, #412]	@ (800382c <HAL_ADC_Start+0x1b4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <HAL_ADC_Start+0x20>
 8003694:	4b66      	ldr	r3, [pc, #408]	@ (8003830 <HAL_ADC_Start+0x1b8>)
 8003696:	e000      	b.n	800369a <HAL_ADC_Start+0x22>
 8003698:	4b66      	ldr	r3, [pc, #408]	@ (8003834 <HAL_ADC_Start+0x1bc>)
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fd3e 	bl	800311c <LL_ADC_GetMultimode>
 80036a0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fe04 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f040 80b4 	bne.w	800381c <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_ADC_Start+0x4a>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0af      	b.n	8003822 <HAL_ADC_Start+0x1aa>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f001 f9d8 	bl	8004a80 <ADC_Enable>
 80036d0:	4603      	mov	r3, r0
 80036d2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f040 809b 	bne.w	8003812 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a4d      	ldr	r2, [pc, #308]	@ (800382c <HAL_ADC_Start+0x1b4>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d009      	beq.n	800370e <HAL_ADC_Start+0x96>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a4e      	ldr	r2, [pc, #312]	@ (8003838 <HAL_ADC_Start+0x1c0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d002      	beq.n	800370a <HAL_ADC_Start+0x92>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	e003      	b.n	8003712 <HAL_ADC_Start+0x9a>
 800370a:	4b4c      	ldr	r3, [pc, #304]	@ (800383c <HAL_ADC_Start+0x1c4>)
 800370c:	e001      	b.n	8003712 <HAL_ADC_Start+0x9a>
 800370e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6812      	ldr	r2, [r2, #0]
 8003716:	4293      	cmp	r3, r2
 8003718:	d002      	beq.n	8003720 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d105      	bne.n	800372c <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003724:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003730:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	d106      	bne.n	8003748 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800373e:	f023 0206 	bic.w	r2, r3, #6
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	661a      	str	r2, [r3, #96]	@ 0x60
 8003746:	e002      	b.n	800374e <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	221c      	movs	r2, #28
 8003754:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a32      	ldr	r2, [pc, #200]	@ (800382c <HAL_ADC_Start+0x1b4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_ADC_Start+0x104>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a32      	ldr	r2, [pc, #200]	@ (8003838 <HAL_ADC_Start+0x1c0>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d002      	beq.n	8003778 <HAL_ADC_Start+0x100>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e003      	b.n	8003780 <HAL_ADC_Start+0x108>
 8003778:	4b30      	ldr	r3, [pc, #192]	@ (800383c <HAL_ADC_Start+0x1c4>)
 800377a:	e001      	b.n	8003780 <HAL_ADC_Start+0x108>
 800377c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6812      	ldr	r2, [r2, #0]
 8003784:	4293      	cmp	r3, r2
 8003786:	d008      	beq.n	800379a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d005      	beq.n	800379a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	2b05      	cmp	r3, #5
 8003792:	d002      	beq.n	800379a <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	2b09      	cmp	r3, #9
 8003798:	d114      	bne.n	80037c4 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ac:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80037b0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff fd65 	bl	800328c <LL_ADC_REG_StartConversion>
 80037c2:	e02d      	b.n	8003820 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c8:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a15      	ldr	r2, [pc, #84]	@ (800382c <HAL_ADC_Start+0x1b4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_ADC_Start+0x176>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a16      	ldr	r2, [pc, #88]	@ (8003838 <HAL_ADC_Start+0x1c0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d002      	beq.n	80037ea <HAL_ADC_Start+0x172>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	e003      	b.n	80037f2 <HAL_ADC_Start+0x17a>
 80037ea:	4b14      	ldr	r3, [pc, #80]	@ (800383c <HAL_ADC_Start+0x1c4>)
 80037ec:	e001      	b.n	80037f2 <HAL_ADC_Start+0x17a>
 80037ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037f2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00f      	beq.n	8003820 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003808:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003810:	e006      	b.n	8003820 <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 800381a:	e001      	b.n	8003820 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800381c:	2302      	movs	r3, #2
 800381e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003820:	7dfb      	ldrb	r3, [r7, #23]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	50000100 	.word	0x50000100
 8003830:	50000300 	.word	0x50000300
 8003834:	50000700 	.word	0x50000700
 8003838:	50000500 	.word	0x50000500
 800383c:	50000400 	.word	0x50000400

08003840 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b088      	sub	sp, #32
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003852:	d004      	beq.n	800385e <HAL_ADC_PollForConversion+0x1e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a77      	ldr	r2, [pc, #476]	@ (8003a38 <HAL_ADC_PollForConversion+0x1f8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_ADC_PollForConversion+0x22>
 800385e:	4b77      	ldr	r3, [pc, #476]	@ (8003a3c <HAL_ADC_PollForConversion+0x1fc>)
 8003860:	e000      	b.n	8003864 <HAL_ADC_PollForConversion+0x24>
 8003862:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <HAL_ADC_PollForConversion+0x200>)
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff fc59 	bl	800311c <LL_ADC_GetMultimode>
 800386a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d102      	bne.n	800387a <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003874:	2308      	movs	r3, #8
 8003876:	61fb      	str	r3, [r7, #28]
 8003878:	e037      	b.n	80038ea <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d005      	beq.n	800388c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2b05      	cmp	r3, #5
 8003884:	d002      	beq.n	800388c <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b09      	cmp	r3, #9
 800388a:	d111      	bne.n	80038b0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d007      	beq.n	80038aa <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e0c1      	b.n	8003a2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038aa:	2304      	movs	r3, #4
 80038ac:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80038ae:	e01c      	b.n	80038ea <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b8:	d004      	beq.n	80038c4 <HAL_ADC_PollForConversion+0x84>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5e      	ldr	r2, [pc, #376]	@ (8003a38 <HAL_ADC_PollForConversion+0x1f8>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d101      	bne.n	80038c8 <HAL_ADC_PollForConversion+0x88>
 80038c4:	4b5d      	ldr	r3, [pc, #372]	@ (8003a3c <HAL_ADC_PollForConversion+0x1fc>)
 80038c6:	e000      	b.n	80038ca <HAL_ADC_PollForConversion+0x8a>
 80038c8:	4b5d      	ldr	r3, [pc, #372]	@ (8003a40 <HAL_ADC_PollForConversion+0x200>)
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff fc34 	bl	8003138 <LL_ADC_GetMultiDMATransfer>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d007      	beq.n	80038e6 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038da:	f043 0220 	orr.w	r2, r3, #32
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e0a3      	b.n	8003a2e <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80038e6:	2304      	movs	r3, #4
 80038e8:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80038ea:	f7ff fa75 	bl	8002dd8 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80038f0:	e021      	b.n	8003936 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038f8:	d01d      	beq.n	8003936 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80038fa:	f7ff fa6d 	bl	8002dd8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d302      	bcc.n	8003910 <HAL_ADC_PollForConversion+0xd0>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d112      	bne.n	8003936 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4013      	ands	r3, r2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003922:	f043 0204 	orr.w	r2, r3, #4
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e07b      	b.n	8003a2e <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0d6      	beq.n	80038f2 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003948:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4618      	mov	r0, r3
 8003956:	f7ff fb3f 	bl	8002fd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01c      	beq.n	800399a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	7f5b      	ldrb	r3, [r3, #29]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d118      	bne.n	800399a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0308 	and.w	r3, r3, #8
 8003972:	2b08      	cmp	r3, #8
 8003974:	d111      	bne.n	800399a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800397a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003986:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d105      	bne.n	800399a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	f043 0201 	orr.w	r2, r3, #1
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a26      	ldr	r2, [pc, #152]	@ (8003a38 <HAL_ADC_PollForConversion+0x1f8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d009      	beq.n	80039b8 <HAL_ADC_PollForConversion+0x178>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a26      	ldr	r2, [pc, #152]	@ (8003a44 <HAL_ADC_PollForConversion+0x204>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_PollForConversion+0x174>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e003      	b.n	80039bc <HAL_ADC_PollForConversion+0x17c>
 80039b4:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_ADC_PollForConversion+0x208>)
 80039b6:	e001      	b.n	80039bc <HAL_ADC_PollForConversion+0x17c>
 80039b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6812      	ldr	r2, [r2, #0]
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d008      	beq.n	80039d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d005      	beq.n	80039d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b05      	cmp	r3, #5
 80039ce:	d002      	beq.n	80039d6 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b09      	cmp	r3, #9
 80039d4:	d104      	bne.n	80039e0 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
 80039de:	e014      	b.n	8003a0a <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a14      	ldr	r2, [pc, #80]	@ (8003a38 <HAL_ADC_PollForConversion+0x1f8>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_ADC_PollForConversion+0x1be>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a15      	ldr	r2, [pc, #84]	@ (8003a44 <HAL_ADC_PollForConversion+0x204>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d002      	beq.n	80039fa <HAL_ADC_PollForConversion+0x1ba>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	e003      	b.n	8003a02 <HAL_ADC_PollForConversion+0x1c2>
 80039fa:	4b13      	ldr	r3, [pc, #76]	@ (8003a48 <HAL_ADC_PollForConversion+0x208>)
 80039fc:	e001      	b.n	8003a02 <HAL_ADC_PollForConversion+0x1c2>
 80039fe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003a02:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	2b08      	cmp	r3, #8
 8003a0e:	d104      	bne.n	8003a1a <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	e008      	b.n	8003a2c <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d103      	bne.n	8003a2c <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	220c      	movs	r2, #12
 8003a2a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3720      	adds	r7, #32
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	50000100 	.word	0x50000100
 8003a3c:	50000300 	.word	0x50000300
 8003a40:	50000700 	.word	0x50000700
 8003a44:	50000500 	.word	0x50000500
 8003a48:	50000400 	.word	0x50000400

08003a4c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a5c:	d004      	beq.n	8003a68 <HAL_ADC_Start_IT+0x1c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a92      	ldr	r2, [pc, #584]	@ (8003cac <HAL_ADC_Start_IT+0x260>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_Start_IT+0x20>
 8003a68:	4b91      	ldr	r3, [pc, #580]	@ (8003cb0 <HAL_ADC_Start_IT+0x264>)
 8003a6a:	e000      	b.n	8003a6e <HAL_ADC_Start_IT+0x22>
 8003a6c:	4b91      	ldr	r3, [pc, #580]	@ (8003cb4 <HAL_ADC_Start_IT+0x268>)
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f7ff fb54 	bl	800311c <LL_ADC_GetMultimode>
 8003a74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7ff fc1a 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f040 8132 	bne.w	8003cec <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d101      	bne.n	8003a96 <HAL_ADC_Start_IT+0x4a>
 8003a92:	2302      	movs	r3, #2
 8003a94:	e12d      	b.n	8003cf2 <HAL_ADC_Start_IT+0x2a6>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 ffee 	bl	8004a80 <ADC_Enable>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003aa8:	7dfb      	ldrb	r3, [r7, #23]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f040 8119 	bne.w	8003ce2 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a78      	ldr	r2, [pc, #480]	@ (8003cac <HAL_ADC_Start_IT+0x260>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d009      	beq.n	8003ae2 <HAL_ADC_Start_IT+0x96>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a79      	ldr	r2, [pc, #484]	@ (8003cb8 <HAL_ADC_Start_IT+0x26c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d002      	beq.n	8003ade <HAL_ADC_Start_IT+0x92>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	e003      	b.n	8003ae6 <HAL_ADC_Start_IT+0x9a>
 8003ade:	4b77      	ldr	r3, [pc, #476]	@ (8003cbc <HAL_ADC_Start_IT+0x270>)
 8003ae0:	e001      	b.n	8003ae6 <HAL_ADC_Start_IT+0x9a>
 8003ae2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d002      	beq.n	8003af4 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d105      	bne.n	8003b00 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b10:	f023 0206 	bic.w	r2, r3, #6
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	661a      	str	r2, [r3, #96]	@ 0x60
 8003b18:	e002      	b.n	8003b20 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	221c      	movs	r2, #28
 8003b26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685a      	ldr	r2, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 021c 	bic.w	r2, r2, #28
 8003b3e:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d108      	bne.n	8003b5a <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f042 0208 	orr.w	r2, r2, #8
 8003b56:	605a      	str	r2, [r3, #4]
          break;
 8003b58:	e008      	b.n	8003b6c <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0204 	orr.w	r2, r2, #4
 8003b68:	605a      	str	r2, [r3, #4]
          break;
 8003b6a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d107      	bne.n	8003b84 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685a      	ldr	r2, [r3, #4]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0210 	orr.w	r2, r2, #16
 8003b82:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a48      	ldr	r2, [pc, #288]	@ (8003cac <HAL_ADC_Start_IT+0x260>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <HAL_ADC_Start_IT+0x156>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a49      	ldr	r2, [pc, #292]	@ (8003cb8 <HAL_ADC_Start_IT+0x26c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d002      	beq.n	8003b9e <HAL_ADC_Start_IT+0x152>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	e003      	b.n	8003ba6 <HAL_ADC_Start_IT+0x15a>
 8003b9e:	4b47      	ldr	r3, [pc, #284]	@ (8003cbc <HAL_ADC_Start_IT+0x270>)
 8003ba0:	e001      	b.n	8003ba6 <HAL_ADC_Start_IT+0x15a>
 8003ba2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	6812      	ldr	r2, [r2, #0]
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d008      	beq.n	8003bc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d002      	beq.n	8003bc0 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	2b09      	cmp	r3, #9
 8003bbe:	d13a      	bne.n	8003c36 <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d02d      	beq.n	8003c2a <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003bd6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b08      	cmp	r3, #8
 8003be4:	d110      	bne.n	8003c08 <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f022 0220 	bic.w	r2, r2, #32
 8003bf4:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c04:	605a      	str	r2, [r3, #4]
              break;
 8003c06:	e010      	b.n	8003c2a <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c16:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0220 	orr.w	r2, r2, #32
 8003c26:	605a      	str	r2, [r3, #4]
              break;
 8003c28:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fb2c 	bl	800328c <LL_ADC_REG_StartConversion>
 8003c34:	e05c      	b.n	8003cf0 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a19      	ldr	r2, [pc, #100]	@ (8003cac <HAL_ADC_Start_IT+0x260>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d009      	beq.n	8003c60 <HAL_ADC_Start_IT+0x214>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a19      	ldr	r2, [pc, #100]	@ (8003cb8 <HAL_ADC_Start_IT+0x26c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d002      	beq.n	8003c5c <HAL_ADC_Start_IT+0x210>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	e003      	b.n	8003c64 <HAL_ADC_Start_IT+0x218>
 8003c5c:	4b17      	ldr	r3, [pc, #92]	@ (8003cbc <HAL_ADC_Start_IT+0x270>)
 8003c5e:	e001      	b.n	8003c64 <HAL_ADC_Start_IT+0x218>
 8003c60:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c64:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d03e      	beq.n	8003cf0 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003c7a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	2b08      	cmp	r3, #8
 8003c88:	d11a      	bne.n	8003cc0 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685a      	ldr	r2, [r3, #4]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 0220 	bic.w	r2, r2, #32
 8003c98:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ca8:	605a      	str	r2, [r3, #4]
              break;
 8003caa:	e021      	b.n	8003cf0 <HAL_ADC_Start_IT+0x2a4>
 8003cac:	50000100 	.word	0x50000100
 8003cb0:	50000300 	.word	0x50000300
 8003cb4:	50000700 	.word	0x50000700
 8003cb8:	50000500 	.word	0x50000500
 8003cbc:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cce:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0220 	orr.w	r2, r2, #32
 8003cde:	605a      	str	r2, [r3, #4]
              break;
 8003ce0:	e006      	b.n	8003cf0 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003cea:	e001      	b.n	8003cf0 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003cec:	2302      	movs	r3, #2
 8003cee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop

08003cfc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
	...

08003d18 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b08a      	sub	sp, #40	@ 0x28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003d20:	2300      	movs	r3, #0
 8003d22:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d3c:	d004      	beq.n	8003d48 <HAL_ADC_IRQHandler+0x30>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a8e      	ldr	r2, [pc, #568]	@ (8003f7c <HAL_ADC_IRQHandler+0x264>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d101      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x34>
 8003d48:	4b8d      	ldr	r3, [pc, #564]	@ (8003f80 <HAL_ADC_IRQHandler+0x268>)
 8003d4a:	e000      	b.n	8003d4e <HAL_ADC_IRQHandler+0x36>
 8003d4c:	4b8d      	ldr	r3, [pc, #564]	@ (8003f84 <HAL_ADC_IRQHandler+0x26c>)
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7ff f9e4 	bl	800311c <LL_ADC_GetMultimode>
 8003d54:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	f003 0302 	and.w	r3, r3, #2
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d017      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x78>
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d105      	bne.n	8003d82 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d7a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f001 f84e 	bl	8004e24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	2202      	movs	r2, #2
 8003d8e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0304 	and.w	r3, r3, #4
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_ADC_IRQHandler+0x8c>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 8094 	beq.w	8003ed8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 808e 	beq.w	8003ed8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dc0:	f003 0310 	and.w	r3, r3, #16
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d105      	bne.n	8003dd4 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dcc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff f8fd 	bl	8002fd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d072      	beq.n	8003eca <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a64      	ldr	r2, [pc, #400]	@ (8003f7c <HAL_ADC_IRQHandler+0x264>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d009      	beq.n	8003e02 <HAL_ADC_IRQHandler+0xea>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a65      	ldr	r2, [pc, #404]	@ (8003f88 <HAL_ADC_IRQHandler+0x270>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d002      	beq.n	8003dfe <HAL_ADC_IRQHandler+0xe6>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	e003      	b.n	8003e06 <HAL_ADC_IRQHandler+0xee>
 8003dfe:	4b63      	ldr	r3, [pc, #396]	@ (8003f8c <HAL_ADC_IRQHandler+0x274>)
 8003e00:	e001      	b.n	8003e06 <HAL_ADC_IRQHandler+0xee>
 8003e02:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d008      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d005      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d002      	beq.n	8003e20 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b09      	cmp	r3, #9
 8003e1e:	d104      	bne.n	8003e2a <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	623b      	str	r3, [r7, #32]
 8003e28:	e014      	b.n	8003e54 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a53      	ldr	r2, [pc, #332]	@ (8003f7c <HAL_ADC_IRQHandler+0x264>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d009      	beq.n	8003e48 <HAL_ADC_IRQHandler+0x130>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a53      	ldr	r2, [pc, #332]	@ (8003f88 <HAL_ADC_IRQHandler+0x270>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d002      	beq.n	8003e44 <HAL_ADC_IRQHandler+0x12c>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	e003      	b.n	8003e4c <HAL_ADC_IRQHandler+0x134>
 8003e44:	4b51      	ldr	r3, [pc, #324]	@ (8003f8c <HAL_ADC_IRQHandler+0x274>)
 8003e46:	e001      	b.n	8003e4c <HAL_ADC_IRQHandler+0x134>
 8003e48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003e4c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d135      	bne.n	8003eca <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d12e      	bne.n	8003eca <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fa1f 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d11a      	bne.n	8003eb2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685a      	ldr	r2, [r3, #4]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 020c 	bic.w	r2, r2, #12
 8003e8a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d112      	bne.n	8003eca <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea8:	f043 0201 	orr.w	r2, r3, #1
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003eb0:	e00b      	b.n	8003eca <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb6:	f043 0210 	orr.w	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ec2:	f043 0201 	orr.w	r2, r3, #1
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fd ffbc 	bl	8001e48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	220c      	movs	r2, #12
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 0320 	and.w	r3, r3, #32
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <HAL_ADC_IRQHandler+0x1d4>
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	f003 0320 	and.w	r3, r3, #32
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	f000 80b3 	beq.w	800405e <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80ad 	beq.w	800405e <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f14:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7ff f898 	bl	8003056 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003f26:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7ff f853 	bl	8002fd8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f32:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a10      	ldr	r2, [pc, #64]	@ (8003f7c <HAL_ADC_IRQHandler+0x264>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_ADC_IRQHandler+0x23a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a11      	ldr	r2, [pc, #68]	@ (8003f88 <HAL_ADC_IRQHandler+0x270>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d002      	beq.n	8003f4e <HAL_ADC_IRQHandler+0x236>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	e003      	b.n	8003f56 <HAL_ADC_IRQHandler+0x23e>
 8003f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f8c <HAL_ADC_IRQHandler+0x274>)
 8003f50:	e001      	b.n	8003f56 <HAL_ADC_IRQHandler+0x23e>
 8003f52:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d008      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d005      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d002      	beq.n	8003f70 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2b07      	cmp	r3, #7
 8003f6e:	d10f      	bne.n	8003f90 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	623b      	str	r3, [r7, #32]
 8003f78:	e01f      	b.n	8003fba <HAL_ADC_IRQHandler+0x2a2>
 8003f7a:	bf00      	nop
 8003f7c:	50000100 	.word	0x50000100
 8003f80:	50000300 	.word	0x50000300
 8003f84:	50000700 	.word	0x50000700
 8003f88:	50000500 	.word	0x50000500
 8003f8c:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a8b      	ldr	r2, [pc, #556]	@ (80041c4 <HAL_ADC_IRQHandler+0x4ac>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d009      	beq.n	8003fae <HAL_ADC_IRQHandler+0x296>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a8a      	ldr	r2, [pc, #552]	@ (80041c8 <HAL_ADC_IRQHandler+0x4b0>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d002      	beq.n	8003faa <HAL_ADC_IRQHandler+0x292>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	e003      	b.n	8003fb2 <HAL_ADC_IRQHandler+0x29a>
 8003faa:	4b88      	ldr	r3, [pc, #544]	@ (80041cc <HAL_ADC_IRQHandler+0x4b4>)
 8003fac:	e001      	b.n	8003fb2 <HAL_ADC_IRQHandler+0x29a>
 8003fae:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003fb2:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d047      	beq.n	8004050 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d007      	beq.n	8003fda <HAL_ADC_IRQHandler+0x2c2>
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d03f      	beq.n	8004050 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d13a      	bne.n	8004050 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d133      	bne.n	8004050 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d12e      	bne.n	8004050 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f96f 	bl	80032da <LL_ADC_INJ_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d11a      	bne.n	8004038 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004010:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004016:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d112      	bne.n	8004050 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800402e:	f043 0201 	orr.w	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004036:	e00b      	b.n	8004050 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800403c:	f043 0210 	orr.w	r2, r3, #16
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 febf 	bl	8004dd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2260      	movs	r2, #96	@ 0x60
 800405c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d011      	beq.n	800408c <HAL_ADC_IRQHandler+0x374>
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00c      	beq.n	800408c <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004076:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f8aa 	bl	80041d8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2280      	movs	r2, #128	@ 0x80
 800408a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_ADC_IRQHandler+0x3a4>
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00d      	beq.n	80040bc <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f000 fea5 	bl	8004dfc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d012      	beq.n	80040ec <HAL_ADC_IRQHandler+0x3d4>
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00d      	beq.n	80040ec <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fe97 	bl	8004e10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	f003 0310 	and.w	r3, r3, #16
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d043      	beq.n	800417e <HAL_ADC_IRQHandler+0x466>
 80040f6:	69bb      	ldr	r3, [r7, #24]
 80040f8:	f003 0310 	and.w	r3, r3, #16
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d03e      	beq.n	800417e <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004104:	2b00      	cmp	r3, #0
 8004106:	d102      	bne.n	800410e <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	@ 0x24
 800410c:	e021      	b.n	8004152 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d015      	beq.n	8004140 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800411c:	d004      	beq.n	8004128 <HAL_ADC_IRQHandler+0x410>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a28      	ldr	r2, [pc, #160]	@ (80041c4 <HAL_ADC_IRQHandler+0x4ac>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d101      	bne.n	800412c <HAL_ADC_IRQHandler+0x414>
 8004128:	4b29      	ldr	r3, [pc, #164]	@ (80041d0 <HAL_ADC_IRQHandler+0x4b8>)
 800412a:	e000      	b.n	800412e <HAL_ADC_IRQHandler+0x416>
 800412c:	4b29      	ldr	r3, [pc, #164]	@ (80041d4 <HAL_ADC_IRQHandler+0x4bc>)
 800412e:	4618      	mov	r0, r3
 8004130:	f7ff f802 	bl	8003138 <LL_ADC_GetMultiDMATransfer>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00b      	beq.n	8004152 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800413a:	2301      	movs	r3, #1
 800413c:	627b      	str	r3, [r7, #36]	@ 0x24
 800413e:	e008      	b.n	8004152 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800414e:	2301      	movs	r3, #1
 8004150:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004154:	2b01      	cmp	r3, #1
 8004156:	d10e      	bne.n	8004176 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004168:	f043 0202 	orr.w	r2, r3, #2
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f83b 	bl	80041ec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2210      	movs	r2, #16
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004184:	2b00      	cmp	r3, #0
 8004186:	d018      	beq.n	80041ba <HAL_ADC_IRQHandler+0x4a2>
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800418e:	2b00      	cmp	r3, #0
 8004190:	d013      	beq.n	80041ba <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004196:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041a2:	f043 0208 	orr.w	r2, r3, #8
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80041b2:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fe17 	bl	8004de8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80041ba:	bf00      	nop
 80041bc:	3728      	adds	r7, #40	@ 0x28
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	50000100 	.word	0x50000100
 80041c8:	50000500 	.word	0x50000500
 80041cc:	50000400 	.word	0x50000400
 80041d0:	50000300 	.word	0x50000300
 80041d4:	50000700 	.word	0x50000700

080041d8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80041f4:	bf00      	nop
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b0b6      	sub	sp, #216	@ 0xd8
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800421a:	2b01      	cmp	r3, #1
 800421c:	d102      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x24>
 800421e:	2302      	movs	r3, #2
 8004220:	f000 bc13 	b.w	8004a4a <HAL_ADC_ConfigChannel+0x84a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff f83f 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	f040 83f3 	bne.w	8004a24 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6818      	ldr	r0, [r3, #0]
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	6859      	ldr	r1, [r3, #4]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	f7fe fed7 	bl	8002ffe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff f82d 	bl	80032b4 <LL_ADC_REG_IsConversionOngoing>
 800425a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4618      	mov	r0, r3
 8004264:	f7ff f839 	bl	80032da <LL_ADC_INJ_IsConversionOngoing>
 8004268:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800426c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004270:	2b00      	cmp	r3, #0
 8004272:	f040 81d9 	bne.w	8004628 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004276:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800427a:	2b00      	cmp	r3, #0
 800427c:	f040 81d4 	bne.w	8004628 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004288:	d10f      	bne.n	80042aa <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6818      	ldr	r0, [r3, #0]
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2200      	movs	r2, #0
 8004294:	4619      	mov	r1, r3
 8004296:	f7fe fef1 	bl	800307c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fe fe85 	bl	8002fb2 <LL_ADC_SetSamplingTimeCommonConfig>
 80042a8:	e00e      	b.n	80042c8 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6819      	ldr	r1, [r3, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	461a      	mov	r2, r3
 80042b8:	f7fe fee0 	bl	800307c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2100      	movs	r1, #0
 80042c2:	4618      	mov	r0, r3
 80042c4:	f7fe fe75 	bl	8002fb2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695a      	ldr	r2, [r3, #20]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	08db      	lsrs	r3, r3, #3
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d022      	beq.n	8004330 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6919      	ldr	r1, [r3, #16]
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80042fa:	f7fe fdcf 	bl	8002e9c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	6919      	ldr	r1, [r3, #16]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	461a      	mov	r2, r3
 800430c:	f7fe fe1b 	bl	8002f46 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800431c:	2b01      	cmp	r3, #1
 800431e:	d102      	bne.n	8004326 <HAL_ADC_ConfigChannel+0x126>
 8004320:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004324:	e000      	b.n	8004328 <HAL_ADC_ConfigChannel+0x128>
 8004326:	2300      	movs	r3, #0
 8004328:	461a      	mov	r2, r3
 800432a:	f7fe fe27 	bl	8002f7c <LL_ADC_SetOffsetSaturation>
 800432e:	e17b      	b.n	8004628 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2100      	movs	r1, #0
 8004336:	4618      	mov	r0, r3
 8004338:	f7fe fdd4 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 800433c:	4603      	mov	r3, r0
 800433e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10a      	bne.n	800435c <HAL_ADC_ConfigChannel+0x15c>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe fdc9 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	0e9b      	lsrs	r3, r3, #26
 8004356:	f003 021f 	and.w	r2, r3, #31
 800435a:	e01e      	b.n	800439a <HAL_ADC_ConfigChannel+0x19a>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2100      	movs	r1, #0
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fdbe 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 8004368:	4603      	mov	r3, r0
 800436a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004372:	fa93 f3a3 	rbit	r3, r3
 8004376:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800437a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800437e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800438a:	2320      	movs	r3, #32
 800438c:	e004      	b.n	8004398 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800438e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004392:	fab3 f383 	clz	r3, r3
 8004396:	b2db      	uxtb	r3, r3
 8004398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d105      	bne.n	80043b2 <HAL_ADC_ConfigChannel+0x1b2>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0e9b      	lsrs	r3, r3, #26
 80043ac:	f003 031f 	and.w	r3, r3, #31
 80043b0:	e018      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x1e4>
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80043c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80043ca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80043ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80043d6:	2320      	movs	r3, #32
 80043d8:	e004      	b.n	80043e4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80043da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d106      	bne.n	80043f6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2100      	movs	r1, #0
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fd8d 	bl	8002f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2101      	movs	r1, #1
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fe fd71 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 8004402:	4603      	mov	r3, r0
 8004404:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x222>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe fd66 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 8004418:	4603      	mov	r3, r0
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	f003 021f 	and.w	r2, r3, #31
 8004420:	e01e      	b.n	8004460 <HAL_ADC_ConfigChannel+0x260>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2101      	movs	r1, #1
 8004428:	4618      	mov	r0, r3
 800442a:	f7fe fd5b 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 800442e:	4603      	mov	r3, r0
 8004430:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004438:	fa93 f3a3 	rbit	r3, r3
 800443c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004440:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004444:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8004448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004450:	2320      	movs	r3, #32
 8004452:	e004      	b.n	800445e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004454:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004458:	fab3 f383 	clz	r3, r3
 800445c:	b2db      	uxtb	r3, r3
 800445e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004468:	2b00      	cmp	r3, #0
 800446a:	d105      	bne.n	8004478 <HAL_ADC_ConfigChannel+0x278>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	0e9b      	lsrs	r3, r3, #26
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	e018      	b.n	80044aa <HAL_ADC_ConfigChannel+0x2aa>
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004480:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004484:	fa93 f3a3 	rbit	r3, r3
 8004488:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800448c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004490:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004494:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004498:	2b00      	cmp	r3, #0
 800449a:	d101      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800449c:	2320      	movs	r3, #32
 800449e:	e004      	b.n	80044aa <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80044a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044a4:	fab3 f383 	clz	r3, r3
 80044a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d106      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	2200      	movs	r2, #0
 80044b4:	2101      	movs	r1, #1
 80044b6:	4618      	mov	r0, r3
 80044b8:	f7fe fd2a 	bl	8002f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fd0e 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10a      	bne.n	80044e8 <HAL_ADC_ConfigChannel+0x2e8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2102      	movs	r1, #2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fe fd03 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	f003 021f 	and.w	r2, r3, #31
 80044e6:	e01e      	b.n	8004526 <HAL_ADC_ConfigChannel+0x326>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7fe fcf8 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80044fe:	fa93 f3a3 	rbit	r3, r3
 8004502:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004506:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800450a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800450e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004516:	2320      	movs	r3, #32
 8004518:	e004      	b.n	8004524 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800451a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800451e:	fab3 f383 	clz	r3, r3
 8004522:	b2db      	uxtb	r3, r3
 8004524:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800452e:	2b00      	cmp	r3, #0
 8004530:	d105      	bne.n	800453e <HAL_ADC_ConfigChannel+0x33e>
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	0e9b      	lsrs	r3, r3, #26
 8004538:	f003 031f 	and.w	r3, r3, #31
 800453c:	e016      	b.n	800456c <HAL_ADC_ConfigChannel+0x36c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004546:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800454a:	fa93 f3a3 	rbit	r3, r3
 800454e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004550:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004552:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8004556:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e004      	b.n	800456c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004562:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004566:	fab3 f383 	clz	r3, r3
 800456a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800456c:	429a      	cmp	r2, r3
 800456e:	d106      	bne.n	800457e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	2102      	movs	r1, #2
 8004578:	4618      	mov	r0, r3
 800457a:	f7fe fcc9 	bl	8002f10 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2103      	movs	r1, #3
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fcad 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 800458a:	4603      	mov	r3, r0
 800458c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10a      	bne.n	80045aa <HAL_ADC_ConfigChannel+0x3aa>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2103      	movs	r1, #3
 800459a:	4618      	mov	r0, r3
 800459c:	f7fe fca2 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 80045a0:	4603      	mov	r3, r0
 80045a2:	0e9b      	lsrs	r3, r3, #26
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	e017      	b.n	80045da <HAL_ADC_ConfigChannel+0x3da>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2103      	movs	r1, #3
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fe fc97 	bl	8002ee4 <LL_ADC_GetOffsetChannel>
 80045b6:	4603      	mov	r3, r0
 80045b8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045bc:	fa93 f3a3 	rbit	r3, r3
 80045c0:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80045c2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045c4:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80045c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e003      	b.n	80045d8 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80045d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80045d2:	fab3 f383 	clz	r3, r3
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d105      	bne.n	80045f2 <HAL_ADC_ConfigChannel+0x3f2>
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	0e9b      	lsrs	r3, r3, #26
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	e011      	b.n	8004616 <HAL_ADC_ConfigChannel+0x416>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80045fa:	fa93 f3a3 	rbit	r3, r3
 80045fe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004600:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004602:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004604:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800460a:	2320      	movs	r3, #32
 800460c:	e003      	b.n	8004616 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800460e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004610:	fab3 f383 	clz	r3, r3
 8004614:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004616:	429a      	cmp	r2, r3
 8004618:	d106      	bne.n	8004628 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2200      	movs	r2, #0
 8004620:	2103      	movs	r1, #3
 8004622:	4618      	mov	r0, r3
 8004624:	f7fe fc74 	bl	8002f10 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4618      	mov	r0, r3
 800462e:	f7fe fe07 	bl	8003240 <LL_ADC_IsEnabled>
 8004632:	4603      	mov	r3, r0
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 813d 	bne.w	80048b4 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	461a      	mov	r2, r3
 8004648:	f7fe fd44 	bl	80030d4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4aa2      	ldr	r2, [pc, #648]	@ (80048dc <HAL_ADC_ConfigChannel+0x6dc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	f040 812e 	bne.w	80048b4 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10b      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x480>
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	0e9b      	lsrs	r3, r3, #26
 800466e:	3301      	adds	r3, #1
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	2b09      	cmp	r3, #9
 8004676:	bf94      	ite	ls
 8004678:	2301      	movls	r3, #1
 800467a:	2300      	movhi	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	e019      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x4b4>
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004688:	fa93 f3a3 	rbit	r3, r3
 800468c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800468e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004690:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004692:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004698:	2320      	movs	r3, #32
 800469a:	e003      	b.n	80046a4 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800469c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800469e:	fab3 f383 	clz	r3, r3
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	3301      	adds	r3, #1
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	2b09      	cmp	r3, #9
 80046ac:	bf94      	ite	ls
 80046ae:	2301      	movls	r3, #1
 80046b0:	2300      	movhi	r3, #0
 80046b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d079      	beq.n	80047ac <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d107      	bne.n	80046d4 <HAL_ADC_ConfigChannel+0x4d4>
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	0e9b      	lsrs	r3, r3, #26
 80046ca:	3301      	adds	r3, #1
 80046cc:	069b      	lsls	r3, r3, #26
 80046ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80046d2:	e015      	b.n	8004700 <HAL_ADC_ConfigChannel+0x500>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046dc:	fa93 f3a3 	rbit	r3, r3
 80046e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80046e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046e4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80046e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80046ec:	2320      	movs	r3, #32
 80046ee:	e003      	b.n	80046f8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80046f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046f2:	fab3 f383 	clz	r3, r3
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	3301      	adds	r3, #1
 80046fa:	069b      	lsls	r3, r3, #26
 80046fc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004708:	2b00      	cmp	r3, #0
 800470a:	d109      	bne.n	8004720 <HAL_ADC_ConfigChannel+0x520>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	0e9b      	lsrs	r3, r3, #26
 8004712:	3301      	adds	r3, #1
 8004714:	f003 031f 	and.w	r3, r3, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	e017      	b.n	8004750 <HAL_ADC_ConfigChannel+0x550>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004728:	fa93 f3a3 	rbit	r3, r3
 800472c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800472e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004730:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d101      	bne.n	800473c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004738:	2320      	movs	r3, #32
 800473a:	e003      	b.n	8004744 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800473c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	3301      	adds	r3, #1
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2101      	movs	r1, #1
 800474c:	fa01 f303 	lsl.w	r3, r1, r3
 8004750:	ea42 0103 	orr.w	r1, r2, r3
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10a      	bne.n	8004776 <HAL_ADC_ConfigChannel+0x576>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	0e9b      	lsrs	r3, r3, #26
 8004766:	3301      	adds	r3, #1
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	051b      	lsls	r3, r3, #20
 8004774:	e018      	b.n	80047a8 <HAL_ADC_ConfigChannel+0x5a8>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800477e:	fa93 f3a3 	rbit	r3, r3
 8004782:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004786:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800478a:	2b00      	cmp	r3, #0
 800478c:	d101      	bne.n	8004792 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800478e:	2320      	movs	r3, #32
 8004790:	e003      	b.n	800479a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	3301      	adds	r3, #1
 800479c:	f003 021f 	and.w	r2, r3, #31
 80047a0:	4613      	mov	r3, r2
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	4413      	add	r3, r2
 80047a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a8:	430b      	orrs	r3, r1
 80047aa:	e07e      	b.n	80048aa <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d107      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x5c8>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	3301      	adds	r3, #1
 80047c0:	069b      	lsls	r3, r3, #26
 80047c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047c6:	e015      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x5f4>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80047da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80047e0:	2320      	movs	r3, #32
 80047e2:	e003      	b.n	80047ec <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80047e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	069b      	lsls	r3, r3, #26
 80047f0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x614>
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	0e9b      	lsrs	r3, r3, #26
 8004806:	3301      	adds	r3, #1
 8004808:	f003 031f 	and.w	r3, r3, #31
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f303 	lsl.w	r3, r1, r3
 8004812:	e017      	b.n	8004844 <HAL_ADC_ConfigChannel+0x644>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800481a:	6a3b      	ldr	r3, [r7, #32]
 800481c:	fa93 f3a3 	rbit	r3, r3
 8004820:	61fb      	str	r3, [r7, #28]
  return result;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800482c:	2320      	movs	r3, #32
 800482e:	e003      	b.n	8004838 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	3301      	adds	r3, #1
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	2101      	movs	r1, #1
 8004840:	fa01 f303 	lsl.w	r3, r1, r3
 8004844:	ea42 0103 	orr.w	r1, r2, r3
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10d      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x670>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	3301      	adds	r3, #1
 800485c:	f003 021f 	and.w	r2, r3, #31
 8004860:	4613      	mov	r3, r2
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4413      	add	r3, r2
 8004866:	3b1e      	subs	r3, #30
 8004868:	051b      	lsls	r3, r3, #20
 800486a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800486e:	e01b      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x6a8>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	fa93 f3a3 	rbit	r3, r3
 800487c:	613b      	str	r3, [r7, #16]
  return result;
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004888:	2320      	movs	r3, #32
 800488a:	e003      	b.n	8004894 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	fab3 f383 	clz	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	3301      	adds	r3, #1
 8004896:	f003 021f 	and.w	r2, r3, #31
 800489a:	4613      	mov	r3, r2
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	4413      	add	r3, r2
 80048a0:	3b1e      	subs	r3, #30
 80048a2:	051b      	lsls	r3, r3, #20
 80048a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fe fbe4 	bl	800307c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4b09      	ldr	r3, [pc, #36]	@ (80048e0 <HAL_ADC_ConfigChannel+0x6e0>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80be 	beq.w	8004a3e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80048ca:	d004      	beq.n	80048d6 <HAL_ADC_ConfigChannel+0x6d6>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a04      	ldr	r2, [pc, #16]	@ (80048e4 <HAL_ADC_ConfigChannel+0x6e4>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d10a      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x6ec>
 80048d6:	4b04      	ldr	r3, [pc, #16]	@ (80048e8 <HAL_ADC_ConfigChannel+0x6e8>)
 80048d8:	e009      	b.n	80048ee <HAL_ADC_ConfigChannel+0x6ee>
 80048da:	bf00      	nop
 80048dc:	407f0000 	.word	0x407f0000
 80048e0:	80080000 	.word	0x80080000
 80048e4:	50000100 	.word	0x50000100
 80048e8:	50000300 	.word	0x50000300
 80048ec:	4b59      	ldr	r3, [pc, #356]	@ (8004a54 <HAL_ADC_ConfigChannel+0x854>)
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fac6 	bl	8002e80 <LL_ADC_GetCommonPathInternalCh>
 80048f4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a56      	ldr	r2, [pc, #344]	@ (8004a58 <HAL_ADC_ConfigChannel+0x858>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d004      	beq.n	800490c <HAL_ADC_ConfigChannel+0x70c>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a55      	ldr	r2, [pc, #340]	@ (8004a5c <HAL_ADC_ConfigChannel+0x85c>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d13a      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800490c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004910:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d134      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004920:	d005      	beq.n	800492e <HAL_ADC_ConfigChannel+0x72e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a4e      	ldr	r2, [pc, #312]	@ (8004a60 <HAL_ADC_ConfigChannel+0x860>)
 8004928:	4293      	cmp	r3, r2
 800492a:	f040 8085 	bne.w	8004a38 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004936:	d004      	beq.n	8004942 <HAL_ADC_ConfigChannel+0x742>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a49      	ldr	r2, [pc, #292]	@ (8004a64 <HAL_ADC_ConfigChannel+0x864>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d101      	bne.n	8004946 <HAL_ADC_ConfigChannel+0x746>
 8004942:	4a49      	ldr	r2, [pc, #292]	@ (8004a68 <HAL_ADC_ConfigChannel+0x868>)
 8004944:	e000      	b.n	8004948 <HAL_ADC_ConfigChannel+0x748>
 8004946:	4a43      	ldr	r2, [pc, #268]	@ (8004a54 <HAL_ADC_ConfigChannel+0x854>)
 8004948:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800494c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004950:	4619      	mov	r1, r3
 8004952:	4610      	mov	r0, r2
 8004954:	f7fe fa81 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004958:	4b44      	ldr	r3, [pc, #272]	@ (8004a6c <HAL_ADC_ConfigChannel+0x86c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	099b      	lsrs	r3, r3, #6
 800495e:	4a44      	ldr	r2, [pc, #272]	@ (8004a70 <HAL_ADC_ConfigChannel+0x870>)
 8004960:	fba2 2303 	umull	r2, r3, r2, r3
 8004964:	099b      	lsrs	r3, r3, #6
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	4613      	mov	r3, r2
 800496a:	005b      	lsls	r3, r3, #1
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004972:	e002      	b.n	800497a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	3b01      	subs	r3, #1
 8004978:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f9      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004980:	e05a      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a3b      	ldr	r2, [pc, #236]	@ (8004a74 <HAL_ADC_ConfigChannel+0x874>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d125      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800498c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004990:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d11f      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a31      	ldr	r2, [pc, #196]	@ (8004a64 <HAL_ADC_ConfigChannel+0x864>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d104      	bne.n	80049ac <HAL_ADC_ConfigChannel+0x7ac>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a34      	ldr	r2, [pc, #208]	@ (8004a78 <HAL_ADC_ConfigChannel+0x878>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d047      	beq.n	8004a3c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049b4:	d004      	beq.n	80049c0 <HAL_ADC_ConfigChannel+0x7c0>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <HAL_ADC_ConfigChannel+0x864>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d101      	bne.n	80049c4 <HAL_ADC_ConfigChannel+0x7c4>
 80049c0:	4a29      	ldr	r2, [pc, #164]	@ (8004a68 <HAL_ADC_ConfigChannel+0x868>)
 80049c2:	e000      	b.n	80049c6 <HAL_ADC_ConfigChannel+0x7c6>
 80049c4:	4a23      	ldr	r2, [pc, #140]	@ (8004a54 <HAL_ADC_ConfigChannel+0x854>)
 80049c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7fe fa42 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049d6:	e031      	b.n	8004a3c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a27      	ldr	r2, [pc, #156]	@ (8004a7c <HAL_ADC_ConfigChannel+0x87c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d12d      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d127      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004a64 <HAL_ADC_ConfigChannel+0x864>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d022      	beq.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a00:	d004      	beq.n	8004a0c <HAL_ADC_ConfigChannel+0x80c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <HAL_ADC_ConfigChannel+0x864>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x810>
 8004a0c:	4a16      	ldr	r2, [pc, #88]	@ (8004a68 <HAL_ADC_ConfigChannel+0x868>)
 8004a0e:	e000      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x812>
 8004a10:	4a10      	ldr	r2, [pc, #64]	@ (8004a54 <HAL_ADC_ConfigChannel+0x854>)
 8004a12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004a16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fe fa1c 	bl	8002e5a <LL_ADC_SetCommonPathInternalCh>
 8004a22:	e00c      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a28:	f043 0220 	orr.w	r2, r3, #32
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8004a36:	e002      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a38:	bf00      	nop
 8004a3a:	e000      	b.n	8004a3e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004a46:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	37d8      	adds	r7, #216	@ 0xd8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	50000700 	.word	0x50000700
 8004a58:	c3210000 	.word	0xc3210000
 8004a5c:	90c00010 	.word	0x90c00010
 8004a60:	50000600 	.word	0x50000600
 8004a64:	50000100 	.word	0x50000100
 8004a68:	50000300 	.word	0x50000300
 8004a6c:	2000000c 	.word	0x2000000c
 8004a70:	053e2d63 	.word	0x053e2d63
 8004a74:	c7520000 	.word	0xc7520000
 8004a78:	50000500 	.word	0x50000500
 8004a7c:	cb840000 	.word	0xcb840000

08004a80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fbd5 	bl	8003240 <LL_ADC_IsEnabled>
 8004a96:	4603      	mov	r3, r0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d176      	bne.n	8004b8a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	4b3c      	ldr	r3, [pc, #240]	@ (8004b94 <ADC_Enable+0x114>)
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00d      	beq.n	8004ac6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aae:	f043 0210 	orr.w	r2, r3, #16
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aba:	f043 0201 	orr.w	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e062      	b.n	8004b8c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fb90 	bl	80031f0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ad8:	d004      	beq.n	8004ae4 <ADC_Enable+0x64>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a2e      	ldr	r2, [pc, #184]	@ (8004b98 <ADC_Enable+0x118>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d101      	bne.n	8004ae8 <ADC_Enable+0x68>
 8004ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8004b9c <ADC_Enable+0x11c>)
 8004ae6:	e000      	b.n	8004aea <ADC_Enable+0x6a>
 8004ae8:	4b2d      	ldr	r3, [pc, #180]	@ (8004ba0 <ADC_Enable+0x120>)
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fe f9c8 	bl	8002e80 <LL_ADC_GetCommonPathInternalCh>
 8004af0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004af2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d013      	beq.n	8004b22 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004afa:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba4 <ADC_Enable+0x124>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	099b      	lsrs	r3, r3, #6
 8004b00:	4a29      	ldr	r2, [pc, #164]	@ (8004ba8 <ADC_Enable+0x128>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	099b      	lsrs	r3, r3, #6
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b14:	e002      	b.n	8004b1c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1f9      	bne.n	8004b16 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004b22:	f7fe f959 	bl	8002dd8 <HAL_GetTick>
 8004b26:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b28:	e028      	b.n	8004b7c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fb86 	bl	8003240 <LL_ADC_IsEnabled>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7fe fb56 	bl	80031f0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b44:	f7fe f948 	bl	8002dd8 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d914      	bls.n	8004b7c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d00d      	beq.n	8004b7c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f043 0210 	orr.w	r2, r3, #16
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e007      	b.n	8004b8c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d1cf      	bne.n	8004b2a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b8a:	2300      	movs	r3, #0
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	8000003f 	.word	0x8000003f
 8004b98:	50000100 	.word	0x50000100
 8004b9c:	50000300 	.word	0x50000300
 8004ba0:	50000700 	.word	0x50000700
 8004ba4:	2000000c 	.word	0x2000000c
 8004ba8:	053e2d63 	.word	0x053e2d63

08004bac <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f7fe fb54 	bl	8003266 <LL_ADC_IsDisableOngoing>
 8004bbe:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f7fe fb3b 	bl	8003240 <LL_ADC_IsEnabled>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d047      	beq.n	8004c60 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d144      	bne.n	8004c60 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f003 030d 	and.w	r3, r3, #13
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d10c      	bne.n	8004bfe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fb15 	bl	8003218 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2203      	movs	r2, #3
 8004bf4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bf6:	f7fe f8ef 	bl	8002dd8 <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bfc:	e029      	b.n	8004c52 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c02:	f043 0210 	orr.w	r2, r3, #16
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c0e:	f043 0201 	orr.w	r2, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e023      	b.n	8004c62 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c1a:	f7fe f8dd 	bl	8002dd8 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d914      	bls.n	8004c52 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c3a:	f043 0210 	orr.w	r2, r3, #16
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c46:	f043 0201 	orr.w	r2, r3, #1
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e007      	b.n	8004c62 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1dc      	bne.n	8004c1a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <LL_ADC_IsEnabled>:
{
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <LL_ADC_IsEnabled+0x18>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <LL_ADC_IsEnabled+0x1a>
 8004c82:	2300      	movs	r3, #0
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_ADC_StartCalibration>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004ca2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004cac:	4313      	orrs	r3, r2
 8004cae:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr

08004cc2 <LL_ADC_IsCalibrationOnGoing>:
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	b083      	sub	sp, #12
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004cd6:	d101      	bne.n	8004cdc <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e000      	b.n	8004cde <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <LL_ADC_REG_IsConversionOngoing>:
{
 8004cea:	b480      	push	{r7}
 8004cec:	b083      	sub	sp, #12
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0304 	and.w	r3, r3, #4
 8004cfa:	2b04      	cmp	r3, #4
 8004cfc:	d101      	bne.n	8004d02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e000      	b.n	8004d04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004d02:	2300      	movs	r3, #0
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_ADCEx_Calibration_Start+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e04d      	b.n	8004dc8 <HAL_ADCEx_Calibration_Start+0xb8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff39 	bl	8004bac <ADC_Disable>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004d3e:	7bfb      	ldrb	r3, [r7, #15]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d136      	bne.n	8004db2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d48:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8004d4c:	f023 0302 	bic.w	r3, r3, #2
 8004d50:	f043 0202 	orr.w	r2, r3, #2
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7ff ff96 	bl	8004c90 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d64:	e014      	b.n	8004d90 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d90d      	bls.n	8004d90 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d78:	f023 0312 	bic.w	r3, r3, #18
 8004d7c:	f043 0210 	orr.w	r2, r3, #16
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e01b      	b.n	8004dc8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff ff94 	bl	8004cc2 <LL_ADC_IsCalibrationOnGoing>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e2      	bne.n	8004d66 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da4:	f023 0303 	bic.w	r3, r3, #3
 8004da8:	f043 0201 	orr.w	r2, r3, #1
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004db0:	e005      	b.n	8004dbe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db6:	f043 0210 	orr.w	r2, r3, #16
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	0004de01 	.word	0x0004de01

08004dd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004e04:	bf00      	nop
 8004e06:	370c      	adds	r7, #12
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b083      	sub	sp, #12
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004e18:	bf00      	nop
 8004e1a:	370c      	adds	r7, #12
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004e38:	b590      	push	{r4, r7, lr}
 8004e3a:	b0a1      	sub	sp, #132	@ 0x84
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d101      	bne.n	8004e56 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004e52:	2302      	movs	r3, #2
 8004e54:	e0e7      	b.n	8005026 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004e5e:	2300      	movs	r3, #0
 8004e60:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004e62:	2300      	movs	r3, #0
 8004e64:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e6e:	d102      	bne.n	8004e76 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004e70:	4b6f      	ldr	r3, [pc, #444]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004e72:	60bb      	str	r3, [r7, #8]
 8004e74:	e009      	b.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a6e      	ldr	r2, [pc, #440]	@ (8005034 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d102      	bne.n	8004e86 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004e80:	4b6d      	ldr	r3, [pc, #436]	@ (8005038 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	e001      	b.n	8004e8a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e94:	f043 0220 	orr.w	r2, r3, #32
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e0be      	b.n	8005026 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff ff1d 	bl	8004cea <LL_ADC_REG_IsConversionOngoing>
 8004eb0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff17 	bl	8004cea <LL_ADC_REG_IsConversionOngoing>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	f040 80a0 	bne.w	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 809c 	bne.w	8005004 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ed4:	d004      	beq.n	8004ee0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a55      	ldr	r2, [pc, #340]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d101      	bne.n	8004ee4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004ee0:	4b56      	ldr	r3, [pc, #344]	@ (800503c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004ee2:	e000      	b.n	8004ee6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004ee4:	4b56      	ldr	r3, [pc, #344]	@ (8005040 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004ee6:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d04b      	beq.n	8004f88 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004ef0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	6859      	ldr	r1, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004f02:	035b      	lsls	r3, r3, #13
 8004f04:	430b      	orrs	r3, r1
 8004f06:	431a      	orrs	r2, r3
 8004f08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f0a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f14:	d004      	beq.n	8004f20 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a45      	ldr	r2, [pc, #276]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10f      	bne.n	8004f40 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004f20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004f24:	f7ff fea1 	bl	8004c6a <LL_ADC_IsEnabled>
 8004f28:	4604      	mov	r4, r0
 8004f2a:	4841      	ldr	r0, [pc, #260]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004f2c:	f7ff fe9d 	bl	8004c6a <LL_ADC_IsEnabled>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4323      	orrs	r3, r4
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e012      	b.n	8004f66 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004f40:	483c      	ldr	r0, [pc, #240]	@ (8005034 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004f42:	f7ff fe92 	bl	8004c6a <LL_ADC_IsEnabled>
 8004f46:	4604      	mov	r4, r0
 8004f48:	483b      	ldr	r0, [pc, #236]	@ (8005038 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004f4a:	f7ff fe8e 	bl	8004c6a <LL_ADC_IsEnabled>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	431c      	orrs	r4, r3
 8004f52:	483c      	ldr	r0, [pc, #240]	@ (8005044 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004f54:	f7ff fe89 	bl	8004c6a <LL_ADC_IsEnabled>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	4323      	orrs	r3, r4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d056      	beq.n	8005018 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004f6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004f72:	f023 030f 	bic.w	r3, r3, #15
 8004f76:	683a      	ldr	r2, [r7, #0]
 8004f78:	6811      	ldr	r1, [r2, #0]
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	6892      	ldr	r2, [r2, #8]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f84:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004f86:	e047      	b.n	8005018 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004f88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f90:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f9c:	d004      	beq.n	8004fa8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a23      	ldr	r2, [pc, #140]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d10f      	bne.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004fa8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004fac:	f7ff fe5d 	bl	8004c6a <LL_ADC_IsEnabled>
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	481f      	ldr	r0, [pc, #124]	@ (8005030 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004fb4:	f7ff fe59 	bl	8004c6a <LL_ADC_IsEnabled>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	4323      	orrs	r3, r4
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf0c      	ite	eq
 8004fc0:	2301      	moveq	r3, #1
 8004fc2:	2300      	movne	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	e012      	b.n	8004fee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004fc8:	481a      	ldr	r0, [pc, #104]	@ (8005034 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004fca:	f7ff fe4e 	bl	8004c6a <LL_ADC_IsEnabled>
 8004fce:	4604      	mov	r4, r0
 8004fd0:	4819      	ldr	r0, [pc, #100]	@ (8005038 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004fd2:	f7ff fe4a 	bl	8004c6a <LL_ADC_IsEnabled>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	431c      	orrs	r4, r3
 8004fda:	481a      	ldr	r0, [pc, #104]	@ (8005044 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004fdc:	f7ff fe45 	bl	8004c6a <LL_ADC_IsEnabled>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	4323      	orrs	r3, r4
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf0c      	ite	eq
 8004fe8:	2301      	moveq	r3, #1
 8004fea:	2300      	movne	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004ff2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ffa:	f023 030f 	bic.w	r3, r3, #15
 8004ffe:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005000:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005002:	e009      	b.n	8005018 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005008:	f043 0220 	orr.w	r2, r3, #32
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8005016:	e000      	b.n	800501a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005018:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8005022:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8005026:	4618      	mov	r0, r3
 8005028:	3784      	adds	r7, #132	@ 0x84
 800502a:	46bd      	mov	sp, r7
 800502c:	bd90      	pop	{r4, r7, pc}
 800502e:	bf00      	nop
 8005030:	50000100 	.word	0x50000100
 8005034:	50000400 	.word	0x50000400
 8005038:	50000500 	.word	0x50000500
 800503c:	50000300 	.word	0x50000300
 8005040:	50000700 	.word	0x50000700
 8005044:	50000600 	.word	0x50000600

08005048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f003 0307 	and.w	r3, r3, #7
 8005056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005058:	4b0c      	ldr	r3, [pc, #48]	@ (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005064:	4013      	ands	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005070:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005074:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005078:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800507a:	4a04      	ldr	r2, [pc, #16]	@ (800508c <__NVIC_SetPriorityGrouping+0x44>)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	60d3      	str	r3, [r2, #12]
}
 8005080:	bf00      	nop
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr
 800508c:	e000ed00 	.word	0xe000ed00

08005090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005090:	b480      	push	{r7}
 8005092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005094:	4b04      	ldr	r3, [pc, #16]	@ (80050a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f003 0307 	and.w	r3, r3, #7
}
 800509e:	4618      	mov	r0, r3
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	e000ed00 	.word	0xe000ed00

080050ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	4603      	mov	r3, r0
 80050b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	db0b      	blt.n	80050d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80050be:	79fb      	ldrb	r3, [r7, #7]
 80050c0:	f003 021f 	and.w	r2, r3, #31
 80050c4:	4907      	ldr	r1, [pc, #28]	@ (80050e4 <__NVIC_EnableIRQ+0x38>)
 80050c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050ca:	095b      	lsrs	r3, r3, #5
 80050cc:	2001      	movs	r0, #1
 80050ce:	fa00 f202 	lsl.w	r2, r0, r2
 80050d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80050d6:	bf00      	nop
 80050d8:	370c      	adds	r7, #12
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr
 80050e2:	bf00      	nop
 80050e4:	e000e100 	.word	0xe000e100

080050e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4603      	mov	r3, r0
 80050f0:	6039      	str	r1, [r7, #0]
 80050f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	db0a      	blt.n	8005112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	490c      	ldr	r1, [pc, #48]	@ (8005134 <__NVIC_SetPriority+0x4c>)
 8005102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005106:	0112      	lsls	r2, r2, #4
 8005108:	b2d2      	uxtb	r2, r2
 800510a:	440b      	add	r3, r1
 800510c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005110:	e00a      	b.n	8005128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	b2da      	uxtb	r2, r3
 8005116:	4908      	ldr	r1, [pc, #32]	@ (8005138 <__NVIC_SetPriority+0x50>)
 8005118:	79fb      	ldrb	r3, [r7, #7]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	3b04      	subs	r3, #4
 8005120:	0112      	lsls	r2, r2, #4
 8005122:	b2d2      	uxtb	r2, r2
 8005124:	440b      	add	r3, r1
 8005126:	761a      	strb	r2, [r3, #24]
}
 8005128:	bf00      	nop
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr
 8005134:	e000e100 	.word	0xe000e100
 8005138:	e000ed00 	.word	0xe000ed00

0800513c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800513c:	b480      	push	{r7}
 800513e:	b089      	sub	sp, #36	@ 0x24
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f1c3 0307 	rsb	r3, r3, #7
 8005156:	2b04      	cmp	r3, #4
 8005158:	bf28      	it	cs
 800515a:	2304      	movcs	r3, #4
 800515c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	3304      	adds	r3, #4
 8005162:	2b06      	cmp	r3, #6
 8005164:	d902      	bls.n	800516c <NVIC_EncodePriority+0x30>
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	3b03      	subs	r3, #3
 800516a:	e000      	b.n	800516e <NVIC_EncodePriority+0x32>
 800516c:	2300      	movs	r3, #0
 800516e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005170:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	43da      	mvns	r2, r3
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	401a      	ands	r2, r3
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005184:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	fa01 f303 	lsl.w	r3, r1, r3
 800518e:	43d9      	mvns	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005194:	4313      	orrs	r3, r2
         );
}
 8005196:	4618      	mov	r0, r3
 8005198:	3724      	adds	r7, #36	@ 0x24
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	3b01      	subs	r3, #1
 80051b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051b4:	d301      	bcc.n	80051ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80051b6:	2301      	movs	r3, #1
 80051b8:	e00f      	b.n	80051da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80051ba:	4a0a      	ldr	r2, [pc, #40]	@ (80051e4 <SysTick_Config+0x40>)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051c2:	210f      	movs	r1, #15
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051c8:	f7ff ff8e 	bl	80050e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <SysTick_Config+0x40>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051d2:	4b04      	ldr	r3, [pc, #16]	@ (80051e4 <SysTick_Config+0x40>)
 80051d4:	2207      	movs	r2, #7
 80051d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	e000e010 	.word	0xe000e010

080051e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ff29 	bl	8005048 <__NVIC_SetPriorityGrouping>
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b086      	sub	sp, #24
 8005202:	af00      	add	r7, sp, #0
 8005204:	4603      	mov	r3, r0
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800520c:	f7ff ff40 	bl	8005090 <__NVIC_GetPriorityGrouping>
 8005210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6978      	ldr	r0, [r7, #20]
 8005218:	f7ff ff90 	bl	800513c <NVIC_EncodePriority>
 800521c:	4602      	mov	r2, r0
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff5f 	bl	80050e8 <__NVIC_SetPriority>
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	4603      	mov	r3, r0
 800523a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800523c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff ff33 	bl	80050ac <__NVIC_EnableIRQ>
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff ffa4 	bl	80051a4 <SysTick_Config>
 800525c:	4603      	mov	r3, r0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e147      	b.n	800550a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fd f928 	bl	80024e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f022 0210 	bic.w	r2, r2, #16
 80052a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052a4:	f7fd fd98 	bl	8002dd8 <HAL_GetTick>
 80052a8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052aa:	e012      	b.n	80052d2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052ac:	f7fd fd94 	bl	8002dd8 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b0a      	cmp	r3, #10
 80052b8:	d90b      	bls.n	80052d2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80052be:	f043 0201 	orr.w	r2, r3, #1
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2203      	movs	r2, #3
 80052ca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	e11b      	b.n	800550a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d0e5      	beq.n	80052ac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699a      	ldr	r2, [r3, #24]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052f0:	f7fd fd72 	bl	8002dd8 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80052f6:	e012      	b.n	800531e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80052f8:	f7fd fd6e 	bl	8002dd8 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b0a      	cmp	r3, #10
 8005304:	d90b      	bls.n	800531e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800530a:	f043 0201 	orr.w	r2, r3, #1
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2203      	movs	r2, #3
 8005316:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e0f5      	b.n	800550a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0e5      	beq.n	80052f8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	699a      	ldr	r2, [r3, #24]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f042 0202 	orr.w	r2, r2, #2
 800533a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a74      	ldr	r2, [pc, #464]	@ (8005514 <HAL_FDCAN_Init+0x2ac>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d103      	bne.n	800534e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005346:	4a74      	ldr	r2, [pc, #464]	@ (8005518 <HAL_FDCAN_Init+0x2b0>)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	7c1b      	ldrb	r3, [r3, #16]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d108      	bne.n	8005368 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	699a      	ldr	r2, [r3, #24]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005364:	619a      	str	r2, [r3, #24]
 8005366:	e007      	b.n	8005378 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005376:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	7c5b      	ldrb	r3, [r3, #17]
 800537c:	2b01      	cmp	r3, #1
 800537e:	d108      	bne.n	8005392 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800538e:	619a      	str	r2, [r3, #24]
 8005390:	e007      	b.n	80053a2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699a      	ldr	r2, [r3, #24]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80053a0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7c9b      	ldrb	r3, [r3, #18]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d108      	bne.n	80053bc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80053b8:	619a      	str	r2, [r3, #24]
 80053ba:	e007      	b.n	80053cc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699a      	ldr	r2, [r3, #24]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80053ca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689a      	ldr	r2, [r3, #8]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80053f0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691a      	ldr	r2, [r3, #16]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0210 	bic.w	r2, r2, #16
 8005400:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d108      	bne.n	800541c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	699a      	ldr	r2, [r3, #24]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 0204 	orr.w	r2, r2, #4
 8005418:	619a      	str	r2, [r3, #24]
 800541a:	e02c      	b.n	8005476 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68db      	ldr	r3, [r3, #12]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d028      	beq.n	8005476 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b02      	cmp	r3, #2
 800542a:	d01c      	beq.n	8005466 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	699a      	ldr	r2, [r3, #24]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800543a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f042 0210 	orr.w	r2, r2, #16
 800544a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	2b03      	cmp	r3, #3
 8005452:	d110      	bne.n	8005476 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0220 	orr.w	r2, r2, #32
 8005462:	619a      	str	r2, [r3, #24]
 8005464:	e007      	b.n	8005476 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f042 0220 	orr.w	r2, r2, #32
 8005474:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	699b      	ldr	r3, [r3, #24]
 800547a:	3b01      	subs	r3, #1
 800547c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	3b01      	subs	r3, #1
 8005484:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005486:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6a1b      	ldr	r3, [r3, #32]
 800548c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800548e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	695b      	ldr	r3, [r3, #20]
 8005496:	3b01      	subs	r3, #1
 8005498:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800549e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80054a0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054aa:	d115      	bne.n	80054d8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054b0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b6:	3b01      	subs	r3, #1
 80054b8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054ba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054c0:	3b01      	subs	r3, #1
 80054c2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80054c4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	3b01      	subs	r3, #1
 80054ce:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80054d4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80054d6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f814 	bl	800551c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3710      	adds	r7, #16
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	40006400 	.word	0x40006400
 8005518:	40006500 	.word	0x40006500

0800551c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005524:	4b30      	ldr	r3, [pc, #192]	@ (80055e8 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8005526:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a2f      	ldr	r2, [pc, #188]	@ (80055ec <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d103      	bne.n	800553a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8005538:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a2c      	ldr	r2, [pc, #176]	@ (80055f0 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d103      	bne.n	800554c <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 800554a:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555a:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005562:	041a      	lsls	r2, r3, #16
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	430a      	orrs	r2, r1
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005580:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005588:	061a      	lsls	r2, r3, #24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e005      	b.n	80055ce <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	3304      	adds	r3, #4
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d3f3      	bcc.n	80055c2 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	3714      	adds	r7, #20
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	4000a400 	.word	0x4000a400
 80055ec:	40006800 	.word	0x40006800
 80055f0:	40006c00 	.word	0x40006c00

080055f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b087      	sub	sp, #28
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005602:	e15a      	b.n	80058ba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	2101      	movs	r1, #1
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	fa01 f303 	lsl.w	r3, r1, r3
 8005610:	4013      	ands	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 814c 	beq.w	80058b4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f003 0303 	and.w	r3, r3, #3
 8005624:	2b01      	cmp	r3, #1
 8005626:	d005      	beq.n	8005634 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005630:	2b02      	cmp	r3, #2
 8005632:	d130      	bne.n	8005696 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	2203      	movs	r2, #3
 8005640:	fa02 f303 	lsl.w	r3, r2, r3
 8005644:	43db      	mvns	r3, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4013      	ands	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	68da      	ldr	r2, [r3, #12]
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800566a:	2201      	movs	r2, #1
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	4013      	ands	r3, r2
 8005678:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	091b      	lsrs	r3, r3, #4
 8005680:	f003 0201 	and.w	r2, r3, #1
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	693a      	ldr	r2, [r7, #16]
 800568c:	4313      	orrs	r3, r2
 800568e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 0303 	and.w	r3, r3, #3
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d017      	beq.n	80056d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	2203      	movs	r2, #3
 80056ae:	fa02 f303 	lsl.w	r3, r2, r3
 80056b2:	43db      	mvns	r3, r3
 80056b4:	693a      	ldr	r2, [r7, #16]
 80056b6:	4013      	ands	r3, r2
 80056b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	689a      	ldr	r2, [r3, #8]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	fa02 f303 	lsl.w	r3, r2, r3
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	f003 0303 	and.w	r3, r3, #3
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d123      	bne.n	8005726 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	08da      	lsrs	r2, r3, #3
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	3208      	adds	r2, #8
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	f003 0307 	and.w	r3, r3, #7
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	220f      	movs	r2, #15
 80056f6:	fa02 f303 	lsl.w	r3, r2, r3
 80056fa:	43db      	mvns	r3, r3
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4013      	ands	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	691a      	ldr	r2, [r3, #16]
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	fa02 f303 	lsl.w	r3, r2, r3
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	08da      	lsrs	r2, r3, #3
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3208      	adds	r2, #8
 8005720:	6939      	ldr	r1, [r7, #16]
 8005722:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	2203      	movs	r2, #3
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43db      	mvns	r3, r3
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	4013      	ands	r3, r2
 800573c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0203 	and.w	r2, r3, #3
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	005b      	lsls	r3, r3, #1
 800574a:	fa02 f303 	lsl.w	r3, r2, r3
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	4313      	orrs	r3, r2
 8005752:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 80a6 	beq.w	80058b4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005768:	4b5b      	ldr	r3, [pc, #364]	@ (80058d8 <HAL_GPIO_Init+0x2e4>)
 800576a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800576c:	4a5a      	ldr	r2, [pc, #360]	@ (80058d8 <HAL_GPIO_Init+0x2e4>)
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	6613      	str	r3, [r2, #96]	@ 0x60
 8005774:	4b58      	ldr	r3, [pc, #352]	@ (80058d8 <HAL_GPIO_Init+0x2e4>)
 8005776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005780:	4a56      	ldr	r2, [pc, #344]	@ (80058dc <HAL_GPIO_Init+0x2e8>)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	089b      	lsrs	r3, r3, #2
 8005786:	3302      	adds	r3, #2
 8005788:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800578c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	f003 0303 	and.w	r3, r3, #3
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	220f      	movs	r2, #15
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	4013      	ands	r3, r2
 80057a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80057aa:	d01f      	beq.n	80057ec <HAL_GPIO_Init+0x1f8>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a4c      	ldr	r2, [pc, #304]	@ (80058e0 <HAL_GPIO_Init+0x2ec>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d019      	beq.n	80057e8 <HAL_GPIO_Init+0x1f4>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a4b      	ldr	r2, [pc, #300]	@ (80058e4 <HAL_GPIO_Init+0x2f0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d013      	beq.n	80057e4 <HAL_GPIO_Init+0x1f0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a4a      	ldr	r2, [pc, #296]	@ (80058e8 <HAL_GPIO_Init+0x2f4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00d      	beq.n	80057e0 <HAL_GPIO_Init+0x1ec>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a49      	ldr	r2, [pc, #292]	@ (80058ec <HAL_GPIO_Init+0x2f8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d007      	beq.n	80057dc <HAL_GPIO_Init+0x1e8>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a48      	ldr	r2, [pc, #288]	@ (80058f0 <HAL_GPIO_Init+0x2fc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d101      	bne.n	80057d8 <HAL_GPIO_Init+0x1e4>
 80057d4:	2305      	movs	r3, #5
 80057d6:	e00a      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057d8:	2306      	movs	r3, #6
 80057da:	e008      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057dc:	2304      	movs	r3, #4
 80057de:	e006      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e0:	2303      	movs	r3, #3
 80057e2:	e004      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e4:	2302      	movs	r3, #2
 80057e6:	e002      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e000      	b.n	80057ee <HAL_GPIO_Init+0x1fa>
 80057ec:	2300      	movs	r3, #0
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	f002 0203 	and.w	r2, r2, #3
 80057f4:	0092      	lsls	r2, r2, #2
 80057f6:	4093      	lsls	r3, r2
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057fe:	4937      	ldr	r1, [pc, #220]	@ (80058dc <HAL_GPIO_Init+0x2e8>)
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	089b      	lsrs	r3, r3, #2
 8005804:	3302      	adds	r3, #2
 8005806:	693a      	ldr	r2, [r7, #16]
 8005808:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800580c:	4b39      	ldr	r3, [pc, #228]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	43db      	mvns	r3, r3
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4013      	ands	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005830:	4a30      	ldr	r2, [pc, #192]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005836:	4b2f      	ldr	r3, [pc, #188]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 8005838:	68db      	ldr	r3, [r3, #12]
 800583a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	43db      	mvns	r3, r3
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	4013      	ands	r3, r2
 8005844:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800585a:	4a26      	ldr	r2, [pc, #152]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005860:	4b24      	ldr	r3, [pc, #144]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	43db      	mvns	r3, r3
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4013      	ands	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005878:	2b00      	cmp	r3, #0
 800587a:	d003      	beq.n	8005884 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4313      	orrs	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005884:	4a1b      	ldr	r2, [pc, #108]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800588a:	4b1a      	ldr	r3, [pc, #104]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	43db      	mvns	r3, r3
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4013      	ands	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80058ae:	4a11      	ldr	r2, [pc, #68]	@ (80058f4 <HAL_GPIO_Init+0x300>)
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	3301      	adds	r3, #1
 80058b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	fa22 f303 	lsr.w	r3, r2, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f ae9d 	bne.w	8005604 <HAL_GPIO_Init+0x10>
  }
}
 80058ca:	bf00      	nop
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40021000 	.word	0x40021000
 80058dc:	40010000 	.word	0x40010000
 80058e0:	48000400 	.word	0x48000400
 80058e4:	48000800 	.word	0x48000800
 80058e8:	48000c00 	.word	0x48000c00
 80058ec:	48001000 	.word	0x48001000
 80058f0:	48001400 	.word	0x48001400
 80058f4:	40010400 	.word	0x40010400

080058f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691a      	ldr	r2, [r3, #16]
 8005908:	887b      	ldrh	r3, [r7, #2]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e001      	b.n	800591a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005916:	2300      	movs	r3, #0
 8005918:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e08d      	b.n	8005a56 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b00      	cmp	r3, #0
 8005944:	d106      	bne.n	8005954 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f7fc fe22 	bl	8002598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2224      	movs	r2, #36	@ 0x24
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f022 0201 	bic.w	r2, r2, #1
 800596a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005978:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689a      	ldr	r2, [r3, #8]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005988:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d107      	bne.n	80059a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599e:	609a      	str	r2, [r3, #8]
 80059a0:	e006      	b.n	80059b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80059ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d108      	bne.n	80059ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059c6:	605a      	str	r2, [r3, #4]
 80059c8:	e007      	b.n	80059da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	685a      	ldr	r2, [r3, #4]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6812      	ldr	r2, [r2, #0]
 80059e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80059e8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	68da      	ldr	r2, [r3, #12]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80059fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691a      	ldr	r2, [r3, #16]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	695b      	ldr	r3, [r3, #20]
 8005a06:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	69d9      	ldr	r1, [r3, #28]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a1a      	ldr	r2, [r3, #32]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3708      	adds	r7, #8
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}

08005a5e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	b083      	sub	sp, #12
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	2b20      	cmp	r3, #32
 8005a72:	d138      	bne.n	8005ae6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d101      	bne.n	8005a82 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	e032      	b.n	8005ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2224      	movs	r2, #36	@ 0x24
 8005a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f022 0201 	bic.w	r2, r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681a      	ldr	r2, [r3, #0]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005ab0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6819      	ldr	r1, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f042 0201 	orr.w	r2, r2, #1
 8005ad0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	e000      	b.n	8005ae8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
  }
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b085      	sub	sp, #20
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b20      	cmp	r3, #32
 8005b08:	d139      	bne.n	8005b7e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e033      	b.n	8005b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2224      	movs	r2, #36	@ 0x24
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f022 0201 	bic.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b46:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	021b      	lsls	r3, r3, #8
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f042 0201 	orr.w	r2, r2, #1
 8005b68:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	e000      	b.n	8005b80 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005b7e:	2302      	movs	r3, #2
  }
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3714      	adds	r7, #20
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d141      	bne.n	8005c1e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005b9a:	4b4b      	ldr	r3, [pc, #300]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005ba2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ba6:	d131      	bne.n	8005c0c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ba8:	4b47      	ldr	r3, [pc, #284]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005baa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bae:	4a46      	ldr	r2, [pc, #280]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bb0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005bb8:	4b43      	ldr	r3, [pc, #268]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005bc0:	4a41      	ldr	r2, [pc, #260]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005bc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005bc8:	4b40      	ldr	r3, [pc, #256]	@ (8005ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2232      	movs	r2, #50	@ 0x32
 8005bce:	fb02 f303 	mul.w	r3, r2, r3
 8005bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	0c9b      	lsrs	r3, r3, #18
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005bde:	e002      	b.n	8005be6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005be6:	4b38      	ldr	r3, [pc, #224]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005bf2:	d102      	bne.n	8005bfa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f2      	bne.n	8005be0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005bfa:	4b33      	ldr	r3, [pc, #204]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c06:	d158      	bne.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c08:	2303      	movs	r3, #3
 8005c0a:	e057      	b.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c0c:	4b2e      	ldr	r3, [pc, #184]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c12:	4a2d      	ldr	r2, [pc, #180]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005c1c:	e04d      	b.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c24:	d141      	bne.n	8005caa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005c26:	4b28      	ldr	r3, [pc, #160]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c32:	d131      	bne.n	8005c98 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c34:	4b24      	ldr	r3, [pc, #144]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c3a:	4a23      	ldr	r2, [pc, #140]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c44:	4b20      	ldr	r3, [pc, #128]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005c54:	4b1d      	ldr	r3, [pc, #116]	@ (8005ccc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2232      	movs	r2, #50	@ 0x32
 8005c5a:	fb02 f303 	mul.w	r3, r2, r3
 8005c5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005cd0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005c60:	fba2 2303 	umull	r2, r3, r2, r3
 8005c64:	0c9b      	lsrs	r3, r3, #18
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c6a:	e002      	b.n	8005c72 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005c72:	4b15      	ldr	r3, [pc, #84]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c7e:	d102      	bne.n	8005c86 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1f2      	bne.n	8005c6c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005c86:	4b10      	ldr	r3, [pc, #64]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c92:	d112      	bne.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e011      	b.n	8005cbc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005c98:	4b0b      	ldr	r3, [pc, #44]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005ca8:	e007      	b.n	8005cba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005caa:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005cb2:	4a05      	ldr	r2, [pc, #20]	@ (8005cc8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005cb4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005cb8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005cba:	2300      	movs	r3, #0
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3714      	adds	r7, #20
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr
 8005cc8:	40007000 	.word	0x40007000
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	431bde83 	.word	0x431bde83

08005cd4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005cd8:	4b05      	ldr	r3, [pc, #20]	@ (8005cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	4a04      	ldr	r2, [pc, #16]	@ (8005cf0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ce2:	6093      	str	r3, [r2, #8]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40007000 	.word	0x40007000

08005cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b088      	sub	sp, #32
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e2fe      	b.n	8006304 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d075      	beq.n	8005dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d12:	4b97      	ldr	r3, [pc, #604]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 030c 	and.w	r3, r3, #12
 8005d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005d1c:	4b94      	ldr	r3, [pc, #592]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	f003 0303 	and.w	r3, r3, #3
 8005d24:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	2b0c      	cmp	r3, #12
 8005d2a:	d102      	bne.n	8005d32 <HAL_RCC_OscConfig+0x3e>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b03      	cmp	r3, #3
 8005d30:	d002      	beq.n	8005d38 <HAL_RCC_OscConfig+0x44>
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d10b      	bne.n	8005d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d38:	4b8d      	ldr	r3, [pc, #564]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d05b      	beq.n	8005dfc <HAL_RCC_OscConfig+0x108>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d157      	bne.n	8005dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e2d9      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d58:	d106      	bne.n	8005d68 <HAL_RCC_OscConfig+0x74>
 8005d5a:	4b85      	ldr	r3, [pc, #532]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a84      	ldr	r2, [pc, #528]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	e01d      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d70:	d10c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x98>
 8005d72:	4b7f      	ldr	r3, [pc, #508]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a7e      	ldr	r2, [pc, #504]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4b7c      	ldr	r3, [pc, #496]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a7b      	ldr	r2, [pc, #492]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e00b      	b.n	8005da4 <HAL_RCC_OscConfig+0xb0>
 8005d8c:	4b78      	ldr	r3, [pc, #480]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a77      	ldr	r2, [pc, #476]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	4b75      	ldr	r3, [pc, #468]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a74      	ldr	r2, [pc, #464]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	685b      	ldr	r3, [r3, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d013      	beq.n	8005dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fd f814 	bl	8002dd8 <HAL_GetTick>
 8005db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005db2:	e008      	b.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005db4:	f7fd f810 	bl	8002dd8 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	2b64      	cmp	r3, #100	@ 0x64
 8005dc0:	d901      	bls.n	8005dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dc2:	2303      	movs	r3, #3
 8005dc4:	e29e      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005dc6:	4b6a      	ldr	r3, [pc, #424]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d0f0      	beq.n	8005db4 <HAL_RCC_OscConfig+0xc0>
 8005dd2:	e014      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd4:	f7fd f800 	bl	8002dd8 <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ddc:	f7fc fffc 	bl	8002dd8 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b64      	cmp	r3, #100	@ 0x64
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e28a      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005dee:	4b60      	ldr	r3, [pc, #384]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0xe8>
 8005dfa:	e000      	b.n	8005dfe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d075      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e0a:	4b59      	ldr	r3, [pc, #356]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f003 030c 	and.w	r3, r3, #12
 8005e12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e14:	4b56      	ldr	r3, [pc, #344]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	f003 0303 	and.w	r3, r3, #3
 8005e1c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	2b0c      	cmp	r3, #12
 8005e22:	d102      	bne.n	8005e2a <HAL_RCC_OscConfig+0x136>
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d002      	beq.n	8005e30 <HAL_RCC_OscConfig+0x13c>
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d11f      	bne.n	8005e70 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e30:	4b4f      	ldr	r3, [pc, #316]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_RCC_OscConfig+0x154>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e25d      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e48:	4b49      	ldr	r3, [pc, #292]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	061b      	lsls	r3, r3, #24
 8005e56:	4946      	ldr	r1, [pc, #280]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005e5c:	4b45      	ldr	r3, [pc, #276]	@ (8005f74 <HAL_RCC_OscConfig+0x280>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fc ff6d 	bl	8002d40 <HAL_InitTick>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d043      	beq.n	8005ef4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	e249      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d023      	beq.n	8005ec0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b3d      	ldr	r3, [pc, #244]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005e7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e84:	f7fc ffa8 	bl	8002dd8 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e8c:	f7fc ffa4 	bl	8002dd8 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e232      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005e9e:	4b34      	ldr	r3, [pc, #208]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0f0      	beq.n	8005e8c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eaa:	4b31      	ldr	r3, [pc, #196]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	492d      	ldr	r1, [pc, #180]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	604b      	str	r3, [r1, #4]
 8005ebe:	e01a      	b.n	8005ef6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ec0:	4b2b      	ldr	r3, [pc, #172]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a2a      	ldr	r2, [pc, #168]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005ec6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ecc:	f7fc ff84 	bl	8002dd8 <HAL_GetTick>
 8005ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ed2:	e008      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ed4:	f7fc ff80 	bl	8002dd8 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d901      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e20e      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ee6:	4b22      	ldr	r3, [pc, #136]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f0      	bne.n	8005ed4 <HAL_RCC_OscConfig+0x1e0>
 8005ef2:	e000      	b.n	8005ef6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ef4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d041      	beq.n	8005f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d01c      	beq.n	8005f44 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f0a:	4b19      	ldr	r3, [pc, #100]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f10:	4a17      	ldr	r2, [pc, #92]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005f12:	f043 0301 	orr.w	r3, r3, #1
 8005f16:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f1a:	f7fc ff5d 	bl	8002dd8 <HAL_GetTick>
 8005f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f20:	e008      	b.n	8005f34 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f22:	f7fc ff59 	bl	8002dd8 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d901      	bls.n	8005f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	e1e7      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005f34:	4b0e      	ldr	r3, [pc, #56]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005f36:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f3a:	f003 0302 	and.w	r3, r3, #2
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0ef      	beq.n	8005f22 <HAL_RCC_OscConfig+0x22e>
 8005f42:	e020      	b.n	8005f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f44:	4b0a      	ldr	r3, [pc, #40]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f4a:	4a09      	ldr	r2, [pc, #36]	@ (8005f70 <HAL_RCC_OscConfig+0x27c>)
 8005f4c:	f023 0301 	bic.w	r3, r3, #1
 8005f50:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fc ff40 	bl	8002dd8 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f5a:	e00d      	b.n	8005f78 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f5c:	f7fc ff3c 	bl	8002dd8 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d906      	bls.n	8005f78 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e1ca      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
 8005f6e:	bf00      	nop
 8005f70:	40021000 	.word	0x40021000
 8005f74:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005f78:	4b8c      	ldr	r3, [pc, #560]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8005f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1ea      	bne.n	8005f5c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 80a6 	beq.w	80060e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f94:	2300      	movs	r3, #0
 8005f96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f98:	4b84      	ldr	r3, [pc, #528]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8005f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x2b4>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <HAL_RCC_OscConfig+0x2b6>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00d      	beq.n	8005fca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fae:	4b7f      	ldr	r3, [pc, #508]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8005fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005fba:	4b7c      	ldr	r3, [pc, #496]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8005fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fca:	4b79      	ldr	r3, [pc, #484]	@ (80061b0 <HAL_RCC_OscConfig+0x4bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d118      	bne.n	8006008 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fd6:	4b76      	ldr	r3, [pc, #472]	@ (80061b0 <HAL_RCC_OscConfig+0x4bc>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a75      	ldr	r2, [pc, #468]	@ (80061b0 <HAL_RCC_OscConfig+0x4bc>)
 8005fdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fe2:	f7fc fef9 	bl	8002dd8 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fe8:	e008      	b.n	8005ffc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fea:	f7fc fef5 	bl	8002dd8 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d901      	bls.n	8005ffc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e183      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ffc:	4b6c      	ldr	r3, [pc, #432]	@ (80061b0 <HAL_RCC_OscConfig+0x4bc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006004:	2b00      	cmp	r3, #0
 8006006:	d0f0      	beq.n	8005fea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d108      	bne.n	8006022 <HAL_RCC_OscConfig+0x32e>
 8006010:	4b66      	ldr	r3, [pc, #408]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006016:	4a65      	ldr	r2, [pc, #404]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006018:	f043 0301 	orr.w	r3, r3, #1
 800601c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006020:	e024      	b.n	800606c <HAL_RCC_OscConfig+0x378>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	2b05      	cmp	r3, #5
 8006028:	d110      	bne.n	800604c <HAL_RCC_OscConfig+0x358>
 800602a:	4b60      	ldr	r3, [pc, #384]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800602c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006030:	4a5e      	ldr	r2, [pc, #376]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006032:	f043 0304 	orr.w	r3, r3, #4
 8006036:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800603a:	4b5c      	ldr	r3, [pc, #368]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800603c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006040:	4a5a      	ldr	r2, [pc, #360]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800604a:	e00f      	b.n	800606c <HAL_RCC_OscConfig+0x378>
 800604c:	4b57      	ldr	r3, [pc, #348]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800604e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006052:	4a56      	ldr	r2, [pc, #344]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006054:	f023 0301 	bic.w	r3, r3, #1
 8006058:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800605c:	4b53      	ldr	r3, [pc, #332]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800605e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006062:	4a52      	ldr	r2, [pc, #328]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006064:	f023 0304 	bic.w	r3, r3, #4
 8006068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d016      	beq.n	80060a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006074:	f7fc feb0 	bl	8002dd8 <HAL_GetTick>
 8006078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800607a:	e00a      	b.n	8006092 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607c:	f7fc feac 	bl	8002dd8 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e138      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006092:	4b46      	ldr	r3, [pc, #280]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006098:	f003 0302 	and.w	r3, r3, #2
 800609c:	2b00      	cmp	r3, #0
 800609e:	d0ed      	beq.n	800607c <HAL_RCC_OscConfig+0x388>
 80060a0:	e015      	b.n	80060ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a2:	f7fc fe99 	bl	8002dd8 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060a8:	e00a      	b.n	80060c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060aa:	f7fc fe95 	bl	8002dd8 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e121      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80060c0:	4b3a      	ldr	r3, [pc, #232]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 80060c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060c6:	f003 0302 	and.w	r3, r3, #2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1ed      	bne.n	80060aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060ce:	7ffb      	ldrb	r3, [r7, #31]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d105      	bne.n	80060e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060d4:	4b35      	ldr	r3, [pc, #212]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 80060d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060d8:	4a34      	ldr	r2, [pc, #208]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 80060da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060de:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d03c      	beq.n	8006166 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01c      	beq.n	800612e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80060f4:	4b2d      	ldr	r3, [pc, #180]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 80060f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060fa:	4a2c      	ldr	r2, [pc, #176]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006104:	f7fc fe68 	bl	8002dd8 <HAL_GetTick>
 8006108:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800610a:	e008      	b.n	800611e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800610c:	f7fc fe64 	bl	8002dd8 <HAL_GetTick>
 8006110:	4602      	mov	r2, r0
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d901      	bls.n	800611e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e0f2      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800611e:	4b23      	ldr	r3, [pc, #140]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006120:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006124:	f003 0302 	and.w	r3, r3, #2
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0ef      	beq.n	800610c <HAL_RCC_OscConfig+0x418>
 800612c:	e01b      	b.n	8006166 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800612e:	4b1f      	ldr	r3, [pc, #124]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006130:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006134:	4a1d      	ldr	r2, [pc, #116]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006136:	f023 0301 	bic.w	r3, r3, #1
 800613a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800613e:	f7fc fe4b 	bl	8002dd8 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006144:	e008      	b.n	8006158 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006146:	f7fc fe47 	bl	8002dd8 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e0d5      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006158:	4b14      	ldr	r3, [pc, #80]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800615a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d1ef      	bne.n	8006146 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	69db      	ldr	r3, [r3, #28]
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80c9 	beq.w	8006302 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006170:	4b0e      	ldr	r3, [pc, #56]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 030c 	and.w	r3, r3, #12
 8006178:	2b0c      	cmp	r3, #12
 800617a:	f000 8083 	beq.w	8006284 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d15e      	bne.n	8006244 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a08      	ldr	r2, [pc, #32]	@ (80061ac <HAL_RCC_OscConfig+0x4b8>)
 800618c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006190:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006192:	f7fc fe21 	bl	8002dd8 <HAL_GetTick>
 8006196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006198:	e00c      	b.n	80061b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800619a:	f7fc fe1d 	bl	8002dd8 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d905      	bls.n	80061b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e0ab      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
 80061ac:	40021000 	.word	0x40021000
 80061b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80061b4:	4b55      	ldr	r3, [pc, #340]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1ec      	bne.n	800619a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80061c0:	4b52      	ldr	r3, [pc, #328]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	4b52      	ldr	r3, [pc, #328]	@ (8006310 <HAL_RCC_OscConfig+0x61c>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	6a11      	ldr	r1, [r2, #32]
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061d0:	3a01      	subs	r2, #1
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	4311      	orrs	r1, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80061da:	0212      	lsls	r2, r2, #8
 80061dc:	4311      	orrs	r1, r2
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80061e2:	0852      	lsrs	r2, r2, #1
 80061e4:	3a01      	subs	r2, #1
 80061e6:	0552      	lsls	r2, r2, #21
 80061e8:	4311      	orrs	r1, r2
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80061ee:	0852      	lsrs	r2, r2, #1
 80061f0:	3a01      	subs	r2, #1
 80061f2:	0652      	lsls	r2, r2, #25
 80061f4:	4311      	orrs	r1, r2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80061fa:	06d2      	lsls	r2, r2, #27
 80061fc:	430a      	orrs	r2, r1
 80061fe:	4943      	ldr	r1, [pc, #268]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006200:	4313      	orrs	r3, r2
 8006202:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006204:	4b41      	ldr	r3, [pc, #260]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a40      	ldr	r2, [pc, #256]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 800620a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800620e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006210:	4b3e      	ldr	r3, [pc, #248]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4a3d      	ldr	r2, [pc, #244]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006216:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800621a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800621c:	f7fc fddc 	bl	8002dd8 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006222:	e008      	b.n	8006236 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006224:	f7fc fdd8 	bl	8002dd8 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	2b02      	cmp	r3, #2
 8006230:	d901      	bls.n	8006236 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006232:	2303      	movs	r3, #3
 8006234:	e066      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006236:	4b35      	ldr	r3, [pc, #212]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800623e:	2b00      	cmp	r3, #0
 8006240:	d0f0      	beq.n	8006224 <HAL_RCC_OscConfig+0x530>
 8006242:	e05e      	b.n	8006302 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006244:	4b31      	ldr	r3, [pc, #196]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a30      	ldr	r2, [pc, #192]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 800624a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800624e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006250:	f7fc fdc2 	bl	8002dd8 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006256:	e008      	b.n	800626a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006258:	f7fc fdbe 	bl	8002dd8 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	2b02      	cmp	r3, #2
 8006264:	d901      	bls.n	800626a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e04c      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800626a:	4b28      	ldr	r3, [pc, #160]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1f0      	bne.n	8006258 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006276:	4b25      	ldr	r3, [pc, #148]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006278:	68da      	ldr	r2, [r3, #12]
 800627a:	4924      	ldr	r1, [pc, #144]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 800627c:	4b25      	ldr	r3, [pc, #148]	@ (8006314 <HAL_RCC_OscConfig+0x620>)
 800627e:	4013      	ands	r3, r2
 8006280:	60cb      	str	r3, [r1, #12]
 8006282:	e03e      	b.n	8006302 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
 8006288:	2b01      	cmp	r3, #1
 800628a:	d101      	bne.n	8006290 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e039      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006290:	4b1e      	ldr	r3, [pc, #120]	@ (800630c <HAL_RCC_OscConfig+0x618>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0203 	and.w	r2, r3, #3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d12c      	bne.n	80062fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	3b01      	subs	r3, #1
 80062b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d123      	bne.n	80062fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d11b      	bne.n	80062fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d113      	bne.n	80062fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	3b01      	subs	r3, #1
 80062e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062f4:	085b      	lsrs	r3, r3, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d001      	beq.n	8006302 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e000      	b.n	8006304 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006302:	2300      	movs	r3, #0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40021000 	.word	0x40021000
 8006310:	019f800c 	.word	0x019f800c
 8006314:	feeefffc 	.word	0xfeeefffc

08006318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d101      	bne.n	8006330 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	e11e      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006330:	4b91      	ldr	r3, [pc, #580]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 030f 	and.w	r3, r3, #15
 8006338:	683a      	ldr	r2, [r7, #0]
 800633a:	429a      	cmp	r2, r3
 800633c:	d910      	bls.n	8006360 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800633e:	4b8e      	ldr	r3, [pc, #568]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f023 020f 	bic.w	r2, r3, #15
 8006346:	498c      	ldr	r1, [pc, #560]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	4313      	orrs	r3, r2
 800634c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800634e:	4b8a      	ldr	r3, [pc, #552]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	683a      	ldr	r2, [r7, #0]
 8006358:	429a      	cmp	r2, r3
 800635a:	d001      	beq.n	8006360 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e106      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 0301 	and.w	r3, r3, #1
 8006368:	2b00      	cmp	r3, #0
 800636a:	d073      	beq.n	8006454 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	2b03      	cmp	r3, #3
 8006372:	d129      	bne.n	80063c8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006374:	4b81      	ldr	r3, [pc, #516]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d101      	bne.n	8006384 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e0f4      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006384:	f000 f99c 	bl	80066c0 <RCC_GetSysClockFreqFromPLLSource>
 8006388:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4a7c      	ldr	r2, [pc, #496]	@ (8006580 <HAL_RCC_ClockConfig+0x268>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d93f      	bls.n	8006412 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006392:	4b7a      	ldr	r3, [pc, #488]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d033      	beq.n	8006412 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d12f      	bne.n	8006412 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063b2:	4b72      	ldr	r3, [pc, #456]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80063ba:	4a70      	ldr	r2, [pc, #448]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80063bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80063c2:	2380      	movs	r3, #128	@ 0x80
 80063c4:	617b      	str	r3, [r7, #20]
 80063c6:	e024      	b.n	8006412 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d107      	bne.n	80063e0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80063d0:	4b6a      	ldr	r3, [pc, #424]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d109      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e0c6      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80063e0:	4b66      	ldr	r3, [pc, #408]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0be      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80063f0:	f000 f8ce 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 80063f4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	4a61      	ldr	r2, [pc, #388]	@ (8006580 <HAL_RCC_ClockConfig+0x268>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d909      	bls.n	8006412 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80063fe:	4b5f      	ldr	r3, [pc, #380]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006406:	4a5d      	ldr	r2, [pc, #372]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800640e:	2380      	movs	r3, #128	@ 0x80
 8006410:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006412:	4b5a      	ldr	r3, [pc, #360]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006414:	689b      	ldr	r3, [r3, #8]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4957      	ldr	r1, [pc, #348]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006420:	4313      	orrs	r3, r2
 8006422:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006424:	f7fc fcd8 	bl	8002dd8 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	e00a      	b.n	8006442 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7fc fcd4 	bl	8002dd8 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e095      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	4b4e      	ldr	r3, [pc, #312]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 020c 	and.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d1eb      	bne.n	800642c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d023      	beq.n	80064a8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 0304 	and.w	r3, r3, #4
 8006468:	2b00      	cmp	r3, #0
 800646a:	d005      	beq.n	8006478 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800646c:	4b43      	ldr	r3, [pc, #268]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	4a42      	ldr	r2, [pc, #264]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006472:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006476:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0308 	and.w	r3, r3, #8
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006484:	4b3d      	ldr	r3, [pc, #244]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800648c:	4a3b      	ldr	r2, [pc, #236]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 800648e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006492:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006494:	4b39      	ldr	r3, [pc, #228]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4936      	ldr	r1, [pc, #216]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	608b      	str	r3, [r1, #8]
 80064a6:	e008      	b.n	80064ba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b80      	cmp	r3, #128	@ 0x80
 80064ac:	d105      	bne.n	80064ba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80064ae:	4b33      	ldr	r3, [pc, #204]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	4a32      	ldr	r2, [pc, #200]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 80064b4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80064b8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064ba:	4b2f      	ldr	r3, [pc, #188]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 030f 	and.w	r3, r3, #15
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d21d      	bcs.n	8006504 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c8:	4b2b      	ldr	r3, [pc, #172]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f023 020f 	bic.w	r2, r3, #15
 80064d0:	4929      	ldr	r1, [pc, #164]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80064d8:	f7fc fc7e 	bl	8002dd8 <HAL_GetTick>
 80064dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064de:	e00a      	b.n	80064f6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064e0:	f7fc fc7a 	bl	8002dd8 <HAL_GetTick>
 80064e4:	4602      	mov	r2, r0
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad3      	subs	r3, r2, r3
 80064ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d901      	bls.n	80064f6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064f2:	2303      	movs	r3, #3
 80064f4:	e03b      	b.n	800656e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064f6:	4b20      	ldr	r3, [pc, #128]	@ (8006578 <HAL_RCC_ClockConfig+0x260>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 030f 	and.w	r3, r3, #15
 80064fe:	683a      	ldr	r2, [r7, #0]
 8006500:	429a      	cmp	r2, r3
 8006502:	d1ed      	bne.n	80064e0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	2b00      	cmp	r3, #0
 800650e:	d008      	beq.n	8006522 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006510:	4b1a      	ldr	r3, [pc, #104]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4917      	ldr	r1, [pc, #92]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0308 	and.w	r3, r3, #8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d009      	beq.n	8006542 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800652e:	4b13      	ldr	r3, [pc, #76]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691b      	ldr	r3, [r3, #16]
 800653a:	00db      	lsls	r3, r3, #3
 800653c:	490f      	ldr	r1, [pc, #60]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 800653e:	4313      	orrs	r3, r2
 8006540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006542:	f000 f825 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8006546:	4602      	mov	r2, r0
 8006548:	4b0c      	ldr	r3, [pc, #48]	@ (800657c <HAL_RCC_ClockConfig+0x264>)
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	091b      	lsrs	r3, r3, #4
 800654e:	f003 030f 	and.w	r3, r3, #15
 8006552:	490c      	ldr	r1, [pc, #48]	@ (8006584 <HAL_RCC_ClockConfig+0x26c>)
 8006554:	5ccb      	ldrb	r3, [r1, r3]
 8006556:	f003 031f 	and.w	r3, r3, #31
 800655a:	fa22 f303 	lsr.w	r3, r2, r3
 800655e:	4a0a      	ldr	r2, [pc, #40]	@ (8006588 <HAL_RCC_ClockConfig+0x270>)
 8006560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <HAL_RCC_ClockConfig+0x274>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7fc fbea 	bl	8002d40 <HAL_InitTick>
 800656c:	4603      	mov	r3, r0
}
 800656e:	4618      	mov	r0, r3
 8006570:	3718      	adds	r7, #24
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	40022000 	.word	0x40022000
 800657c:	40021000 	.word	0x40021000
 8006580:	04c4b400 	.word	0x04c4b400
 8006584:	08008d90 	.word	0x08008d90
 8006588:	2000000c 	.word	0x2000000c
 800658c:	20000010 	.word	0x20000010

08006590 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006590:	b480      	push	{r7}
 8006592:	b087      	sub	sp, #28
 8006594:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006596:	4b2c      	ldr	r3, [pc, #176]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
 800659e:	2b04      	cmp	r3, #4
 80065a0:	d102      	bne.n	80065a8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80065a2:	4b2a      	ldr	r3, [pc, #168]	@ (800664c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065a4:	613b      	str	r3, [r7, #16]
 80065a6:	e047      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80065a8:	4b27      	ldr	r3, [pc, #156]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065aa:	689b      	ldr	r3, [r3, #8]
 80065ac:	f003 030c 	and.w	r3, r3, #12
 80065b0:	2b08      	cmp	r3, #8
 80065b2:	d102      	bne.n	80065ba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80065b4:	4b25      	ldr	r3, [pc, #148]	@ (800664c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	e03e      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80065ba:	4b23      	ldr	r3, [pc, #140]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 030c 	and.w	r3, r3, #12
 80065c2:	2b0c      	cmp	r3, #12
 80065c4:	d136      	bne.n	8006634 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80065c6:	4b20      	ldr	r3, [pc, #128]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	f003 0303 	and.w	r3, r3, #3
 80065ce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80065d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	091b      	lsrs	r3, r3, #4
 80065d6:	f003 030f 	and.w	r3, r3, #15
 80065da:	3301      	adds	r3, #1
 80065dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d10c      	bne.n	80065fe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065e4:	4a19      	ldr	r2, [pc, #100]	@ (800664c <HAL_RCC_GetSysClockFreq+0xbc>)
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ec:	4a16      	ldr	r2, [pc, #88]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065ee:	68d2      	ldr	r2, [r2, #12]
 80065f0:	0a12      	lsrs	r2, r2, #8
 80065f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80065f6:	fb02 f303 	mul.w	r3, r2, r3
 80065fa:	617b      	str	r3, [r7, #20]
      break;
 80065fc:	e00c      	b.n	8006618 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80065fe:	4a13      	ldr	r2, [pc, #76]	@ (800664c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	fbb2 f3f3 	udiv	r3, r2, r3
 8006606:	4a10      	ldr	r2, [pc, #64]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	0a12      	lsrs	r2, r2, #8
 800660c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006610:	fb02 f303 	mul.w	r3, r2, r3
 8006614:	617b      	str	r3, [r7, #20]
      break;
 8006616:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006618:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <HAL_RCC_GetSysClockFreq+0xb8>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	0e5b      	lsrs	r3, r3, #25
 800661e:	f003 0303 	and.w	r3, r3, #3
 8006622:	3301      	adds	r3, #1
 8006624:	005b      	lsls	r3, r3, #1
 8006626:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	e001      	b.n	8006638 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006634:	2300      	movs	r3, #0
 8006636:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006638:	693b      	ldr	r3, [r7, #16]
}
 800663a:	4618      	mov	r0, r3
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40021000 	.word	0x40021000
 800664c:	00f42400 	.word	0x00f42400

08006650 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006650:	b480      	push	{r7}
 8006652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006654:	4b03      	ldr	r3, [pc, #12]	@ (8006664 <HAL_RCC_GetHCLKFreq+0x14>)
 8006656:	681b      	ldr	r3, [r3, #0]
}
 8006658:	4618      	mov	r0, r3
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c

08006668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800666c:	f7ff fff0 	bl	8006650 <HAL_RCC_GetHCLKFreq>
 8006670:	4602      	mov	r2, r0
 8006672:	4b06      	ldr	r3, [pc, #24]	@ (800668c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	0a1b      	lsrs	r3, r3, #8
 8006678:	f003 0307 	and.w	r3, r3, #7
 800667c:	4904      	ldr	r1, [pc, #16]	@ (8006690 <HAL_RCC_GetPCLK1Freq+0x28>)
 800667e:	5ccb      	ldrb	r3, [r1, r3]
 8006680:	f003 031f 	and.w	r3, r3, #31
 8006684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006688:	4618      	mov	r0, r3
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40021000 	.word	0x40021000
 8006690:	08008da0 	.word	0x08008da0

08006694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006698:	f7ff ffda 	bl	8006650 <HAL_RCC_GetHCLKFreq>
 800669c:	4602      	mov	r2, r0
 800669e:	4b06      	ldr	r3, [pc, #24]	@ (80066b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	0adb      	lsrs	r3, r3, #11
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	4904      	ldr	r1, [pc, #16]	@ (80066bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80066aa:	5ccb      	ldrb	r3, [r1, r3]
 80066ac:	f003 031f 	and.w	r3, r3, #31
 80066b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40021000 	.word	0x40021000
 80066bc:	08008da0 	.word	0x08008da0

080066c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b087      	sub	sp, #28
 80066c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80066c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066c8:	68db      	ldr	r3, [r3, #12]
 80066ca:	f003 0303 	and.w	r3, r3, #3
 80066ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80066d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	091b      	lsrs	r3, r3, #4
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	3301      	adds	r3, #1
 80066dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	d10c      	bne.n	80066fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066e4:	4a17      	ldr	r2, [pc, #92]	@ (8006744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ec:	4a14      	ldr	r2, [pc, #80]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80066ee:	68d2      	ldr	r2, [r2, #12]
 80066f0:	0a12      	lsrs	r2, r2, #8
 80066f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80066f6:	fb02 f303 	mul.w	r3, r2, r3
 80066fa:	617b      	str	r3, [r7, #20]
    break;
 80066fc:	e00c      	b.n	8006718 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80066fe:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	4a0e      	ldr	r2, [pc, #56]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006708:	68d2      	ldr	r2, [r2, #12]
 800670a:	0a12      	lsrs	r2, r2, #8
 800670c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006710:	fb02 f303 	mul.w	r3, r2, r3
 8006714:	617b      	str	r3, [r7, #20]
    break;
 8006716:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006718:	4b09      	ldr	r3, [pc, #36]	@ (8006740 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	0e5b      	lsrs	r3, r3, #25
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	3301      	adds	r3, #1
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006728:	697a      	ldr	r2, [r7, #20]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006730:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006732:	687b      	ldr	r3, [r7, #4]
}
 8006734:	4618      	mov	r0, r3
 8006736:	371c      	adds	r7, #28
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	40021000 	.word	0x40021000
 8006744:	00f42400 	.word	0x00f42400

08006748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006750:	2300      	movs	r3, #0
 8006752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006754:	2300      	movs	r3, #0
 8006756:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 8098 	beq.w	8006896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006766:	2300      	movs	r3, #0
 8006768:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800676a:	4b43      	ldr	r3, [pc, #268]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800676c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800676e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d10d      	bne.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006776:	4b40      	ldr	r3, [pc, #256]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677a:	4a3f      	ldr	r2, [pc, #252]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800677c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006780:	6593      	str	r3, [r2, #88]	@ 0x58
 8006782:	4b3d      	ldr	r3, [pc, #244]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800678a:	60bb      	str	r3, [r7, #8]
 800678c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800678e:	2301      	movs	r3, #1
 8006790:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006792:	4b3a      	ldr	r3, [pc, #232]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a39      	ldr	r2, [pc, #228]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800679e:	f7fc fb1b 	bl	8002dd8 <HAL_GetTick>
 80067a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067a4:	e009      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067a6:	f7fc fb17 	bl	8002dd8 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d902      	bls.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80067b4:	2303      	movs	r3, #3
 80067b6:	74fb      	strb	r3, [r7, #19]
        break;
 80067b8:	e005      	b.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80067ba:	4b30      	ldr	r3, [pc, #192]	@ (800687c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0ef      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80067c6:	7cfb      	ldrb	r3, [r7, #19]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d159      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80067cc:	4b2a      	ldr	r3, [pc, #168]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d01e      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d019      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80067e8:	4b23      	ldr	r3, [pc, #140]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80067f4:	4b20      	ldr	r3, [pc, #128]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80067fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006804:	4b1c      	ldr	r3, [pc, #112]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800680c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006814:	4a18      	ldr	r2, [pc, #96]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d016      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006826:	f7fc fad7 	bl	8002dd8 <HAL_GetTick>
 800682a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800682c:	e00b      	b.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800682e:	f7fc fad3 	bl	8002dd8 <HAL_GetTick>
 8006832:	4602      	mov	r2, r0
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	1ad3      	subs	r3, r2, r3
 8006838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800683c:	4293      	cmp	r3, r2
 800683e:	d902      	bls.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	74fb      	strb	r3, [r7, #19]
            break;
 8006844:	e006      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006846:	4b0c      	ldr	r3, [pc, #48]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0ec      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006854:	7cfb      	ldrb	r3, [r7, #19]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10b      	bne.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800685a:	4b07      	ldr	r3, [pc, #28]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800685c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006860:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006868:	4903      	ldr	r1, [pc, #12]	@ (8006878 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8006870:	e008      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006872:	7cfb      	ldrb	r3, [r7, #19]
 8006874:	74bb      	strb	r3, [r7, #18]
 8006876:	e005      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006878:	40021000 	.word	0x40021000
 800687c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006884:	7c7b      	ldrb	r3, [r7, #17]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d105      	bne.n	8006896 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800688a:	4ba7      	ldr	r3, [pc, #668]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800688e:	4aa6      	ldr	r2, [pc, #664]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006894:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0301 	and.w	r3, r3, #1
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00a      	beq.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80068a2:	4ba1      	ldr	r3, [pc, #644]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a8:	f023 0203 	bic.w	r2, r3, #3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	499d      	ldr	r1, [pc, #628]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068b2:	4313      	orrs	r3, r2
 80068b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00a      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80068c4:	4b98      	ldr	r3, [pc, #608]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ca:	f023 020c 	bic.w	r2, r3, #12
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	4995      	ldr	r1, [pc, #596]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d00a      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80068e6:	4b90      	ldr	r3, [pc, #576]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	498c      	ldr	r1, [pc, #560]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068f6:	4313      	orrs	r3, r2
 80068f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00a      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006908:	4b87      	ldr	r3, [pc, #540]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800690a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800690e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	4984      	ldr	r1, [pc, #528]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006918:	4313      	orrs	r3, r2
 800691a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00a      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800692a:	4b7f      	ldr	r3, [pc, #508]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800692c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006930:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	497b      	ldr	r1, [pc, #492]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800693a:	4313      	orrs	r3, r2
 800693c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800694c:	4b76      	ldr	r3, [pc, #472]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006952:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	4973      	ldr	r1, [pc, #460]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800696e:	4b6e      	ldr	r3, [pc, #440]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006970:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006974:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	69db      	ldr	r3, [r3, #28]
 800697c:	496a      	ldr	r1, [pc, #424]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697e:	4313      	orrs	r3, r2
 8006980:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00a      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006990:	4b65      	ldr	r3, [pc, #404]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006992:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006996:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a1b      	ldr	r3, [r3, #32]
 800699e:	4962      	ldr	r1, [pc, #392]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80069b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c0:	4959      	ldr	r1, [pc, #356]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069c2:	4313      	orrs	r3, r2
 80069c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80069d4:	4b54      	ldr	r3, [pc, #336]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80069da:	f023 0203 	bic.w	r2, r3, #3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e2:	4951      	ldr	r1, [pc, #324]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069e4:	4313      	orrs	r3, r2
 80069e6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00a      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80069f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80069f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80069fc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a04:	4948      	ldr	r1, [pc, #288]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a06:	4313      	orrs	r3, r2
 8006a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d015      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a18:	4b43      	ldr	r3, [pc, #268]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a1e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	4940      	ldr	r1, [pc, #256]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a36:	d105      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a38:	4b3b      	ldr	r3, [pc, #236]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	4a3a      	ldr	r2, [pc, #232]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a42:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d015      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a50:	4b35      	ldr	r3, [pc, #212]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a56:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a5e:	4932      	ldr	r1, [pc, #200]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006a6e:	d105      	bne.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006a70:	4b2d      	ldr	r3, [pc, #180]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a2c      	ldr	r2, [pc, #176]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a7a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d015      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006a88:	4b27      	ldr	r3, [pc, #156]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006a8e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a96:	4924      	ldr	r1, [pc, #144]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aa6:	d105      	bne.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4a1e      	ldr	r2, [pc, #120]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ab2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d015      	beq.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ac0:	4b19      	ldr	r3, [pc, #100]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ace:	4916      	ldr	r1, [pc, #88]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006ade:	d105      	bne.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ae0:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae2:	68db      	ldr	r3, [r3, #12]
 8006ae4:	4a10      	ldr	r2, [pc, #64]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d019      	beq.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006af8:	4b0b      	ldr	r3, [pc, #44]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	4908      	ldr	r1, [pc, #32]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006b16:	d109      	bne.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006b18:	4b03      	ldr	r3, [pc, #12]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	4a02      	ldr	r2, [pc, #8]	@ (8006b28 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006b22:	60d3      	str	r3, [r2, #12]
 8006b24:	e002      	b.n	8006b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006b26:	bf00      	nop
 8006b28:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d015      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b38:	4b29      	ldr	r3, [pc, #164]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b3e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b46:	4926      	ldr	r1, [pc, #152]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006b56:	d105      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b58:	4b21      	ldr	r3, [pc, #132]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	4a20      	ldr	r2, [pc, #128]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d015      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006b70:	4b1b      	ldr	r3, [pc, #108]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b7e:	4918      	ldr	r1, [pc, #96]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b8e:	d105      	bne.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006b90:	4b13      	ldr	r3, [pc, #76]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4a12      	ldr	r2, [pc, #72]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d015      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006baa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bb6:	490a      	ldr	r1, [pc, #40]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006bc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bc6:	d105      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006bd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3718      	adds	r7, #24
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
 8006bde:	bf00      	nop
 8006be0:	40021000 	.word	0x40021000

08006be4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d101      	bne.n	8006bf6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	e049      	b.n	8006c8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d106      	bne.n	8006c10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7fb fd3a 	bl	8002684 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	3304      	adds	r3, #4
 8006c20:	4619      	mov	r1, r3
 8006c22:	4610      	mov	r0, r2
 8006c24:	f000 fc44 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3708      	adds	r7, #8
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
	...

08006c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b085      	sub	sp, #20
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d001      	beq.n	8006cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e04c      	b.n	8006d46 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2202      	movs	r2, #2
 8006cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	@ (8006d54 <HAL_TIM_Base_Start+0xc0>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d022      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cc6:	d01d      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a22      	ldr	r2, [pc, #136]	@ (8006d58 <HAL_TIM_Base_Start+0xc4>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d018      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a21      	ldr	r2, [pc, #132]	@ (8006d5c <HAL_TIM_Base_Start+0xc8>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d013      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a1f      	ldr	r2, [pc, #124]	@ (8006d60 <HAL_TIM_Base_Start+0xcc>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00e      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a1e      	ldr	r2, [pc, #120]	@ (8006d64 <HAL_TIM_Base_Start+0xd0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d009      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a1c      	ldr	r2, [pc, #112]	@ (8006d68 <HAL_TIM_Base_Start+0xd4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d004      	beq.n	8006d04 <HAL_TIM_Base_Start+0x70>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8006d6c <HAL_TIM_Base_Start+0xd8>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d115      	bne.n	8006d30 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689a      	ldr	r2, [r3, #8]
 8006d0a:	4b19      	ldr	r3, [pc, #100]	@ (8006d70 <HAL_TIM_Base_Start+0xdc>)
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2b06      	cmp	r3, #6
 8006d14:	d015      	beq.n	8006d42 <HAL_TIM_Base_Start+0xae>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d1c:	d011      	beq.n	8006d42 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f042 0201 	orr.w	r2, r2, #1
 8006d2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d2e:	e008      	b.n	8006d42 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f042 0201 	orr.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	e000      	b.n	8006d44 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d44:	2300      	movs	r3, #0
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3714      	adds	r7, #20
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	40012c00 	.word	0x40012c00
 8006d58:	40000400 	.word	0x40000400
 8006d5c:	40000800 	.word	0x40000800
 8006d60:	40000c00 	.word	0x40000c00
 8006d64:	40013400 	.word	0x40013400
 8006d68:	40014000 	.word	0x40014000
 8006d6c:	40015000 	.word	0x40015000
 8006d70:	00010007 	.word	0x00010007

08006d74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e049      	b.n	8006e1a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f841 	bl	8006e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	3304      	adds	r3, #4
 8006db0:	4619      	mov	r1, r3
 8006db2:	4610      	mov	r0, r2
 8006db4:	f000 fb7c 	bl	80074b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e22:	b480      	push	{r7}
 8006e24:	b083      	sub	sp, #12
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e2a:	bf00      	nop
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <HAL_TIM_PWM_Start+0x24>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	bf14      	ite	ne
 8006e54:	2301      	movne	r3, #1
 8006e56:	2300      	moveq	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
 8006e5a:	e03c      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x9e>
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b04      	cmp	r3, #4
 8006e60:	d109      	bne.n	8006e76 <HAL_TIM_PWM_Start+0x3e>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	bf14      	ite	ne
 8006e6e:	2301      	movne	r3, #1
 8006e70:	2300      	moveq	r3, #0
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	e02f      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x9e>
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b08      	cmp	r3, #8
 8006e7a:	d109      	bne.n	8006e90 <HAL_TIM_PWM_Start+0x58>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	bf14      	ite	ne
 8006e88:	2301      	movne	r3, #1
 8006e8a:	2300      	moveq	r3, #0
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	e022      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x9e>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b0c      	cmp	r3, #12
 8006e94:	d109      	bne.n	8006eaa <HAL_TIM_PWM_Start+0x72>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	2b01      	cmp	r3, #1
 8006ea0:	bf14      	ite	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	2300      	moveq	r3, #0
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	e015      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x9e>
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	2b10      	cmp	r3, #16
 8006eae:	d109      	bne.n	8006ec4 <HAL_TIM_PWM_Start+0x8c>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	bf14      	ite	ne
 8006ebc:	2301      	movne	r3, #1
 8006ebe:	2300      	moveq	r3, #0
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	e008      	b.n	8006ed6 <HAL_TIM_PWM_Start+0x9e>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	bf14      	ite	ne
 8006ed0:	2301      	movne	r3, #1
 8006ed2:	2300      	moveq	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d001      	beq.n	8006ede <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e0a6      	b.n	800702c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d104      	bne.n	8006eee <HAL_TIM_PWM_Start+0xb6>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2202      	movs	r2, #2
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eec:	e023      	b.n	8006f36 <HAL_TIM_PWM_Start+0xfe>
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	2b04      	cmp	r3, #4
 8006ef2:	d104      	bne.n	8006efe <HAL_TIM_PWM_Start+0xc6>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2202      	movs	r2, #2
 8006ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006efc:	e01b      	b.n	8006f36 <HAL_TIM_PWM_Start+0xfe>
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b08      	cmp	r3, #8
 8006f02:	d104      	bne.n	8006f0e <HAL_TIM_PWM_Start+0xd6>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2202      	movs	r2, #2
 8006f08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f0c:	e013      	b.n	8006f36 <HAL_TIM_PWM_Start+0xfe>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b0c      	cmp	r3, #12
 8006f12:	d104      	bne.n	8006f1e <HAL_TIM_PWM_Start+0xe6>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2202      	movs	r2, #2
 8006f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f1c:	e00b      	b.n	8006f36 <HAL_TIM_PWM_Start+0xfe>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b10      	cmp	r3, #16
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_PWM_Start+0xf6>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f2c:	e003      	b.n	8006f36 <HAL_TIM_PWM_Start+0xfe>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2202      	movs	r2, #2
 8006f32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 ff30 	bl	8007da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3a      	ldr	r2, [pc, #232]	@ (8007034 <HAL_TIM_PWM_Start+0x1fc>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d018      	beq.n	8006f80 <HAL_TIM_PWM_Start+0x148>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a39      	ldr	r2, [pc, #228]	@ (8007038 <HAL_TIM_PWM_Start+0x200>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d013      	beq.n	8006f80 <HAL_TIM_PWM_Start+0x148>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a37      	ldr	r2, [pc, #220]	@ (800703c <HAL_TIM_PWM_Start+0x204>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d00e      	beq.n	8006f80 <HAL_TIM_PWM_Start+0x148>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a36      	ldr	r2, [pc, #216]	@ (8007040 <HAL_TIM_PWM_Start+0x208>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d009      	beq.n	8006f80 <HAL_TIM_PWM_Start+0x148>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a34      	ldr	r2, [pc, #208]	@ (8007044 <HAL_TIM_PWM_Start+0x20c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d004      	beq.n	8006f80 <HAL_TIM_PWM_Start+0x148>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a33      	ldr	r2, [pc, #204]	@ (8007048 <HAL_TIM_PWM_Start+0x210>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIM_PWM_Start+0x14c>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <HAL_TIM_PWM_Start+0x14e>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006f98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a25      	ldr	r2, [pc, #148]	@ (8007034 <HAL_TIM_PWM_Start+0x1fc>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d022      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fac:	d01d      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a26      	ldr	r2, [pc, #152]	@ (800704c <HAL_TIM_PWM_Start+0x214>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d018      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a24      	ldr	r2, [pc, #144]	@ (8007050 <HAL_TIM_PWM_Start+0x218>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d013      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a23      	ldr	r2, [pc, #140]	@ (8007054 <HAL_TIM_PWM_Start+0x21c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00e      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a19      	ldr	r2, [pc, #100]	@ (8007038 <HAL_TIM_PWM_Start+0x200>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d009      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a18      	ldr	r2, [pc, #96]	@ (800703c <HAL_TIM_PWM_Start+0x204>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d004      	beq.n	8006fea <HAL_TIM_PWM_Start+0x1b2>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a18      	ldr	r2, [pc, #96]	@ (8007048 <HAL_TIM_PWM_Start+0x210>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d115      	bne.n	8007016 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	689a      	ldr	r2, [r3, #8]
 8006ff0:	4b19      	ldr	r3, [pc, #100]	@ (8007058 <HAL_TIM_PWM_Start+0x220>)
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b06      	cmp	r3, #6
 8006ffa:	d015      	beq.n	8007028 <HAL_TIM_PWM_Start+0x1f0>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007002:	d011      	beq.n	8007028 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007014:	e008      	b.n	8007028 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e000      	b.n	800702a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007028:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800702a:	2300      	movs	r3, #0
}
 800702c:	4618      	mov	r0, r3
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40014400 	.word	0x40014400
 8007044:	40014800 	.word	0x40014800
 8007048:	40015000 	.word	0x40015000
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	00010007 	.word	0x00010007

0800705c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b086      	sub	sp, #24
 8007060:	af00      	add	r7, sp, #0
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	60b9      	str	r1, [r7, #8]
 8007066:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007068:	2300      	movs	r3, #0
 800706a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007072:	2b01      	cmp	r3, #1
 8007074:	d101      	bne.n	800707a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007076:	2302      	movs	r3, #2
 8007078:	e0ff      	b.n	800727a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b14      	cmp	r3, #20
 8007086:	f200 80f0 	bhi.w	800726a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	080070e5 	.word	0x080070e5
 8007094:	0800726b 	.word	0x0800726b
 8007098:	0800726b 	.word	0x0800726b
 800709c:	0800726b 	.word	0x0800726b
 80070a0:	08007125 	.word	0x08007125
 80070a4:	0800726b 	.word	0x0800726b
 80070a8:	0800726b 	.word	0x0800726b
 80070ac:	0800726b 	.word	0x0800726b
 80070b0:	08007167 	.word	0x08007167
 80070b4:	0800726b 	.word	0x0800726b
 80070b8:	0800726b 	.word	0x0800726b
 80070bc:	0800726b 	.word	0x0800726b
 80070c0:	080071a7 	.word	0x080071a7
 80070c4:	0800726b 	.word	0x0800726b
 80070c8:	0800726b 	.word	0x0800726b
 80070cc:	0800726b 	.word	0x0800726b
 80070d0:	080071e9 	.word	0x080071e9
 80070d4:	0800726b 	.word	0x0800726b
 80070d8:	0800726b 	.word	0x0800726b
 80070dc:	0800726b 	.word	0x0800726b
 80070e0:	08007229 	.word	0x08007229
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68b9      	ldr	r1, [r7, #8]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fa94 	bl	8007618 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	699a      	ldr	r2, [r3, #24]
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f042 0208 	orr.w	r2, r2, #8
 80070fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	699a      	ldr	r2, [r3, #24]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f022 0204 	bic.w	r2, r2, #4
 800710e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	6999      	ldr	r1, [r3, #24]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	691a      	ldr	r2, [r3, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	430a      	orrs	r2, r1
 8007120:	619a      	str	r2, [r3, #24]
      break;
 8007122:	e0a5      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68b9      	ldr	r1, [r7, #8]
 800712a:	4618      	mov	r0, r3
 800712c:	f000 fb0e 	bl	800774c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	699a      	ldr	r2, [r3, #24]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800713e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	699a      	ldr	r2, [r3, #24]
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800714e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	6999      	ldr	r1, [r3, #24]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	021a      	lsls	r2, r3, #8
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	430a      	orrs	r2, r1
 8007162:	619a      	str	r2, [r3, #24]
      break;
 8007164:	e084      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68b9      	ldr	r1, [r7, #8]
 800716c:	4618      	mov	r0, r3
 800716e:	f000 fb81 	bl	8007874 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	69da      	ldr	r2, [r3, #28]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f042 0208 	orr.w	r2, r2, #8
 8007180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	69da      	ldr	r2, [r3, #28]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0204 	bic.w	r2, r2, #4
 8007190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69d9      	ldr	r1, [r3, #28]
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	691a      	ldr	r2, [r3, #16]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	430a      	orrs	r2, r1
 80071a2:	61da      	str	r2, [r3, #28]
      break;
 80071a4:	e064      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68b9      	ldr	r1, [r7, #8]
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fbf3 	bl	8007998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69da      	ldr	r2, [r3, #28]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	69da      	ldr	r2, [r3, #28]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69d9      	ldr	r1, [r3, #28]
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	021a      	lsls	r2, r3, #8
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	61da      	str	r2, [r3, #28]
      break;
 80071e6:	e043      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fc66 	bl	8007ac0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f042 0208 	orr.w	r2, r2, #8
 8007202:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0204 	bic.w	r2, r2, #4
 8007212:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	691a      	ldr	r2, [r3, #16]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	430a      	orrs	r2, r1
 8007224:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007226:	e023      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	68b9      	ldr	r1, [r7, #8]
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fcb0 	bl	8007b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007242:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007252:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	021a      	lsls	r2, r3, #8
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	430a      	orrs	r2, r1
 8007266:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007268:	e002      	b.n	8007270 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
      break;
 800726e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007278:	7dfb      	ldrb	r3, [r7, #23]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3718      	adds	r7, #24
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop

08007284 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007298:	2b01      	cmp	r3, #1
 800729a:	d101      	bne.n	80072a0 <HAL_TIM_ConfigClockSource+0x1c>
 800729c:	2302      	movs	r3, #2
 800729e:	e0f6      	b.n	800748e <HAL_TIM_ConfigClockSource+0x20a>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2202      	movs	r2, #2
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80072be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80072c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a6f      	ldr	r2, [pc, #444]	@ (8007498 <HAL_TIM_ConfigClockSource+0x214>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 80c1 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 80072e0:	4a6d      	ldr	r2, [pc, #436]	@ (8007498 <HAL_TIM_ConfigClockSource+0x214>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f200 80c6 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 80072e8:	4a6c      	ldr	r2, [pc, #432]	@ (800749c <HAL_TIM_ConfigClockSource+0x218>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 80b9 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 80072f0:	4a6a      	ldr	r2, [pc, #424]	@ (800749c <HAL_TIM_ConfigClockSource+0x218>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f200 80be 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 80072f8:	4a69      	ldr	r2, [pc, #420]	@ (80074a0 <HAL_TIM_ConfigClockSource+0x21c>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	f000 80b1 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007300:	4a67      	ldr	r2, [pc, #412]	@ (80074a0 <HAL_TIM_ConfigClockSource+0x21c>)
 8007302:	4293      	cmp	r3, r2
 8007304:	f200 80b6 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007308:	4a66      	ldr	r2, [pc, #408]	@ (80074a4 <HAL_TIM_ConfigClockSource+0x220>)
 800730a:	4293      	cmp	r3, r2
 800730c:	f000 80a9 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007310:	4a64      	ldr	r2, [pc, #400]	@ (80074a4 <HAL_TIM_ConfigClockSource+0x220>)
 8007312:	4293      	cmp	r3, r2
 8007314:	f200 80ae 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007318:	4a63      	ldr	r2, [pc, #396]	@ (80074a8 <HAL_TIM_ConfigClockSource+0x224>)
 800731a:	4293      	cmp	r3, r2
 800731c:	f000 80a1 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007320:	4a61      	ldr	r2, [pc, #388]	@ (80074a8 <HAL_TIM_ConfigClockSource+0x224>)
 8007322:	4293      	cmp	r3, r2
 8007324:	f200 80a6 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007328:	4a60      	ldr	r2, [pc, #384]	@ (80074ac <HAL_TIM_ConfigClockSource+0x228>)
 800732a:	4293      	cmp	r3, r2
 800732c:	f000 8099 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007330:	4a5e      	ldr	r2, [pc, #376]	@ (80074ac <HAL_TIM_ConfigClockSource+0x228>)
 8007332:	4293      	cmp	r3, r2
 8007334:	f200 809e 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007338:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800733c:	f000 8091 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007340:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007344:	f200 8096 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007348:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800734c:	f000 8089 	beq.w	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007350:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007354:	f200 808e 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007358:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800735c:	d03e      	beq.n	80073dc <HAL_TIM_ConfigClockSource+0x158>
 800735e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007362:	f200 8087 	bhi.w	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007366:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800736a:	f000 8086 	beq.w	800747a <HAL_TIM_ConfigClockSource+0x1f6>
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007372:	d87f      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007374:	2b70      	cmp	r3, #112	@ 0x70
 8007376:	d01a      	beq.n	80073ae <HAL_TIM_ConfigClockSource+0x12a>
 8007378:	2b70      	cmp	r3, #112	@ 0x70
 800737a:	d87b      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 800737c:	2b60      	cmp	r3, #96	@ 0x60
 800737e:	d050      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x19e>
 8007380:	2b60      	cmp	r3, #96	@ 0x60
 8007382:	d877      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007384:	2b50      	cmp	r3, #80	@ 0x50
 8007386:	d03c      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x17e>
 8007388:	2b50      	cmp	r3, #80	@ 0x50
 800738a:	d873      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 800738c:	2b40      	cmp	r3, #64	@ 0x40
 800738e:	d058      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1be>
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d86f      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 8007394:	2b30      	cmp	r3, #48	@ 0x30
 8007396:	d064      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 8007398:	2b30      	cmp	r3, #48	@ 0x30
 800739a:	d86b      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 800739c:	2b20      	cmp	r3, #32
 800739e:	d060      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 80073a0:	2b20      	cmp	r3, #32
 80073a2:	d867      	bhi.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d05c      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 80073a8:	2b10      	cmp	r3, #16
 80073aa:	d05a      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x1de>
 80073ac:	e062      	b.n	8007474 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073be:	f000 fcd1 	bl	8007d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80073d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	609a      	str	r2, [r3, #8]
      break;
 80073da:	e04f      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073ec:	f000 fcba 	bl	8007d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80073fe:	609a      	str	r2, [r3, #8]
      break;
 8007400:	e03c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800740e:	461a      	mov	r2, r3
 8007410:	f000 fc2c 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2150      	movs	r1, #80	@ 0x50
 800741a:	4618      	mov	r0, r3
 800741c:	f000 fc85 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007420:	e02c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800742e:	461a      	mov	r2, r3
 8007430:	f000 fc4b 	bl	8007cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2160      	movs	r1, #96	@ 0x60
 800743a:	4618      	mov	r0, r3
 800743c:	f000 fc75 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007440:	e01c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	461a      	mov	r2, r3
 8007450:	f000 fc0c 	bl	8007c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2140      	movs	r1, #64	@ 0x40
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fc65 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007460:	e00c      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f000 fc5c 	bl	8007d2a <TIM_ITRx_SetConfig>
      break;
 8007472:	e003      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
      break;
 8007478:	e000      	b.n	800747c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800747a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	00100070 	.word	0x00100070
 800749c:	00100060 	.word	0x00100060
 80074a0:	00100050 	.word	0x00100050
 80074a4:	00100040 	.word	0x00100040
 80074a8:	00100030 	.word	0x00100030
 80074ac:	00100020 	.word	0x00100020

080074b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a4c      	ldr	r2, [pc, #304]	@ (80075f4 <TIM_Base_SetConfig+0x144>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d017      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074ce:	d013      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	4a49      	ldr	r2, [pc, #292]	@ (80075f8 <TIM_Base_SetConfig+0x148>)
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d00f      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	4a48      	ldr	r2, [pc, #288]	@ (80075fc <TIM_Base_SetConfig+0x14c>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d00b      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	4a47      	ldr	r2, [pc, #284]	@ (8007600 <TIM_Base_SetConfig+0x150>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d007      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a46      	ldr	r2, [pc, #280]	@ (8007604 <TIM_Base_SetConfig+0x154>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d003      	beq.n	80074f8 <TIM_Base_SetConfig+0x48>
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	4a45      	ldr	r2, [pc, #276]	@ (8007608 <TIM_Base_SetConfig+0x158>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d108      	bne.n	800750a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	68fa      	ldr	r2, [r7, #12]
 8007506:	4313      	orrs	r3, r2
 8007508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a39      	ldr	r2, [pc, #228]	@ (80075f4 <TIM_Base_SetConfig+0x144>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d023      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007518:	d01f      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a36      	ldr	r2, [pc, #216]	@ (80075f8 <TIM_Base_SetConfig+0x148>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d01b      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a35      	ldr	r2, [pc, #212]	@ (80075fc <TIM_Base_SetConfig+0x14c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d017      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a34      	ldr	r2, [pc, #208]	@ (8007600 <TIM_Base_SetConfig+0x150>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a33      	ldr	r2, [pc, #204]	@ (8007604 <TIM_Base_SetConfig+0x154>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00f      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a33      	ldr	r2, [pc, #204]	@ (800760c <TIM_Base_SetConfig+0x15c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a32      	ldr	r2, [pc, #200]	@ (8007610 <TIM_Base_SetConfig+0x160>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a31      	ldr	r2, [pc, #196]	@ (8007614 <TIM_Base_SetConfig+0x164>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_Base_SetConfig+0xaa>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a2c      	ldr	r2, [pc, #176]	@ (8007608 <TIM_Base_SetConfig+0x158>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d108      	bne.n	800756c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007560:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4313      	orrs	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	695b      	ldr	r3, [r3, #20]
 8007576:	4313      	orrs	r3, r2
 8007578:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a18      	ldr	r2, [pc, #96]	@ (80075f4 <TIM_Base_SetConfig+0x144>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d013      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a1a      	ldr	r2, [pc, #104]	@ (8007604 <TIM_Base_SetConfig+0x154>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00f      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <TIM_Base_SetConfig+0x15c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d00b      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a19      	ldr	r2, [pc, #100]	@ (8007610 <TIM_Base_SetConfig+0x160>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d007      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a18      	ldr	r2, [pc, #96]	@ (8007614 <TIM_Base_SetConfig+0x164>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d003      	beq.n	80075c0 <TIM_Base_SetConfig+0x110>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a13      	ldr	r2, [pc, #76]	@ (8007608 <TIM_Base_SetConfig+0x158>)
 80075bc:	4293      	cmp	r3, r2
 80075be:	d103      	bne.n	80075c8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	691a      	ldr	r2, [r3, #16]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2201      	movs	r2, #1
 80075cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f003 0301 	and.w	r3, r3, #1
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d105      	bne.n	80075e6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	691b      	ldr	r3, [r3, #16]
 80075de:	f023 0201 	bic.w	r2, r3, #1
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	611a      	str	r2, [r3, #16]
  }
}
 80075e6:	bf00      	nop
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	40012c00 	.word	0x40012c00
 80075f8:	40000400 	.word	0x40000400
 80075fc:	40000800 	.word	0x40000800
 8007600:	40000c00 	.word	0x40000c00
 8007604:	40013400 	.word	0x40013400
 8007608:	40015000 	.word	0x40015000
 800760c:	40014000 	.word	0x40014000
 8007610:	40014400 	.word	0x40014400
 8007614:	40014800 	.word	0x40014800

08007618 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6a1b      	ldr	r3, [r3, #32]
 8007626:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	f023 0201 	bic.w	r2, r3, #1
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800764a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0303 	bic.w	r3, r3, #3
 8007652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	4313      	orrs	r3, r2
 800765c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f023 0302 	bic.w	r3, r3, #2
 8007664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a30      	ldr	r2, [pc, #192]	@ (8007734 <TIM_OC1_SetConfig+0x11c>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d013      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	4a2f      	ldr	r2, [pc, #188]	@ (8007738 <TIM_OC1_SetConfig+0x120>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d00f      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4a2e      	ldr	r2, [pc, #184]	@ (800773c <TIM_OC1_SetConfig+0x124>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d00b      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a2d      	ldr	r2, [pc, #180]	@ (8007740 <TIM_OC1_SetConfig+0x128>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d007      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a2c      	ldr	r2, [pc, #176]	@ (8007744 <TIM_OC1_SetConfig+0x12c>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d003      	beq.n	80076a0 <TIM_OC1_SetConfig+0x88>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a2b      	ldr	r2, [pc, #172]	@ (8007748 <TIM_OC1_SetConfig+0x130>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d10c      	bne.n	80076ba <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80076a0:	697b      	ldr	r3, [r7, #20]
 80076a2:	f023 0308 	bic.w	r3, r3, #8
 80076a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	f023 0304 	bic.w	r3, r3, #4
 80076b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007734 <TIM_OC1_SetConfig+0x11c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d013      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a1c      	ldr	r2, [pc, #112]	@ (8007738 <TIM_OC1_SetConfig+0x120>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d00f      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	4a1b      	ldr	r2, [pc, #108]	@ (800773c <TIM_OC1_SetConfig+0x124>)
 80076ce:	4293      	cmp	r3, r2
 80076d0:	d00b      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007740 <TIM_OC1_SetConfig+0x128>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d007      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a19      	ldr	r2, [pc, #100]	@ (8007744 <TIM_OC1_SetConfig+0x12c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d003      	beq.n	80076ea <TIM_OC1_SetConfig+0xd2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	4a18      	ldr	r2, [pc, #96]	@ (8007748 <TIM_OC1_SetConfig+0x130>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d111      	bne.n	800770e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	695b      	ldr	r3, [r3, #20]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	4313      	orrs	r3, r2
 8007702:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	4313      	orrs	r3, r2
 800770c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	697a      	ldr	r2, [r7, #20]
 8007726:	621a      	str	r2, [r3, #32]
}
 8007728:	bf00      	nop
 800772a:	371c      	adds	r7, #28
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr
 8007734:	40012c00 	.word	0x40012c00
 8007738:	40013400 	.word	0x40013400
 800773c:	40014000 	.word	0x40014000
 8007740:	40014400 	.word	0x40014400
 8007744:	40014800 	.word	0x40014800
 8007748:	40015000 	.word	0x40015000

0800774c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800774c:	b480      	push	{r7}
 800774e:	b087      	sub	sp, #28
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6a1b      	ldr	r3, [r3, #32]
 800775a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	f023 0210 	bic.w	r2, r3, #16
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800777a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800777e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	021b      	lsls	r3, r3, #8
 800778e:	68fa      	ldr	r2, [r7, #12]
 8007790:	4313      	orrs	r3, r2
 8007792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	f023 0320 	bic.w	r3, r3, #32
 800779a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	697a      	ldr	r2, [r7, #20]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	4a2c      	ldr	r2, [pc, #176]	@ (800785c <TIM_OC2_SetConfig+0x110>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d007      	beq.n	80077c0 <TIM_OC2_SetConfig+0x74>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007860 <TIM_OC2_SetConfig+0x114>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d003      	beq.n	80077c0 <TIM_OC2_SetConfig+0x74>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007864 <TIM_OC2_SetConfig+0x118>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d10d      	bne.n	80077dc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80077c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	011b      	lsls	r3, r3, #4
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a1f      	ldr	r2, [pc, #124]	@ (800785c <TIM_OC2_SetConfig+0x110>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d013      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a1e      	ldr	r2, [pc, #120]	@ (8007860 <TIM_OC2_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d00f      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007868 <TIM_OC2_SetConfig+0x11c>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d00b      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a1d      	ldr	r2, [pc, #116]	@ (800786c <TIM_OC2_SetConfig+0x120>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d007      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007870 <TIM_OC2_SetConfig+0x124>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d003      	beq.n	800780c <TIM_OC2_SetConfig+0xc0>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	4a17      	ldr	r2, [pc, #92]	@ (8007864 <TIM_OC2_SetConfig+0x118>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d113      	bne.n	8007834 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007812:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800781a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	695b      	ldr	r3, [r3, #20]
 8007820:	009b      	lsls	r3, r3, #2
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	4313      	orrs	r3, r2
 8007826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	009b      	lsls	r3, r3, #2
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4313      	orrs	r3, r2
 8007832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	693a      	ldr	r2, [r7, #16]
 8007838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	68fa      	ldr	r2, [r7, #12]
 800783e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	697a      	ldr	r2, [r7, #20]
 800784c:	621a      	str	r2, [r3, #32]
}
 800784e:	bf00      	nop
 8007850:	371c      	adds	r7, #28
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40015000 	.word	0x40015000
 8007868:	40014000 	.word	0x40014000
 800786c:	40014400 	.word	0x40014400
 8007870:	40014800 	.word	0x40014800

08007874 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6a1b      	ldr	r3, [r3, #32]
 8007882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0303 	bic.w	r3, r3, #3
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80078c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	021b      	lsls	r3, r3, #8
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007980 <TIM_OC3_SetConfig+0x10c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d007      	beq.n	80078e6 <TIM_OC3_SetConfig+0x72>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	4a2a      	ldr	r2, [pc, #168]	@ (8007984 <TIM_OC3_SetConfig+0x110>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	d003      	beq.n	80078e6 <TIM_OC3_SetConfig+0x72>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4a29      	ldr	r2, [pc, #164]	@ (8007988 <TIM_OC3_SetConfig+0x114>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d10d      	bne.n	8007902 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	021b      	lsls	r3, r3, #8
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007900:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a1e      	ldr	r2, [pc, #120]	@ (8007980 <TIM_OC3_SetConfig+0x10c>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d013      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a1d      	ldr	r2, [pc, #116]	@ (8007984 <TIM_OC3_SetConfig+0x110>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00f      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a1d      	ldr	r2, [pc, #116]	@ (800798c <TIM_OC3_SetConfig+0x118>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d00b      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a1c      	ldr	r2, [pc, #112]	@ (8007990 <TIM_OC3_SetConfig+0x11c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d007      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a1b      	ldr	r2, [pc, #108]	@ (8007994 <TIM_OC3_SetConfig+0x120>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d003      	beq.n	8007932 <TIM_OC3_SetConfig+0xbe>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a16      	ldr	r2, [pc, #88]	@ (8007988 <TIM_OC3_SetConfig+0x114>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d113      	bne.n	800795a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695b      	ldr	r3, [r3, #20]
 8007946:	011b      	lsls	r3, r3, #4
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4313      	orrs	r3, r2
 800794c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	011b      	lsls	r3, r3, #4
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	4313      	orrs	r3, r2
 8007958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	685a      	ldr	r2, [r3, #4]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	621a      	str	r2, [r3, #32]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	40012c00 	.word	0x40012c00
 8007984:	40013400 	.word	0x40013400
 8007988:	40015000 	.word	0x40015000
 800798c:	40014000 	.word	0x40014000
 8007990:	40014400 	.word	0x40014400
 8007994:	40014800 	.word	0x40014800

08007998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007998:	b480      	push	{r7}
 800799a:	b087      	sub	sp, #28
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	021b      	lsls	r3, r3, #8
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4313      	orrs	r3, r2
 80079de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80079e0:	697b      	ldr	r3, [r7, #20]
 80079e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	4a2c      	ldr	r2, [pc, #176]	@ (8007aa8 <TIM_OC4_SetConfig+0x110>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d007      	beq.n	8007a0c <TIM_OC4_SetConfig+0x74>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	4a2b      	ldr	r2, [pc, #172]	@ (8007aac <TIM_OC4_SetConfig+0x114>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d003      	beq.n	8007a0c <TIM_OC4_SetConfig+0x74>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4a2a      	ldr	r2, [pc, #168]	@ (8007ab0 <TIM_OC4_SetConfig+0x118>)
 8007a08:	4293      	cmp	r3, r2
 8007a0a:	d10d      	bne.n	8007a28 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	68db      	ldr	r3, [r3, #12]
 8007a18:	031b      	lsls	r3, r3, #12
 8007a1a:	697a      	ldr	r2, [r7, #20]
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a26:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	4a1f      	ldr	r2, [pc, #124]	@ (8007aa8 <TIM_OC4_SetConfig+0x110>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4a1e      	ldr	r2, [pc, #120]	@ (8007aac <TIM_OC4_SetConfig+0x114>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d00f      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8007ab4 <TIM_OC4_SetConfig+0x11c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d00b      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab8 <TIM_OC4_SetConfig+0x120>)
 8007a44:	4293      	cmp	r3, r2
 8007a46:	d007      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	@ (8007abc <TIM_OC4_SetConfig+0x124>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d003      	beq.n	8007a58 <TIM_OC4_SetConfig+0xc0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	4a17      	ldr	r2, [pc, #92]	@ (8007ab0 <TIM_OC4_SetConfig+0x118>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d113      	bne.n	8007a80 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007a5e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a66:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	019b      	lsls	r3, r3, #6
 8007a6e:	693a      	ldr	r2, [r7, #16]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	699b      	ldr	r3, [r3, #24]
 8007a78:	019b      	lsls	r3, r3, #6
 8007a7a:	693a      	ldr	r2, [r7, #16]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	685a      	ldr	r2, [r3, #4]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	697a      	ldr	r2, [r7, #20]
 8007a98:	621a      	str	r2, [r3, #32]
}
 8007a9a:	bf00      	nop
 8007a9c:	371c      	adds	r7, #28
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40012c00 	.word	0x40012c00
 8007aac:	40013400 	.word	0x40013400
 8007ab0:	40015000 	.word	0x40015000
 8007ab4:	40014000 	.word	0x40014000
 8007ab8:	40014400 	.word	0x40014400
 8007abc:	40014800 	.word	0x40014800

08007ac0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b087      	sub	sp, #28
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a1b      	ldr	r3, [r3, #32]
 8007ace:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a1b      	ldr	r3, [r3, #32]
 8007ad4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007af2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	041b      	lsls	r3, r3, #16
 8007b0c:	693a      	ldr	r2, [r7, #16]
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	4a19      	ldr	r2, [pc, #100]	@ (8007b7c <TIM_OC5_SetConfig+0xbc>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a18      	ldr	r2, [pc, #96]	@ (8007b80 <TIM_OC5_SetConfig+0xc0>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00f      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	4a17      	ldr	r2, [pc, #92]	@ (8007b84 <TIM_OC5_SetConfig+0xc4>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d00b      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a16      	ldr	r2, [pc, #88]	@ (8007b88 <TIM_OC5_SetConfig+0xc8>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d007      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4a15      	ldr	r2, [pc, #84]	@ (8007b8c <TIM_OC5_SetConfig+0xcc>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d003      	beq.n	8007b42 <TIM_OC5_SetConfig+0x82>
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a14      	ldr	r2, [pc, #80]	@ (8007b90 <TIM_OC5_SetConfig+0xd0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d109      	bne.n	8007b56 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	695b      	ldr	r3, [r3, #20]
 8007b4e:	021b      	lsls	r3, r3, #8
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	697a      	ldr	r2, [r7, #20]
 8007b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	685a      	ldr	r2, [r3, #4]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	693a      	ldr	r2, [r7, #16]
 8007b6e:	621a      	str	r2, [r3, #32]
}
 8007b70:	bf00      	nop
 8007b72:	371c      	adds	r7, #28
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	40012c00 	.word	0x40012c00
 8007b80:	40013400 	.word	0x40013400
 8007b84:	40014000 	.word	0x40014000
 8007b88:	40014400 	.word	0x40014400
 8007b8c:	40014800 	.word	0x40014800
 8007b90:	40015000 	.word	0x40015000

08007b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6a1b      	ldr	r3, [r3, #32]
 8007ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a1b      	ldr	r3, [r3, #32]
 8007ba8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	021b      	lsls	r3, r3, #8
 8007bce:	68fa      	ldr	r2, [r7, #12]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	051b      	lsls	r3, r3, #20
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	4313      	orrs	r3, r2
 8007be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a1a      	ldr	r2, [pc, #104]	@ (8007c54 <TIM_OC6_SetConfig+0xc0>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d013      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a19      	ldr	r2, [pc, #100]	@ (8007c58 <TIM_OC6_SetConfig+0xc4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d00f      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a18      	ldr	r2, [pc, #96]	@ (8007c5c <TIM_OC6_SetConfig+0xc8>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d00b      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a17      	ldr	r2, [pc, #92]	@ (8007c60 <TIM_OC6_SetConfig+0xcc>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d007      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a16      	ldr	r2, [pc, #88]	@ (8007c64 <TIM_OC6_SetConfig+0xd0>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d003      	beq.n	8007c18 <TIM_OC6_SetConfig+0x84>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a15      	ldr	r2, [pc, #84]	@ (8007c68 <TIM_OC6_SetConfig+0xd4>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d109      	bne.n	8007c2c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	029b      	lsls	r3, r3, #10
 8007c26:	697a      	ldr	r2, [r7, #20]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	697a      	ldr	r2, [r7, #20]
 8007c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40013400 	.word	0x40013400
 8007c5c:	40014000 	.word	0x40014000
 8007c60:	40014400 	.word	0x40014400
 8007c64:	40014800 	.word	0x40014800
 8007c68:	40015000 	.word	0x40015000

08007c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	f023 0201 	bic.w	r2, r3, #1
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	011b      	lsls	r3, r3, #4
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	f023 030a 	bic.w	r3, r3, #10
 8007ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	621a      	str	r2, [r3, #32]
}
 8007cbe:	bf00      	nop
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr

08007cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b087      	sub	sp, #28
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	60f8      	str	r0, [r7, #12]
 8007cd2:	60b9      	str	r1, [r7, #8]
 8007cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a1b      	ldr	r3, [r3, #32]
 8007cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6a1b      	ldr	r3, [r3, #32]
 8007ce0:	f023 0210 	bic.w	r2, r3, #16
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	699b      	ldr	r3, [r3, #24]
 8007cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	697a      	ldr	r2, [r7, #20]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	621a      	str	r2, [r3, #32]
}
 8007d1e:	bf00      	nop
 8007d20:	371c      	adds	r7, #28
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d2a:	b480      	push	{r7}
 8007d2c:	b085      	sub	sp, #20
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
 8007d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007d40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4313      	orrs	r3, r2
 8007d4c:	f043 0307 	orr.w	r3, r3, #7
 8007d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68fa      	ldr	r2, [r7, #12]
 8007d56:	609a      	str	r2, [r3, #8]
}
 8007d58:	bf00      	nop
 8007d5a:	3714      	adds	r7, #20
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b087      	sub	sp, #28
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	607a      	str	r2, [r7, #4]
 8007d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	689b      	ldr	r3, [r3, #8]
 8007d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	021a      	lsls	r2, r3, #8
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	4313      	orrs	r3, r2
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	697a      	ldr	r2, [r7, #20]
 8007d96:	609a      	str	r2, [r3, #8]
}
 8007d98:	bf00      	nop
 8007d9a:	371c      	adds	r7, #28
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007da4:	b480      	push	{r7}
 8007da6:	b087      	sub	sp, #28
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	f003 031f 	and.w	r3, r3, #31
 8007db6:	2201      	movs	r2, #1
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	6a1a      	ldr	r2, [r3, #32]
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	43db      	mvns	r3, r3
 8007dc6:	401a      	ands	r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1a      	ldr	r2, [r3, #32]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 031f 	and.w	r3, r3, #31
 8007dd6:	6879      	ldr	r1, [r7, #4]
 8007dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	621a      	str	r2, [r3, #32]
}
 8007de2:	bf00      	nop
 8007de4:	371c      	adds	r7, #28
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e00:	2b01      	cmp	r3, #1
 8007e02:	d101      	bne.n	8007e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e04:	2302      	movs	r3, #2
 8007e06:	e074      	b.n	8007ef2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a34      	ldr	r2, [pc, #208]	@ (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d009      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a33      	ldr	r2, [pc, #204]	@ (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d004      	beq.n	8007e46 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a31      	ldr	r2, [pc, #196]	@ (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d108      	bne.n	8007e58 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007e4c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007e5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a21      	ldr	r2, [pc, #132]	@ (8007f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d022      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e88:	d01d      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f0c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d018      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	@ (8007f10 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d013      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f14 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d00e      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a15      	ldr	r2, [pc, #84]	@ (8007f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d009      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a18      	ldr	r2, [pc, #96]	@ (8007f18 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a11      	ldr	r2, [pc, #68]	@ (8007f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d10c      	bne.n	8007ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ecc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	68ba      	ldr	r2, [r7, #8]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68ba      	ldr	r2, [r7, #8]
 8007ede:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3714      	adds	r7, #20
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	40012c00 	.word	0x40012c00
 8007f04:	40013400 	.word	0x40013400
 8007f08:	40015000 	.word	0x40015000
 8007f0c:	40000400 	.word	0x40000400
 8007f10:	40000800 	.word	0x40000800
 8007f14:	40000c00 	.word	0x40000c00
 8007f18:	40014000 	.word	0x40014000

08007f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b085      	sub	sp, #20
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007f26:	2300      	movs	r3, #0
 8007f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d101      	bne.n	8007f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007f34:	2302      	movs	r3, #2
 8007f36:	e078      	b.n	800802a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	68db      	ldr	r3, [r3, #12]
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	4313      	orrs	r3, r2
 8007f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	699b      	ldr	r3, [r3, #24]
 8007fac:	041b      	lsls	r3, r3, #16
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8008038 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d009      	beq.n	8007fde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a1b      	ldr	r2, [pc, #108]	@ (800803c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d004      	beq.n	8007fde <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a19      	ldr	r2, [pc, #100]	@ (8008040 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d11c      	bne.n	8008018 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe8:	051b      	lsls	r3, r3, #20
 8007fea:	4313      	orrs	r3, r2
 8007fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	6a1b      	ldr	r3, [r3, #32]
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008014:	4313      	orrs	r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008028:	2300      	movs	r3, #0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3714      	adds	r7, #20
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	40012c00 	.word	0x40012c00
 800803c:	40013400 	.word	0x40013400
 8008040:	40015000 	.word	0x40015000

08008044 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b082      	sub	sp, #8
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d101      	bne.n	8008056 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e042      	b.n	80080dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800805c:	2b00      	cmp	r3, #0
 800805e:	d106      	bne.n	800806e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2200      	movs	r2, #0
 8008064:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f7fa fc8b 	bl	8002984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2224      	movs	r2, #36	@ 0x24
 8008072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f022 0201 	bic.w	r2, r2, #1
 8008084:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d002      	beq.n	8008094 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 fb24 	bl	80086dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 f825 	bl	80080e4 <UART_SetConfig>
 800809a:	4603      	mov	r3, r0
 800809c:	2b01      	cmp	r3, #1
 800809e:	d101      	bne.n	80080a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e01b      	b.n	80080dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80080b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	689a      	ldr	r2, [r3, #8]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80080c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f042 0201 	orr.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fba3 	bl	8008820 <UART_CheckIdleState>
 80080da:	4603      	mov	r3, r0
}
 80080dc:	4618      	mov	r0, r3
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080e8:	b08c      	sub	sp, #48	@ 0x30
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	691b      	ldr	r3, [r3, #16]
 80080fc:	431a      	orrs	r2, r3
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	431a      	orrs	r2, r3
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	69db      	ldr	r3, [r3, #28]
 8008108:	4313      	orrs	r3, r2
 800810a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	4baa      	ldr	r3, [pc, #680]	@ (80083bc <UART_SetConfig+0x2d8>)
 8008114:	4013      	ands	r3, r2
 8008116:	697a      	ldr	r2, [r7, #20]
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800811c:	430b      	orrs	r3, r1
 800811e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	68da      	ldr	r2, [r3, #12]
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	699b      	ldr	r3, [r3, #24]
 800813a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a9f      	ldr	r2, [pc, #636]	@ (80083c0 <UART_SetConfig+0x2dc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d004      	beq.n	8008150 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a1b      	ldr	r3, [r3, #32]
 800814a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800814c:	4313      	orrs	r3, r2
 800814e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800815a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6812      	ldr	r2, [r2, #0]
 8008162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008164:	430b      	orrs	r3, r1
 8008166:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816e:	f023 010f 	bic.w	r1, r3, #15
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008176:	697b      	ldr	r3, [r7, #20]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a90      	ldr	r2, [pc, #576]	@ (80083c4 <UART_SetConfig+0x2e0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d125      	bne.n	80081d4 <UART_SetConfig+0xf0>
 8008188:	4b8f      	ldr	r3, [pc, #572]	@ (80083c8 <UART_SetConfig+0x2e4>)
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800818e:	f003 0303 	and.w	r3, r3, #3
 8008192:	2b03      	cmp	r3, #3
 8008194:	d81a      	bhi.n	80081cc <UART_SetConfig+0xe8>
 8008196:	a201      	add	r2, pc, #4	@ (adr r2, 800819c <UART_SetConfig+0xb8>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081ad 	.word	0x080081ad
 80081a0:	080081bd 	.word	0x080081bd
 80081a4:	080081b5 	.word	0x080081b5
 80081a8:	080081c5 	.word	0x080081c5
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081b2:	e116      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80081b4:	2302      	movs	r3, #2
 80081b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ba:	e112      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80081bc:	2304      	movs	r3, #4
 80081be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081c2:	e10e      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80081c4:	2308      	movs	r3, #8
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081ca:	e10a      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80081cc:	2310      	movs	r3, #16
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80081d2:	e106      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a7c      	ldr	r2, [pc, #496]	@ (80083cc <UART_SetConfig+0x2e8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d138      	bne.n	8008250 <UART_SetConfig+0x16c>
 80081de:	4b7a      	ldr	r3, [pc, #488]	@ (80083c8 <UART_SetConfig+0x2e4>)
 80081e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80081e4:	f003 030c 	and.w	r3, r3, #12
 80081e8:	2b0c      	cmp	r3, #12
 80081ea:	d82d      	bhi.n	8008248 <UART_SetConfig+0x164>
 80081ec:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <UART_SetConfig+0x110>)
 80081ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f2:	bf00      	nop
 80081f4:	08008229 	.word	0x08008229
 80081f8:	08008249 	.word	0x08008249
 80081fc:	08008249 	.word	0x08008249
 8008200:	08008249 	.word	0x08008249
 8008204:	08008239 	.word	0x08008239
 8008208:	08008249 	.word	0x08008249
 800820c:	08008249 	.word	0x08008249
 8008210:	08008249 	.word	0x08008249
 8008214:	08008231 	.word	0x08008231
 8008218:	08008249 	.word	0x08008249
 800821c:	08008249 	.word	0x08008249
 8008220:	08008249 	.word	0x08008249
 8008224:	08008241 	.word	0x08008241
 8008228:	2300      	movs	r3, #0
 800822a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800822e:	e0d8      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008230:	2302      	movs	r3, #2
 8008232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008236:	e0d4      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008238:	2304      	movs	r3, #4
 800823a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800823e:	e0d0      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008240:	2308      	movs	r3, #8
 8008242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008246:	e0cc      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008248:	2310      	movs	r3, #16
 800824a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800824e:	e0c8      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a5e      	ldr	r2, [pc, #376]	@ (80083d0 <UART_SetConfig+0x2ec>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d125      	bne.n	80082a6 <UART_SetConfig+0x1c2>
 800825a:	4b5b      	ldr	r3, [pc, #364]	@ (80083c8 <UART_SetConfig+0x2e4>)
 800825c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008260:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008264:	2b30      	cmp	r3, #48	@ 0x30
 8008266:	d016      	beq.n	8008296 <UART_SetConfig+0x1b2>
 8008268:	2b30      	cmp	r3, #48	@ 0x30
 800826a:	d818      	bhi.n	800829e <UART_SetConfig+0x1ba>
 800826c:	2b20      	cmp	r3, #32
 800826e:	d00a      	beq.n	8008286 <UART_SetConfig+0x1a2>
 8008270:	2b20      	cmp	r3, #32
 8008272:	d814      	bhi.n	800829e <UART_SetConfig+0x1ba>
 8008274:	2b00      	cmp	r3, #0
 8008276:	d002      	beq.n	800827e <UART_SetConfig+0x19a>
 8008278:	2b10      	cmp	r3, #16
 800827a:	d008      	beq.n	800828e <UART_SetConfig+0x1aa>
 800827c:	e00f      	b.n	800829e <UART_SetConfig+0x1ba>
 800827e:	2300      	movs	r3, #0
 8008280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008284:	e0ad      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008286:	2302      	movs	r3, #2
 8008288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800828c:	e0a9      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800828e:	2304      	movs	r3, #4
 8008290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008294:	e0a5      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008296:	2308      	movs	r3, #8
 8008298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800829c:	e0a1      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800829e:	2310      	movs	r3, #16
 80082a0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082a4:	e09d      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a4a      	ldr	r2, [pc, #296]	@ (80083d4 <UART_SetConfig+0x2f0>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d125      	bne.n	80082fc <UART_SetConfig+0x218>
 80082b0:	4b45      	ldr	r3, [pc, #276]	@ (80083c8 <UART_SetConfig+0x2e4>)
 80082b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082b6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80082ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80082bc:	d016      	beq.n	80082ec <UART_SetConfig+0x208>
 80082be:	2bc0      	cmp	r3, #192	@ 0xc0
 80082c0:	d818      	bhi.n	80082f4 <UART_SetConfig+0x210>
 80082c2:	2b80      	cmp	r3, #128	@ 0x80
 80082c4:	d00a      	beq.n	80082dc <UART_SetConfig+0x1f8>
 80082c6:	2b80      	cmp	r3, #128	@ 0x80
 80082c8:	d814      	bhi.n	80082f4 <UART_SetConfig+0x210>
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d002      	beq.n	80082d4 <UART_SetConfig+0x1f0>
 80082ce:	2b40      	cmp	r3, #64	@ 0x40
 80082d0:	d008      	beq.n	80082e4 <UART_SetConfig+0x200>
 80082d2:	e00f      	b.n	80082f4 <UART_SetConfig+0x210>
 80082d4:	2300      	movs	r3, #0
 80082d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082da:	e082      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082dc:	2302      	movs	r3, #2
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082e2:	e07e      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082e4:	2304      	movs	r3, #4
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082ea:	e07a      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082ec:	2308      	movs	r3, #8
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082f2:	e076      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082f4:	2310      	movs	r3, #16
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80082fa:	e072      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a35      	ldr	r2, [pc, #212]	@ (80083d8 <UART_SetConfig+0x2f4>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d12a      	bne.n	800835c <UART_SetConfig+0x278>
 8008306:	4b30      	ldr	r3, [pc, #192]	@ (80083c8 <UART_SetConfig+0x2e4>)
 8008308:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800830c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008310:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008314:	d01a      	beq.n	800834c <UART_SetConfig+0x268>
 8008316:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800831a:	d81b      	bhi.n	8008354 <UART_SetConfig+0x270>
 800831c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008320:	d00c      	beq.n	800833c <UART_SetConfig+0x258>
 8008322:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008326:	d815      	bhi.n	8008354 <UART_SetConfig+0x270>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d003      	beq.n	8008334 <UART_SetConfig+0x250>
 800832c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008330:	d008      	beq.n	8008344 <UART_SetConfig+0x260>
 8008332:	e00f      	b.n	8008354 <UART_SetConfig+0x270>
 8008334:	2300      	movs	r3, #0
 8008336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800833a:	e052      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800833c:	2302      	movs	r3, #2
 800833e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008342:	e04e      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008344:	2304      	movs	r3, #4
 8008346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800834a:	e04a      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800834c:	2308      	movs	r3, #8
 800834e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008352:	e046      	b.n	80083e2 <UART_SetConfig+0x2fe>
 8008354:	2310      	movs	r3, #16
 8008356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800835a:	e042      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800835c:	697b      	ldr	r3, [r7, #20]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4a17      	ldr	r2, [pc, #92]	@ (80083c0 <UART_SetConfig+0x2dc>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d13a      	bne.n	80083dc <UART_SetConfig+0x2f8>
 8008366:	4b18      	ldr	r3, [pc, #96]	@ (80083c8 <UART_SetConfig+0x2e4>)
 8008368:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800836c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008370:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008374:	d01a      	beq.n	80083ac <UART_SetConfig+0x2c8>
 8008376:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800837a:	d81b      	bhi.n	80083b4 <UART_SetConfig+0x2d0>
 800837c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008380:	d00c      	beq.n	800839c <UART_SetConfig+0x2b8>
 8008382:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008386:	d815      	bhi.n	80083b4 <UART_SetConfig+0x2d0>
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <UART_SetConfig+0x2b0>
 800838c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008390:	d008      	beq.n	80083a4 <UART_SetConfig+0x2c0>
 8008392:	e00f      	b.n	80083b4 <UART_SetConfig+0x2d0>
 8008394:	2300      	movs	r3, #0
 8008396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800839a:	e022      	b.n	80083e2 <UART_SetConfig+0x2fe>
 800839c:	2302      	movs	r3, #2
 800839e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083a2:	e01e      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80083a4:	2304      	movs	r3, #4
 80083a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083aa:	e01a      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80083ac:	2308      	movs	r3, #8
 80083ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083b2:	e016      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80083b4:	2310      	movs	r3, #16
 80083b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80083ba:	e012      	b.n	80083e2 <UART_SetConfig+0x2fe>
 80083bc:	cfff69f3 	.word	0xcfff69f3
 80083c0:	40008000 	.word	0x40008000
 80083c4:	40013800 	.word	0x40013800
 80083c8:	40021000 	.word	0x40021000
 80083cc:	40004400 	.word	0x40004400
 80083d0:	40004800 	.word	0x40004800
 80083d4:	40004c00 	.word	0x40004c00
 80083d8:	40005000 	.word	0x40005000
 80083dc:	2310      	movs	r3, #16
 80083de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	4aae      	ldr	r2, [pc, #696]	@ (80086a0 <UART_SetConfig+0x5bc>)
 80083e8:	4293      	cmp	r3, r2
 80083ea:	f040 8097 	bne.w	800851c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083f2:	2b08      	cmp	r3, #8
 80083f4:	d823      	bhi.n	800843e <UART_SetConfig+0x35a>
 80083f6:	a201      	add	r2, pc, #4	@ (adr r2, 80083fc <UART_SetConfig+0x318>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	08008421 	.word	0x08008421
 8008400:	0800843f 	.word	0x0800843f
 8008404:	08008429 	.word	0x08008429
 8008408:	0800843f 	.word	0x0800843f
 800840c:	0800842f 	.word	0x0800842f
 8008410:	0800843f 	.word	0x0800843f
 8008414:	0800843f 	.word	0x0800843f
 8008418:	0800843f 	.word	0x0800843f
 800841c:	08008437 	.word	0x08008437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008420:	f7fe f922 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 8008424:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008426:	e010      	b.n	800844a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008428:	4b9e      	ldr	r3, [pc, #632]	@ (80086a4 <UART_SetConfig+0x5c0>)
 800842a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800842c:	e00d      	b.n	800844a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800842e:	f7fe f8af 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8008432:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008434:	e009      	b.n	800844a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008436:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800843a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800843c:	e005      	b.n	800844a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800843e:	2300      	movs	r3, #0
 8008440:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008448:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 8130 	beq.w	80086b2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008456:	4a94      	ldr	r2, [pc, #592]	@ (80086a8 <UART_SetConfig+0x5c4>)
 8008458:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800845c:	461a      	mov	r2, r3
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	fbb3 f3f2 	udiv	r3, r3, r2
 8008464:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	4613      	mov	r3, r2
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4413      	add	r3, r2
 8008470:	69ba      	ldr	r2, [r7, #24]
 8008472:	429a      	cmp	r2, r3
 8008474:	d305      	bcc.n	8008482 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800847c:	69ba      	ldr	r2, [r7, #24]
 800847e:	429a      	cmp	r2, r3
 8008480:	d903      	bls.n	800848a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008488:	e113      	b.n	80086b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800848a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848c:	2200      	movs	r2, #0
 800848e:	60bb      	str	r3, [r7, #8]
 8008490:	60fa      	str	r2, [r7, #12]
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008496:	4a84      	ldr	r2, [pc, #528]	@ (80086a8 <UART_SetConfig+0x5c4>)
 8008498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800849c:	b29b      	uxth	r3, r3
 800849e:	2200      	movs	r2, #0
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084ac:	f7f8 fa72 	bl	8000994 <__aeabi_uldivmod>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	4610      	mov	r0, r2
 80084b6:	4619      	mov	r1, r3
 80084b8:	f04f 0200 	mov.w	r2, #0
 80084bc:	f04f 0300 	mov.w	r3, #0
 80084c0:	020b      	lsls	r3, r1, #8
 80084c2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80084c6:	0202      	lsls	r2, r0, #8
 80084c8:	6979      	ldr	r1, [r7, #20]
 80084ca:	6849      	ldr	r1, [r1, #4]
 80084cc:	0849      	lsrs	r1, r1, #1
 80084ce:	2000      	movs	r0, #0
 80084d0:	460c      	mov	r4, r1
 80084d2:	4605      	mov	r5, r0
 80084d4:	eb12 0804 	adds.w	r8, r2, r4
 80084d8:	eb43 0905 	adc.w	r9, r3, r5
 80084dc:	697b      	ldr	r3, [r7, #20]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	469a      	mov	sl, r3
 80084e4:	4693      	mov	fp, r2
 80084e6:	4652      	mov	r2, sl
 80084e8:	465b      	mov	r3, fp
 80084ea:	4640      	mov	r0, r8
 80084ec:	4649      	mov	r1, r9
 80084ee:	f7f8 fa51 	bl	8000994 <__aeabi_uldivmod>
 80084f2:	4602      	mov	r2, r0
 80084f4:	460b      	mov	r3, r1
 80084f6:	4613      	mov	r3, r2
 80084f8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80084fa:	6a3b      	ldr	r3, [r7, #32]
 80084fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008500:	d308      	bcc.n	8008514 <UART_SetConfig+0x430>
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008508:	d204      	bcs.n	8008514 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6a3a      	ldr	r2, [r7, #32]
 8008510:	60da      	str	r2, [r3, #12]
 8008512:	e0ce      	b.n	80086b2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800851a:	e0ca      	b.n	80086b2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008524:	d166      	bne.n	80085f4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008526:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800852a:	2b08      	cmp	r3, #8
 800852c:	d827      	bhi.n	800857e <UART_SetConfig+0x49a>
 800852e:	a201      	add	r2, pc, #4	@ (adr r2, 8008534 <UART_SetConfig+0x450>)
 8008530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008534:	08008559 	.word	0x08008559
 8008538:	08008561 	.word	0x08008561
 800853c:	08008569 	.word	0x08008569
 8008540:	0800857f 	.word	0x0800857f
 8008544:	0800856f 	.word	0x0800856f
 8008548:	0800857f 	.word	0x0800857f
 800854c:	0800857f 	.word	0x0800857f
 8008550:	0800857f 	.word	0x0800857f
 8008554:	08008577 	.word	0x08008577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008558:	f7fe f886 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800855c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800855e:	e014      	b.n	800858a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008560:	f7fe f898 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008566:	e010      	b.n	800858a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008568:	4b4e      	ldr	r3, [pc, #312]	@ (80086a4 <UART_SetConfig+0x5c0>)
 800856a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800856c:	e00d      	b.n	800858a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800856e:	f7fe f80f 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8008572:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008574:	e009      	b.n	800858a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800857a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800857c:	e005      	b.n	800858a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800857e:	2300      	movs	r3, #0
 8008580:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008588:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	2b00      	cmp	r3, #0
 800858e:	f000 8090 	beq.w	80086b2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008596:	4a44      	ldr	r2, [pc, #272]	@ (80086a8 <UART_SetConfig+0x5c4>)
 8008598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800859c:	461a      	mov	r2, r3
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80085a4:	005a      	lsls	r2, r3, #1
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	085b      	lsrs	r3, r3, #1
 80085ac:	441a      	add	r2, r3
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b8:	6a3b      	ldr	r3, [r7, #32]
 80085ba:	2b0f      	cmp	r3, #15
 80085bc:	d916      	bls.n	80085ec <UART_SetConfig+0x508>
 80085be:	6a3b      	ldr	r3, [r7, #32]
 80085c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80085c4:	d212      	bcs.n	80085ec <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c6:	6a3b      	ldr	r3, [r7, #32]
 80085c8:	b29b      	uxth	r3, r3
 80085ca:	f023 030f 	bic.w	r3, r3, #15
 80085ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	085b      	lsrs	r3, r3, #1
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	b29a      	uxth	r2, r3
 80085dc:	8bfb      	ldrh	r3, [r7, #30]
 80085de:	4313      	orrs	r3, r2
 80085e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80085e2:	697b      	ldr	r3, [r7, #20]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	8bfa      	ldrh	r2, [r7, #30]
 80085e8:	60da      	str	r2, [r3, #12]
 80085ea:	e062      	b.n	80086b2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80085f2:	e05e      	b.n	80086b2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085f4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d828      	bhi.n	800864e <UART_SetConfig+0x56a>
 80085fc:	a201      	add	r2, pc, #4	@ (adr r2, 8008604 <UART_SetConfig+0x520>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008629 	.word	0x08008629
 8008608:	08008631 	.word	0x08008631
 800860c:	08008639 	.word	0x08008639
 8008610:	0800864f 	.word	0x0800864f
 8008614:	0800863f 	.word	0x0800863f
 8008618:	0800864f 	.word	0x0800864f
 800861c:	0800864f 	.word	0x0800864f
 8008620:	0800864f 	.word	0x0800864f
 8008624:	08008647 	.word	0x08008647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008628:	f7fe f81e 	bl	8006668 <HAL_RCC_GetPCLK1Freq>
 800862c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800862e:	e014      	b.n	800865a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008630:	f7fe f830 	bl	8006694 <HAL_RCC_GetPCLK2Freq>
 8008634:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008636:	e010      	b.n	800865a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008638:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <UART_SetConfig+0x5c0>)
 800863a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800863c:	e00d      	b.n	800865a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800863e:	f7fd ffa7 	bl	8006590 <HAL_RCC_GetSysClockFreq>
 8008642:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008644:	e009      	b.n	800865a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008646:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800864a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800864c:	e005      	b.n	800865a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800864e:	2300      	movs	r3, #0
 8008650:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008658:	bf00      	nop
    }

    if (pclk != 0U)
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	2b00      	cmp	r3, #0
 800865e:	d028      	beq.n	80086b2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008664:	4a10      	ldr	r2, [pc, #64]	@ (80086a8 <UART_SetConfig+0x5c4>)
 8008666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866a:	461a      	mov	r2, r3
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	085b      	lsrs	r3, r3, #1
 8008678:	441a      	add	r2, r3
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008682:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008684:	6a3b      	ldr	r3, [r7, #32]
 8008686:	2b0f      	cmp	r3, #15
 8008688:	d910      	bls.n	80086ac <UART_SetConfig+0x5c8>
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008690:	d20c      	bcs.n	80086ac <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008692:	6a3b      	ldr	r3, [r7, #32]
 8008694:	b29a      	uxth	r2, r3
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60da      	str	r2, [r3, #12]
 800869c:	e009      	b.n	80086b2 <UART_SetConfig+0x5ce>
 800869e:	bf00      	nop
 80086a0:	40008000 	.word	0x40008000
 80086a4:	00f42400 	.word	0x00f42400
 80086a8:	08008da8 	.word	0x08008da8
      }
      else
      {
        ret = HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	2201      	movs	r2, #1
 80086b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	2201      	movs	r2, #1
 80086be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	2200      	movs	r2, #0
 80086c6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2200      	movs	r2, #0
 80086cc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80086ce:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3730      	adds	r7, #48	@ 0x30
 80086d6:	46bd      	mov	sp, r7
 80086d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080086dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00a      	beq.n	8008706 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b00      	cmp	r3, #0
 8008710:	d00a      	beq.n	8008728 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872c:	f003 0302 	and.w	r3, r3, #2
 8008730:	2b00      	cmp	r3, #0
 8008732:	d00a      	beq.n	800874a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	430a      	orrs	r2, r1
 8008748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800874e:	f003 0304 	and.w	r3, r3, #4
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	430a      	orrs	r2, r1
 800876a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008770:	f003 0310 	and.w	r3, r3, #16
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	689b      	ldr	r3, [r3, #8]
 800877e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d01a      	beq.n	80087f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087da:	d10a      	bne.n	80087f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	430a      	orrs	r2, r1
 8008812:	605a      	str	r2, [r3, #4]
  }
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b098      	sub	sp, #96	@ 0x60
 8008824:	af02      	add	r7, sp, #8
 8008826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008830:	f7fa fad2 	bl	8002dd8 <HAL_GetTick>
 8008834:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b08      	cmp	r3, #8
 8008842:	d12f      	bne.n	80088a4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008844:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800884c:	2200      	movs	r2, #0
 800884e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 f88e 	bl	8008974 <UART_WaitOnFlagUntilTimeout>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d022      	beq.n	80088a4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800886c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800886e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008872:	653b      	str	r3, [r7, #80]	@ 0x50
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800887c:	647b      	str	r3, [r7, #68]	@ 0x44
 800887e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008882:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800888a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2220      	movs	r2, #32
 8008894:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088a0:	2303      	movs	r3, #3
 80088a2:	e063      	b.n	800896c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 0304 	and.w	r3, r3, #4
 80088ae:	2b04      	cmp	r3, #4
 80088b0:	d149      	bne.n	8008946 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088b2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80088ba:	2200      	movs	r2, #0
 80088bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f857 	bl	8008974 <UART_WaitOnFlagUntilTimeout>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d03c      	beq.n	8008946 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	623b      	str	r3, [r7, #32]
   return(result);
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80088e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80088ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80088f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e6      	bne.n	80088cc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3308      	adds	r3, #8
 8008904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	e853 3f00 	ldrex	r3, [r3]
 800890c:	60fb      	str	r3, [r7, #12]
   return(result);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f023 0301 	bic.w	r3, r3, #1
 8008914:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800891e:	61fa      	str	r2, [r7, #28]
 8008920:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008922:	69b9      	ldr	r1, [r7, #24]
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	e841 2300 	strex	r3, r2, [r1]
 800892a:	617b      	str	r3, [r7, #20]
   return(result);
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d1e5      	bne.n	80088fe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2220      	movs	r2, #32
 8008936:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e012      	b.n	800896c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2220      	movs	r2, #32
 800894a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2200      	movs	r2, #0
 8008960:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	3758      	adds	r7, #88	@ 0x58
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	603b      	str	r3, [r7, #0]
 8008980:	4613      	mov	r3, r2
 8008982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008984:	e04f      	b.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800898c:	d04b      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800898e:	f7fa fa23 	bl	8002dd8 <HAL_GetTick>
 8008992:	4602      	mov	r2, r0
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	1ad3      	subs	r3, r2, r3
 8008998:	69ba      	ldr	r2, [r7, #24]
 800899a:	429a      	cmp	r2, r3
 800899c:	d302      	bcc.n	80089a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80089a4:	2303      	movs	r3, #3
 80089a6:	e04e      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d037      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b80      	cmp	r3, #128	@ 0x80
 80089ba:	d034      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b40      	cmp	r3, #64	@ 0x40
 80089c0:	d031      	beq.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	f003 0308 	and.w	r3, r3, #8
 80089cc:	2b08      	cmp	r3, #8
 80089ce:	d110      	bne.n	80089f2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	2208      	movs	r2, #8
 80089d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089d8:	68f8      	ldr	r0, [r7, #12]
 80089da:	f000 f838 	bl	8008a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2208      	movs	r2, #8
 80089e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e029      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80089fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a00:	d111      	bne.n	8008a26 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f000 f81e 	bl	8008a4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	2220      	movs	r2, #32
 8008a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e00f      	b.n	8008a46 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69da      	ldr	r2, [r3, #28]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	4013      	ands	r3, r2
 8008a30:	68ba      	ldr	r2, [r7, #8]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	bf0c      	ite	eq
 8008a36:	2301      	moveq	r3, #1
 8008a38:	2300      	movne	r3, #0
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	79fb      	ldrb	r3, [r7, #7]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d0a0      	beq.n	8008986 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b095      	sub	sp, #84	@ 0x54
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a5e:	e853 3f00 	ldrex	r3, [r3]
 8008a62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	461a      	mov	r2, r3
 8008a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a76:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a7c:	e841 2300 	strex	r3, r2, [r1]
 8008a80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d1e6      	bne.n	8008a56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	3308      	adds	r3, #8
 8008a8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	e853 3f00 	ldrex	r3, [r3]
 8008a96:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008a9e:	f023 0301 	bic.w	r3, r3, #1
 8008aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	3308      	adds	r3, #8
 8008aaa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ab2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ab4:	e841 2300 	strex	r3, r2, [r1]
 8008ab8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1e3      	bne.n	8008a88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d118      	bne.n	8008afa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	f023 0310 	bic.w	r3, r3, #16
 8008adc:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ae6:	61bb      	str	r3, [r7, #24]
 8008ae8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aea:	6979      	ldr	r1, [r7, #20]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	e841 2300 	strex	r3, r2, [r1]
 8008af2:	613b      	str	r3, [r7, #16]
   return(result);
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1e6      	bne.n	8008ac8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2220      	movs	r2, #32
 8008afe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008b0e:	bf00      	nop
 8008b10:	3754      	adds	r7, #84	@ 0x54
 8008b12:	46bd      	mov	sp, r7
 8008b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b18:	4770      	bx	lr

08008b1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b085      	sub	sp, #20
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d101      	bne.n	8008b30 <HAL_UARTEx_DisableFifoMode+0x16>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	e027      	b.n	8008b80 <HAL_UARTEx_DisableFifoMode+0x66>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2224      	movs	r2, #36	@ 0x24
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681a      	ldr	r2, [r3, #0]
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f022 0201 	bic.w	r2, r2, #1
 8008b56:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008b5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2220      	movs	r2, #32
 8008b72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2200      	movs	r2, #0
 8008b7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008b7e:	2300      	movs	r3, #0
}
 8008b80:	4618      	mov	r0, r3
 8008b82:	3714      	adds	r7, #20
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d101      	bne.n	8008ba4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ba0:	2302      	movs	r3, #2
 8008ba2:	e02d      	b.n	8008c00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2224      	movs	r2, #36	@ 0x24
 8008bb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f022 0201 	bic.w	r2, r2, #1
 8008bca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	683a      	ldr	r2, [r7, #0]
 8008bdc:	430a      	orrs	r2, r1
 8008bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f84f 	bl	8008c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d101      	bne.n	8008c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c1c:	2302      	movs	r3, #2
 8008c1e:	e02d      	b.n	8008c7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2224      	movs	r2, #36	@ 0x24
 8008c2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0201 	bic.w	r2, r2, #1
 8008c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	683a      	ldr	r2, [r7, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 f811 	bl	8008c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2220      	movs	r2, #32
 8008c6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3710      	adds	r7, #16
 8008c80:	46bd      	mov	sp, r7
 8008c82:	bd80      	pop	{r7, pc}

08008c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b085      	sub	sp, #20
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d108      	bne.n	8008ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2201      	movs	r2, #1
 8008c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ca4:	e031      	b.n	8008d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ca6:	2308      	movs	r3, #8
 8008ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008caa:	2308      	movs	r3, #8
 8008cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	0e5b      	lsrs	r3, r3, #25
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	0f5b      	lsrs	r3, r3, #29
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	f003 0307 	and.w	r3, r3, #7
 8008ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cce:	7bbb      	ldrb	r3, [r7, #14]
 8008cd0:	7b3a      	ldrb	r2, [r7, #12]
 8008cd2:	4911      	ldr	r1, [pc, #68]	@ (8008d18 <UARTEx_SetNbDataToProcess+0x94>)
 8008cd4:	5c8a      	ldrb	r2, [r1, r2]
 8008cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008cda:	7b3a      	ldrb	r2, [r7, #12]
 8008cdc:	490f      	ldr	r1, [pc, #60]	@ (8008d1c <UARTEx_SetNbDataToProcess+0x98>)
 8008cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8008ce4:	b29a      	uxth	r2, r3
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
 8008cee:	7b7a      	ldrb	r2, [r7, #13]
 8008cf0:	4909      	ldr	r1, [pc, #36]	@ (8008d18 <UARTEx_SetNbDataToProcess+0x94>)
 8008cf2:	5c8a      	ldrb	r2, [r1, r2]
 8008cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008cf8:	7b7a      	ldrb	r2, [r7, #13]
 8008cfa:	4908      	ldr	r1, [pc, #32]	@ (8008d1c <UARTEx_SetNbDataToProcess+0x98>)
 8008cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d02:	b29a      	uxth	r2, r3
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	08008dc0 	.word	0x08008dc0
 8008d1c:	08008dc8 	.word	0x08008dc8

08008d20 <memset>:
 8008d20:	4402      	add	r2, r0
 8008d22:	4603      	mov	r3, r0
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d100      	bne.n	8008d2a <memset+0xa>
 8008d28:	4770      	bx	lr
 8008d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d2e:	e7f9      	b.n	8008d24 <memset+0x4>

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4d0d      	ldr	r5, [pc, #52]	@ (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	@ (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1b64      	subs	r4, r4, r5
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	42a6      	cmp	r6, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4d0b      	ldr	r5, [pc, #44]	@ (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	@ (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 f818 	bl	8008d78 <_init>
 8008d48:	1b64      	subs	r4, r4, r5
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d58:	4798      	blx	r3
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d62:	4798      	blx	r3
 8008d64:	3601      	adds	r6, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	08008dd8 	.word	0x08008dd8
 8008d6c:	08008dd8 	.word	0x08008dd8
 8008d70:	08008dd8 	.word	0x08008dd8
 8008d74:	08008ddc 	.word	0x08008ddc

08008d78 <_init>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr

08008d84 <_fini>:
 8008d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d86:	bf00      	nop
 8008d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d8a:	bc08      	pop	{r3}
 8008d8c:	469e      	mov	lr, r3
 8008d8e:	4770      	bx	lr
